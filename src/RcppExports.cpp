// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// cpp_alt_freq_dip_pseudo
NumericMatrix cpp_alt_freq_dip_pseudo(Environment BM, const IntegerVector& rowInd, const IntegerVector& colInd, const NumericVector& ploidy, const bool is_pseudohap, int ncores, bool as_counts);
RcppExport SEXP _tidypopgen_cpp_alt_freq_dip_pseudo(SEXP BMSEXP, SEXP rowIndSEXP, SEXP colIndSEXP, SEXP ploidySEXP, SEXP is_pseudohapSEXP, SEXP ncoresSEXP, SEXP as_countsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Environment >::type BM(BMSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type rowInd(rowIndSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type colInd(colIndSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type ploidy(ploidySEXP);
    Rcpp::traits::input_parameter< const bool >::type is_pseudohap(is_pseudohapSEXP);
    Rcpp::traits::input_parameter< int >::type ncores(ncoresSEXP);
    Rcpp::traits::input_parameter< bool >::type as_counts(as_countsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_alt_freq_dip_pseudo(BM, rowInd, colInd, ploidy, is_pseudohap, ncores, as_counts));
    return rcpp_result_gen;
END_RCPP
}
// fbm256_prod_and_rowSumsSq
List fbm256_prod_and_rowSumsSq(Environment BM, const IntegerVector& ind_row, const IntegerVector& ind_col, const NumericVector& center, const NumericVector& scale, const NumericMatrix& V);
RcppExport SEXP _tidypopgen_fbm256_prod_and_rowSumsSq(SEXP BMSEXP, SEXP ind_rowSEXP, SEXP ind_colSEXP, SEXP centerSEXP, SEXP scaleSEXP, SEXP VSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Environment >::type BM(BMSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type ind_row(ind_rowSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type ind_col(ind_colSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type center(centerSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type scale(scaleSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type V(VSEXP);
    rcpp_result_gen = Rcpp::wrap(fbm256_prod_and_rowSumsSq(BM, ind_row, ind_col, center, scale, V));
    return rcpp_result_gen;
END_RCPP
}
// gt_grouped_alt_freq_diploid
ListOf<NumericMatrix> gt_grouped_alt_freq_diploid(Environment BM, const IntegerVector& rowInd, const IntegerVector& colInd, const IntegerVector& groupIds, int ngroups, int ncores);
RcppExport SEXP _tidypopgen_gt_grouped_alt_freq_diploid(SEXP BMSEXP, SEXP rowIndSEXP, SEXP colIndSEXP, SEXP groupIdsSEXP, SEXP ngroupsSEXP, SEXP ncoresSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Environment >::type BM(BMSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type rowInd(rowIndSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type colInd(colIndSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type groupIds(groupIdsSEXP);
    Rcpp::traits::input_parameter< int >::type ngroups(ngroupsSEXP);
    Rcpp::traits::input_parameter< int >::type ncores(ncoresSEXP);
    rcpp_result_gen = Rcpp::wrap(gt_grouped_alt_freq_diploid(BM, rowInd, colInd, groupIds, ngroups, ncores));
    return rcpp_result_gen;
END_RCPP
}
// gt_grouped_alt_freq_pseudohap
ListOf<NumericMatrix> gt_grouped_alt_freq_pseudohap(Environment BM, const IntegerVector& rowInd, const IntegerVector& colInd, const IntegerVector& groupIds, int ngroups, const IntegerVector& ploidy, int ncores);
RcppExport SEXP _tidypopgen_gt_grouped_alt_freq_pseudohap(SEXP BMSEXP, SEXP rowIndSEXP, SEXP colIndSEXP, SEXP groupIdsSEXP, SEXP ngroupsSEXP, SEXP ploidySEXP, SEXP ncoresSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Environment >::type BM(BMSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type rowInd(rowIndSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type colInd(colIndSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type groupIds(groupIdsSEXP);
    Rcpp::traits::input_parameter< int >::type ngroups(ngroupsSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type ploidy(ploidySEXP);
    Rcpp::traits::input_parameter< int >::type ncores(ncoresSEXP);
    rcpp_result_gen = Rcpp::wrap(gt_grouped_alt_freq_pseudohap(BM, rowInd, colInd, groupIds, ngroups, ploidy, ncores));
    return rcpp_result_gen;
END_RCPP
}
// gt_grouped_missingness
NumericMatrix gt_grouped_missingness(Environment BM, const IntegerVector& rowInd, const IntegerVector& colInd, const IntegerVector& groupIds, int ngroups, int ncores);
RcppExport SEXP _tidypopgen_gt_grouped_missingness(SEXP BMSEXP, SEXP rowIndSEXP, SEXP colIndSEXP, SEXP groupIdsSEXP, SEXP ngroupsSEXP, SEXP ncoresSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Environment >::type BM(BMSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type rowInd(rowIndSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type colInd(colIndSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type groupIds(groupIdsSEXP);
    Rcpp::traits::input_parameter< int >::type ngroups(ngroupsSEXP);
    Rcpp::traits::input_parameter< int >::type ncores(ncoresSEXP);
    rcpp_result_gen = Rcpp::wrap(gt_grouped_missingness(BM, rowInd, colInd, groupIds, ngroups, ncores));
    return rcpp_result_gen;
END_RCPP
}
// gt_grouped_pi_diploid
ListOf<NumericMatrix> gt_grouped_pi_diploid(Environment BM, const IntegerVector& rowInd, const IntegerVector& colInd, const IntegerVector& groupIds, int ngroups, int ncores);
RcppExport SEXP _tidypopgen_gt_grouped_pi_diploid(SEXP BMSEXP, SEXP rowIndSEXP, SEXP colIndSEXP, SEXP groupIdsSEXP, SEXP ngroupsSEXP, SEXP ncoresSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Environment >::type BM(BMSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type rowInd(rowIndSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type colInd(colIndSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type groupIds(groupIdsSEXP);
    Rcpp::traits::input_parameter< int >::type ngroups(ngroupsSEXP);
    Rcpp::traits::input_parameter< int >::type ncores(ncoresSEXP);
    rcpp_result_gen = Rcpp::wrap(gt_grouped_pi_diploid(BM, rowInd, colInd, groupIds, ngroups, ncores));
    return rcpp_result_gen;
END_RCPP
}
// gt_grouped_summaries
ListOf<NumericMatrix> gt_grouped_summaries(Environment BM, const IntegerVector& rowInd, const IntegerVector& colInd, const IntegerVector& groupIds, size_t ngroups, int ncores);
RcppExport SEXP _tidypopgen_gt_grouped_summaries(SEXP BMSEXP, SEXP rowIndSEXP, SEXP colIndSEXP, SEXP groupIdsSEXP, SEXP ngroupsSEXP, SEXP ncoresSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Environment >::type BM(BMSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type rowInd(rowIndSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type colInd(colIndSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type groupIds(groupIdsSEXP);
    Rcpp::traits::input_parameter< size_t >::type ngroups(ngroupsSEXP);
    Rcpp::traits::input_parameter< int >::type ncores(ncoresSEXP);
    rcpp_result_gen = Rcpp::wrap(gt_grouped_summaries(BM, rowInd, colInd, groupIds, ngroups, ncores));
    return rcpp_result_gen;
END_RCPP
}
// gt_ind_hetero
IntegerMatrix gt_ind_hetero(Environment BM, const IntegerVector& rowInd, const IntegerVector& colInd, int ncores);
RcppExport SEXP _tidypopgen_gt_ind_hetero(SEXP BMSEXP, SEXP rowIndSEXP, SEXP colIndSEXP, SEXP ncoresSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Environment >::type BM(BMSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type rowInd(rowIndSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type colInd(colIndSEXP);
    Rcpp::traits::input_parameter< int >::type ncores(ncoresSEXP);
    rcpp_result_gen = Rcpp::wrap(gt_ind_hetero(BM, rowInd, colInd, ncores));
    return rcpp_result_gen;
END_RCPP
}
// gt_pi_diploid
NumericVector gt_pi_diploid(Environment BM, const IntegerVector& rowInd, const IntegerVector& colInd, int ncores);
RcppExport SEXP _tidypopgen_gt_pi_diploid(SEXP BMSEXP, SEXP rowIndSEXP, SEXP colIndSEXP, SEXP ncoresSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Environment >::type BM(BMSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type rowInd(rowIndSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type colInd(colIndSEXP);
    Rcpp::traits::input_parameter< int >::type ncores(ncoresSEXP);
    rcpp_result_gen = Rcpp::wrap(gt_pi_diploid(BM, rowInd, colInd, ncores));
    return rcpp_result_gen;
END_RCPP
}
// SNPHWE2_R
double SNPHWE2_R(int32_t obs_hets, int32_t obs_hom1, int32_t obs_hom2, uint32_t midp);
RcppExport SEXP _tidypopgen_SNPHWE2_R(SEXP obs_hetsSEXP, SEXP obs_hom1SEXP, SEXP obs_hom2SEXP, SEXP midpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int32_t >::type obs_hets(obs_hetsSEXP);
    Rcpp::traits::input_parameter< int32_t >::type obs_hom1(obs_hom1SEXP);
    Rcpp::traits::input_parameter< int32_t >::type obs_hom2(obs_hom2SEXP);
    Rcpp::traits::input_parameter< uint32_t >::type midp(midpSEXP);
    rcpp_result_gen = Rcpp::wrap(SNPHWE2_R(obs_hets, obs_hom1, obs_hom2, midp));
    return rcpp_result_gen;
END_RCPP
}
// hwe_on_matrix
NumericVector hwe_on_matrix(IntegerMatrix geno_counts, uint32_t midp);
RcppExport SEXP _tidypopgen_hwe_on_matrix(SEXP geno_countsSEXP, SEXP midpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerMatrix >::type geno_counts(geno_countsSEXP);
    Rcpp::traits::input_parameter< uint32_t >::type midp(midpSEXP);
    rcpp_result_gen = Rcpp::wrap(hwe_on_matrix(geno_counts, midp));
    return rcpp_result_gen;
END_RCPP
}
// gt_grouped_hwe
NumericMatrix gt_grouped_hwe(Environment BM, const IntegerVector& rowInd, const IntegerVector& colInd, const IntegerVector& groupIds, size_t ngroups, uint32_t midp);
RcppExport SEXP _tidypopgen_gt_grouped_hwe(SEXP BMSEXP, SEXP rowIndSEXP, SEXP colIndSEXP, SEXP groupIdsSEXP, SEXP ngroupsSEXP, SEXP midpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Environment >::type BM(BMSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type rowInd(rowIndSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type colInd(colIndSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type groupIds(groupIdsSEXP);
    Rcpp::traits::input_parameter< size_t >::type ngroups(ngroupsSEXP);
    Rcpp::traits::input_parameter< uint32_t >::type midp(midpSEXP);
    rcpp_result_gen = Rcpp::wrap(gt_grouped_hwe(BM, rowInd, colInd, groupIds, ngroups, midp));
    return rcpp_result_gen;
END_RCPP
}
// pairwise_fst_hudson_loop
List pairwise_fst_hudson_loop(NumericMatrix pairwise_combn, NumericMatrix n, NumericMatrix freq_alt, NumericMatrix freq_ref, bool by_locus, bool return_num_dem);
RcppExport SEXP _tidypopgen_pairwise_fst_hudson_loop(SEXP pairwise_combnSEXP, SEXP nSEXP, SEXP freq_altSEXP, SEXP freq_refSEXP, SEXP by_locusSEXP, SEXP return_num_demSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type pairwise_combn(pairwise_combnSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type n(nSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type freq_alt(freq_altSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type freq_ref(freq_refSEXP);
    Rcpp::traits::input_parameter< bool >::type by_locus(by_locusSEXP);
    Rcpp::traits::input_parameter< bool >::type return_num_dem(return_num_demSEXP);
    rcpp_result_gen = Rcpp::wrap(pairwise_fst_hudson_loop(pairwise_combn, n, freq_alt, freq_ref, by_locus, return_num_dem));
    return rcpp_result_gen;
END_RCPP
}
// pairwise_fst_nei87_loop
List pairwise_fst_nei87_loop(NumericMatrix pairwise_combn, NumericMatrix n, NumericMatrix het_obs, NumericMatrix freq_alt, NumericMatrix freq_ref, bool by_locus, bool return_num_dem);
RcppExport SEXP _tidypopgen_pairwise_fst_nei87_loop(SEXP pairwise_combnSEXP, SEXP nSEXP, SEXP het_obsSEXP, SEXP freq_altSEXP, SEXP freq_refSEXP, SEXP by_locusSEXP, SEXP return_num_demSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type pairwise_combn(pairwise_combnSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type n(nSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type het_obs(het_obsSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type freq_alt(freq_altSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type freq_ref(freq_refSEXP);
    Rcpp::traits::input_parameter< bool >::type by_locus(by_locusSEXP);
    Rcpp::traits::input_parameter< bool >::type return_num_dem(return_num_demSEXP);
    rcpp_result_gen = Rcpp::wrap(pairwise_fst_nei87_loop(pairwise_combn, n, het_obs, freq_alt, freq_ref, by_locus, return_num_dem));
    return rcpp_result_gen;
END_RCPP
}
// pairwise_fst_wc84_loop
List pairwise_fst_wc84_loop(NumericMatrix pairwise_combn, NumericMatrix n, NumericMatrix freq_alt, NumericMatrix het_obs, bool by_locus, bool return_num_dem);
RcppExport SEXP _tidypopgen_pairwise_fst_wc84_loop(SEXP pairwise_combnSEXP, SEXP nSEXP, SEXP freq_altSEXP, SEXP het_obsSEXP, SEXP by_locusSEXP, SEXP return_num_demSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type pairwise_combn(pairwise_combnSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type n(nSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type freq_alt(freq_altSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type het_obs(het_obsSEXP);
    Rcpp::traits::input_parameter< bool >::type by_locus(by_locusSEXP);
    Rcpp::traits::input_parameter< bool >::type return_num_dem(return_num_demSEXP);
    rcpp_result_gen = Rcpp::wrap(pairwise_fst_wc84_loop(pairwise_combn, n, freq_alt, het_obs, by_locus, return_num_dem));
    return rcpp_result_gen;
END_RCPP
}
// read_packedancestry
bool read_packedancestry(const char * filename, Environment BM, const RawMatrix& tab);
RcppExport SEXP _tidypopgen_read_packedancestry(SEXP filenameSEXP, SEXP BMSEXP, SEXP tabSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const char * >::type filename(filenameSEXP);
    Rcpp::traits::input_parameter< Environment >::type BM(BMSEXP);
    Rcpp::traits::input_parameter< const RawMatrix& >::type tab(tabSEXP);
    rcpp_result_gen = Rcpp::wrap(read_packedancestry(filename, BM, tab));
    return rcpp_result_gen;
END_RCPP
}
// increment_as_counts
void increment_as_counts(Environment k, Environment k2, arma::mat& na_mat, arma::mat& dos_mat, Environment BM, const IntegerVector& rowInd, const IntegerVector& colInd);
RcppExport SEXP _tidypopgen_increment_as_counts(SEXP kSEXP, SEXP k2SEXP, SEXP na_matSEXP, SEXP dos_matSEXP, SEXP BMSEXP, SEXP rowIndSEXP, SEXP colIndSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Environment >::type k(kSEXP);
    Rcpp::traits::input_parameter< Environment >::type k2(k2SEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type na_mat(na_matSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type dos_mat(dos_matSEXP);
    Rcpp::traits::input_parameter< Environment >::type BM(BMSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type rowInd(rowIndSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type colInd(colIndSEXP);
    increment_as_counts(k, k2, na_mat, dos_mat, BM, rowInd, colInd);
    return R_NilValue;
END_RCPP
}
// increment_ibs_counts
void increment_ibs_counts(Environment k, Environment k2, arma::mat& genotype0, arma::mat& genotype1, arma::mat& genotype2, Environment BM, const IntegerVector& rowInd, const IntegerVector& colInd);
RcppExport SEXP _tidypopgen_increment_ibs_counts(SEXP kSEXP, SEXP k2SEXP, SEXP genotype0SEXP, SEXP genotype1SEXP, SEXP genotype2SEXP, SEXP BMSEXP, SEXP rowIndSEXP, SEXP colIndSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Environment >::type k(kSEXP);
    Rcpp::traits::input_parameter< Environment >::type k2(k2SEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type genotype0(genotype0SEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type genotype1(genotype1SEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type genotype2(genotype2SEXP);
    Rcpp::traits::input_parameter< Environment >::type BM(BMSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type rowInd(rowIndSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type colInd(colIndSEXP);
    increment_ibs_counts(k, k2, genotype0, genotype1, genotype2, BM, rowInd, colInd);
    return R_NilValue;
END_RCPP
}
// increment_king_numerator
void increment_king_numerator(Environment k, Environment n_Aa_i, arma::mat& genotype0, arma::mat& genotype1, arma::mat& genotype2, arma::mat& genotype_valid, Environment BM, const IntegerVector& rowInd, const IntegerVector& colInd);
RcppExport SEXP _tidypopgen_increment_king_numerator(SEXP kSEXP, SEXP n_Aa_iSEXP, SEXP genotype0SEXP, SEXP genotype1SEXP, SEXP genotype2SEXP, SEXP genotype_validSEXP, SEXP BMSEXP, SEXP rowIndSEXP, SEXP colIndSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Environment >::type k(kSEXP);
    Rcpp::traits::input_parameter< Environment >::type n_Aa_i(n_Aa_iSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type genotype0(genotype0SEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type genotype1(genotype1SEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type genotype2(genotype2SEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type genotype_valid(genotype_validSEXP);
    Rcpp::traits::input_parameter< Environment >::type BM(BMSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type rowInd(rowIndSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type colInd(colIndSEXP);
    increment_king_numerator(k, n_Aa_i, genotype0, genotype1, genotype2, genotype_valid, BM, rowInd, colInd);
    return R_NilValue;
END_RCPP
}
// vcf_loci_table
List vcf_loci_table(std::string filename);
RcppExport SEXP _tidypopgen_vcf_loci_table(SEXP filenameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type filename(filenameSEXP);
    rcpp_result_gen = Rcpp::wrap(vcf_loci_table(filename));
    return rcpp_result_gen;
END_RCPP
}
// vcf_genotypes_to_fbm
bool vcf_genotypes_to_fbm(std::string filename, Environment BM, IntegerVector& biallelic, const int missing_value, const int n_header_lines);
RcppExport SEXP _tidypopgen_vcf_genotypes_to_fbm(SEXP filenameSEXP, SEXP BMSEXP, SEXP biallelicSEXP, SEXP missing_valueSEXP, SEXP n_header_linesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type filename(filenameSEXP);
    Rcpp::traits::input_parameter< Environment >::type BM(BMSEXP);
    Rcpp::traits::input_parameter< IntegerVector& >::type biallelic(biallelicSEXP);
    Rcpp::traits::input_parameter< const int >::type missing_value(missing_valueSEXP);
    Rcpp::traits::input_parameter< const int >::type n_header_lines(n_header_linesSEXP);
    rcpp_result_gen = Rcpp::wrap(vcf_genotypes_to_fbm(filename, BM, biallelic, missing_value, n_header_lines));
    return rcpp_result_gen;
END_RCPP
}
// write_to_FBM
void write_to_FBM(Environment BM, IntegerMatrix& allele_counts, const int col_start, const int n_loci, int ncores);
RcppExport SEXP _tidypopgen_write_to_FBM(SEXP BMSEXP, SEXP allele_countsSEXP, SEXP col_startSEXP, SEXP n_lociSEXP, SEXP ncoresSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Environment >::type BM(BMSEXP);
    Rcpp::traits::input_parameter< IntegerMatrix& >::type allele_counts(allele_countsSEXP);
    Rcpp::traits::input_parameter< const int >::type col_start(col_startSEXP);
    Rcpp::traits::input_parameter< const int >::type n_loci(n_lociSEXP);
    Rcpp::traits::input_parameter< int >::type ncores(ncoresSEXP);
    write_to_FBM(BM, allele_counts, col_start, n_loci, ncores);
    return R_NilValue;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_tidypopgen_cpp_alt_freq_dip_pseudo", (DL_FUNC) &_tidypopgen_cpp_alt_freq_dip_pseudo, 7},
    {"_tidypopgen_fbm256_prod_and_rowSumsSq", (DL_FUNC) &_tidypopgen_fbm256_prod_and_rowSumsSq, 6},
    {"_tidypopgen_gt_grouped_alt_freq_diploid", (DL_FUNC) &_tidypopgen_gt_grouped_alt_freq_diploid, 6},
    {"_tidypopgen_gt_grouped_alt_freq_pseudohap", (DL_FUNC) &_tidypopgen_gt_grouped_alt_freq_pseudohap, 7},
    {"_tidypopgen_gt_grouped_missingness", (DL_FUNC) &_tidypopgen_gt_grouped_missingness, 6},
    {"_tidypopgen_gt_grouped_pi_diploid", (DL_FUNC) &_tidypopgen_gt_grouped_pi_diploid, 6},
    {"_tidypopgen_gt_grouped_summaries", (DL_FUNC) &_tidypopgen_gt_grouped_summaries, 6},
    {"_tidypopgen_gt_ind_hetero", (DL_FUNC) &_tidypopgen_gt_ind_hetero, 4},
    {"_tidypopgen_gt_pi_diploid", (DL_FUNC) &_tidypopgen_gt_pi_diploid, 4},
    {"_tidypopgen_SNPHWE2_R", (DL_FUNC) &_tidypopgen_SNPHWE2_R, 4},
    {"_tidypopgen_hwe_on_matrix", (DL_FUNC) &_tidypopgen_hwe_on_matrix, 2},
    {"_tidypopgen_gt_grouped_hwe", (DL_FUNC) &_tidypopgen_gt_grouped_hwe, 6},
    {"_tidypopgen_pairwise_fst_hudson_loop", (DL_FUNC) &_tidypopgen_pairwise_fst_hudson_loop, 6},
    {"_tidypopgen_pairwise_fst_nei87_loop", (DL_FUNC) &_tidypopgen_pairwise_fst_nei87_loop, 7},
    {"_tidypopgen_pairwise_fst_wc84_loop", (DL_FUNC) &_tidypopgen_pairwise_fst_wc84_loop, 6},
    {"_tidypopgen_read_packedancestry", (DL_FUNC) &_tidypopgen_read_packedancestry, 3},
    {"_tidypopgen_increment_as_counts", (DL_FUNC) &_tidypopgen_increment_as_counts, 7},
    {"_tidypopgen_increment_ibs_counts", (DL_FUNC) &_tidypopgen_increment_ibs_counts, 8},
    {"_tidypopgen_increment_king_numerator", (DL_FUNC) &_tidypopgen_increment_king_numerator, 9},
    {"_tidypopgen_vcf_loci_table", (DL_FUNC) &_tidypopgen_vcf_loci_table, 1},
    {"_tidypopgen_vcf_genotypes_to_fbm", (DL_FUNC) &_tidypopgen_vcf_genotypes_to_fbm, 5},
    {"_tidypopgen_write_to_FBM", (DL_FUNC) &_tidypopgen_write_to_FBM, 5},
    {NULL, NULL, 0}
};

RcppExport void R_init_tidypopgen(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
