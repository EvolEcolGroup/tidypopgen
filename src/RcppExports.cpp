// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// SNPHWE2
double SNPHWE2(int32_t obs_hets, int32_t obs_hom1, int32_t obs_hom2, uint32_t midp);
RcppExport SEXP _tidypopgen_SNPHWE2(SEXP obs_hetsSEXP, SEXP obs_hom1SEXP, SEXP obs_hom2SEXP, SEXP midpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int32_t >::type obs_hets(obs_hetsSEXP);
    Rcpp::traits::input_parameter< int32_t >::type obs_hom1(obs_hom1SEXP);
    Rcpp::traits::input_parameter< int32_t >::type obs_hom2(obs_hom2SEXP);
    Rcpp::traits::input_parameter< uint32_t >::type midp(midpSEXP);
    rcpp_result_gen = Rcpp::wrap(SNPHWE2(obs_hets, obs_hom1, obs_hom2, midp));
    return rcpp_result_gen;
END_RCPP
}
// SNPHWE_t
int32_t SNPHWE_t(int32_t obs_hets, int32_t obs_hom1, int32_t obs_hom2, double thresh);
RcppExport SEXP _tidypopgen_SNPHWE_t(SEXP obs_hetsSEXP, SEXP obs_hom1SEXP, SEXP obs_hom2SEXP, SEXP threshSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int32_t >::type obs_hets(obs_hetsSEXP);
    Rcpp::traits::input_parameter< int32_t >::type obs_hom1(obs_hom1SEXP);
    Rcpp::traits::input_parameter< int32_t >::type obs_hom2(obs_hom2SEXP);
    Rcpp::traits::input_parameter< double >::type thresh(threshSEXP);
    rcpp_result_gen = Rcpp::wrap(SNPHWE_t(obs_hets, obs_hom1, obs_hom2, thresh));
    return rcpp_result_gen;
END_RCPP
}
// SNPHWE_midp_t
int32_t SNPHWE_midp_t(int32_t obs_hets, int32_t obs_hom1, int32_t obs_hom2, double thresh);
RcppExport SEXP _tidypopgen_SNPHWE_midp_t(SEXP obs_hetsSEXP, SEXP obs_hom1SEXP, SEXP obs_hom2SEXP, SEXP threshSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int32_t >::type obs_hets(obs_hetsSEXP);
    Rcpp::traits::input_parameter< int32_t >::type obs_hom1(obs_hom1SEXP);
    Rcpp::traits::input_parameter< int32_t >::type obs_hom2(obs_hom2SEXP);
    Rcpp::traits::input_parameter< double >::type thresh(threshSEXP);
    rcpp_result_gen = Rcpp::wrap(SNPHWE_midp_t(obs_hets, obs_hom1, obs_hom2, thresh));
    return rcpp_result_gen;
END_RCPP
}
// increment_ibs_counts
void increment_ibs_counts(Environment K, Environment K2, arma::mat& part_temp0, arma::mat& part_temp1, arma::mat& part_temp2, Environment BM, const IntegerVector& rowInd, const IntegerVector& colInd);
RcppExport SEXP _tidypopgen_increment_ibs_counts(SEXP KSEXP, SEXP K2SEXP, SEXP part_temp0SEXP, SEXP part_temp1SEXP, SEXP part_temp2SEXP, SEXP BMSEXP, SEXP rowIndSEXP, SEXP colIndSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Environment >::type K(KSEXP);
    Rcpp::traits::input_parameter< Environment >::type K2(K2SEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type part_temp0(part_temp0SEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type part_temp1(part_temp1SEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type part_temp2(part_temp2SEXP);
    Rcpp::traits::input_parameter< Environment >::type BM(BMSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type rowInd(rowIndSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type colInd(colIndSEXP);
    increment_ibs_counts(K, K2, part_temp0, part_temp1, part_temp2, BM, rowInd, colInd);
    return R_NilValue;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_tidypopgen_SNPHWE2", (DL_FUNC) &_tidypopgen_SNPHWE2, 4},
    {"_tidypopgen_SNPHWE_t", (DL_FUNC) &_tidypopgen_SNPHWE_t, 4},
    {"_tidypopgen_SNPHWE_midp_t", (DL_FUNC) &_tidypopgen_SNPHWE_midp_t, 4},
    {"_tidypopgen_increment_ibs_counts", (DL_FUNC) &_tidypopgen_increment_ibs_counts, 8},
    {NULL, NULL, 0}
};

RcppExport void R_init_tidypopgen(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
