[{"path":"https://evolecolgroup.github.io/tidypopgen/CODE_OF_CONDUCT.html","id":null,"dir":"","previous_headings":"","what":"Contributor Code of Conduct","title":"Contributor Code of Conduct","text":"contributors maintainers project, pledge respect people contribute reporting issues, posting feature requests, updating documentation, submitting pull requests patches, activities. committed making participation project harassment-free experience everyone, regardless level experience, gender, gender identity expression, sexual orientation, disability, personal appearance, body size, race, ethnicity, age, religion. Examples unacceptable behavior participants include use sexual language imagery, derogatory comments personal attacks, trolling, public private harassment, insults, unprofessional conduct. Project maintainers right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct. Project maintainers follow Code Conduct may removed project team. Instances abusive, harassing, otherwise unacceptable behavior may reported opening issue contacting one project maintainers. Code Conduct adapted Contributor Covenant (https://www.contributor-covenant.org), version 1.0.0, available https://contributor-covenant.org/version/1/0/0/.","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/CONTRIBUTING.html","id":null,"dir":"","previous_headings":"","what":"Contributing to tidypopgen","title":"Contributing to tidypopgen","text":"document outlines contribute development tidypopgen. package maintained voluntary basis, help always appreciated.","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/CONTRIBUTING.html","id":"the-basic-process-of-contributing","dir":"","previous_headings":"","what":"The basic process of contributing","title":"Contributing to tidypopgen","text":"Development work tidypopgen occurs dev branch. , want propose changes, work dev. Start forking project onto github repository, make changes directly fork (either dev branch, make custom branch). updating documentation checking tests pass (see ), start Pull Request. proposed changes reviewed, might asked fix/improve code. can iterative process, requiring rounds revision depending complexity code. Functions documented using roxygen. changes affects documentation , rebuild . root directory package, simply run: implemented new functionality, patched bug, consider whether add appropriate unit test. tidypopgen uses testthat framework unit tests. make sure tests work : Finally, submit push request, check changes don’t break build. can check, also builds vignette runs tests.: Make sure resolved warnings notes raised devtools::check()! followed 3 steps, ready make Pull Request. changes go automatic continuous integration, check impact changes multiple platforms. everything goes well, see green tick submission.","code":"devtools::document() devtools::test() devtools::check()"},{"path":"https://evolecolgroup.github.io/tidypopgen/CONTRIBUTING.html","id":"fixing-typos","dir":"","previous_headings":"","what":"Fixing typos","title":"Contributing to tidypopgen","text":"spot typos, spelling mistakes, grammatical errors documentation, fix directly file describes function. .R file R directory, .Rd file man directory. .Rd files automatically generated roxygen2 edited hand. recommend study first roxygen2 comments work.","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/CONTRIBUTING.html","id":"functional-changes","dir":"","previous_headings":"","what":"Functional changes","title":"Contributing to tidypopgen","text":"want make change impacts functioning tidypopgen, ’s good idea first file issue explaining mind. change meant fix bug, add minimal reprex. good reprex also perfect starting point writing unit test, accompany functional change code. Unit tests also essential fixing bugs, can demonstrate fix work, prevent future changes undoing work. unit testing, use testthat; find tests tests, file dedicated function, following convention test_my_function.R naming files. creating tests, try make use built-datasets, rather adding data files package. Ideally, body Pull Request include phrase Fixes #issue-number, issue_number number Github. way, Pull Request automatically linked issue, issue closed Pull Request merged . user-facing changes, add bullet top NEWS.md (.e. just first header). Follow style described https://style.tidyverse.org/news.html. continuous integration checks Pull Request reduce test coverage.","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/CONTRIBUTING.html","id":"code-style","dir":"","previous_headings":"Functional changes","what":"Code style","title":"Contributing to tidypopgen","text":"New code follow tidyverse style guide. can use styler package apply styles, please don’t restyle code nothing PR. Lots commenting code helps mantainability; , doubt, always add explanation new code.","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/CONTRIBUTING.html","id":"compiling-on-mac","dir":"","previous_headings":"","what":"Compiling on Mac","title":"Contributing to tidypopgen","text":"develop Mac, need install additional software, encounter issues Clang finding correct path. information available CRAN page","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/CONTRIBUTING.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Contributing to tidypopgen","text":"Please note tidyverse project released Contributor Code Conduct. contributing project agree abide terms.","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://evolecolgroup.github.io/tidypopgen/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://evolecolgroup.github.io/tidypopgen/articles/a01_overview.html","id":"tidy-data-in-population-genetics","dir":"Articles","previous_headings":"","what":"Tidy data in population genetics","title":"The grammar of population genetics","text":"fundamental tenet tidy data observation row variable column, value cell. Applying logic population genetic data means individual row, individual metadata (population, sex, phenotype, etc) variables. Genotypes locus can also thought variables, however, due large number loci restricted values genotype can take, inefficient store individual standard columns. tidypopgen, represent data gen_tbl, subclass tibble two compulsory columns: id individual (character, must unique individual), genotypes (stored compressed format File-Backed Matrix). genotypes column stores vector row indices matrix individual , printed, shows first two genotypes individual. real data reside disk, attribute fbm genotype column contains information access . also additional attribute, loci provides information loci, including column indices represent locus FBM. vector row indices table loci can subsetted reordered without changing data disk; thus, operation gen_tibble fast shapes indices genotype matrix rather matrix . illustrated diagram . , can see gen_tibble object, loci table, File-Backed Matrix. File-Backed Matrix, row individual column locus. function operates subset individuals loci, indices subset used access relevant rows columns File-Backed Matrix, without needing load entire matrix memory. makes operations efficient scalable large datasets. loci tibble includes columns big_index index File-Backed Matrix (FBM), name locus name (character, must unique), chromosome chromosome (factor), position position chromosome (integer, known, otherwise set NA), genetic_dist genetic distance chromosome (numeric, known, else set 0), allele_ref reference allele (character), allele_alt alternate allele (character, can 0 monomorphic loci, following convention plink). Additional individual metadata can stored columns main gen_tbl, whilst additional loci information (position centimorgans) can added columns loci attribute table. principle, possible use use multiple ways compress genotypes. tidypopgen currently uses File-Backed Matrix object package bigsnpr. fast well documented, mostly geared towards diploid data. tidypopgen expands object deal different levels ploidy, including multiple ploidy within single dataset; however, functions currently incompatible ploidy levels 2 (return clear error message avoid computing anything incorrectly).","code":""},{"path":[]},{"path":"https://evolecolgroup.github.io/tidypopgen/articles/a01_overview.html","id":"the-gen_tibble","dir":"Articles","previous_headings":"The grammar of population genetics","what":"The gen_tibble","title":"The grammar of population genetics","text":"Given information individuals, genotypes, loci: can create simple gen_tibble object (class gen_tbl) : provided information three files underlying genotype information stored. don’t want keep files, used tmp directory; normally want use working directory files cleared R end session. important files deleted moved, gen_tibble stores paths future use. Now let’s look gen_tibble: discussed , tibble called, genotypes column prints first two genotypes individual. genotypes column contains indices individuals FBM values, FBM attribute. retrieve rest genotypes (compressed FBM), use: want extract information loci genotypes (stored attribute column), say: Note , passing gen_tibble function works genotypes, generally necessary pass column genotypes call: However, function used within dplyr verb mutate, need pass genotype column function: , simply:","code":"library(tidypopgen) #> Loading required package: dplyr #>  #> Attaching package: 'dplyr' #> The following objects are masked from 'package:stats': #>  #>     filter, lag #> The following objects are masked from 'package:base': #>  #>     intersect, setdiff, setequal, union #> Loading required package: tibble example_indiv_meta <- data.frame(   id = c(\"a\", \"b\", \"c\", \"d\", \"e\"),   population = c(\"pop1\", \"pop1\", \"pop2\", \"pop2\", \"pop2\") ) example_genotypes <- rbind(   c(1, 1, 0, 1, 1, 0),   c(2, 0, 0, 0, NA, 0),   c(1, 2, 0, 0, 1, 1),   c(0, 2, 0, 1, 2, 1),   c(1, 1, NA, 2, 1, 0) ) example_loci <- data.frame(   name = c(\"rs1\", \"rs2\", \"rs3\", \"rs4\", \"x1\", \"x2\"),   chromosome = c(1, 1, 1, 1, 2, 2),   position = c(3, 5, 65, 343, 23, 456),   genetic_dist = c(0, 0, 0, 0, 0, 0),   allele_ref = c(\"A\", \"T\", \"C\", \"G\", \"C\", \"T\"),   allele_alt = c(\"T\", \"C\", NA, \"C\", \"G\", \"A\") ) example_gt <- gen_tibble(example_genotypes,   indiv_meta = example_indiv_meta,   loci = example_loci,   backingfile = tempfile() ) #>  #> gen_tibble saved to /tmp/RtmpjgVNl5/file2bd5512f03ae.gt #> using FBM RDS: /tmp/RtmpjgVNl5/file2bd5512f03ae.rds #> with FBM backing file: /tmp/RtmpjgVNl5/file2bd5512f03ae.bk #> make sure that you do NOT delete those files! #> to reload the gen_tibble in another session, use: #> gt_load('/tmp/RtmpjgVNl5/file2bd5512f03ae.gt') example_gt #> # A gen_tibble: 6 loci #> # A tibble:     5 × 3 #>   id    population  genotypes #>   <chr> <chr>      <vctr_SNP> #> 1 a     pop1        [1,1,...] #> 2 b     pop1        [2,0,...] #> 3 c     pop2        [1,2,...] #> 4 d     pop2        [0,2,...] #> 5 e     pop2        [1,1,...] example_gt %>% show_genotypes() #>      [,1] [,2] [,3] [,4] [,5] [,6] #> [1,]    1    1    0    1    1    0 #> [2,]    2    0    0    0   NA    0 #> [3,]    1    2    0    0    1    1 #> [4,]    0    2    0    1    2    1 #> [5,]    1    1   NA    2    1    0 example_gt %>% show_loci() #> # A tibble: 6 × 7 #>   big_index name  chromosome position genetic_dist allele_ref allele_alt #>       <int> <chr> <fct>         <dbl>        <dbl> <chr>      <chr>      #> 1         1 rs1   1                 3            0 A          T          #> 2         2 rs2   1                 5            0 T          C          #> 3         3 rs3   1                65            0 C          NA         #> 4         4 rs4   1               343            0 G          C          #> 5         5 x1    2                23            0 C          G          #> 6         6 x2    2               456            0 T          A example_gt %>% indiv_het_obs() #> [1] 0.6666667 0.0000000 0.5000000 0.3333333 0.6000000 example_gt %>% mutate(het_obs = indiv_het_obs(.data$genotypes)) #> # A gen_tibble: 6 loci #> # A tibble:     5 × 4 #>   id    population  genotypes het_obs #>   <chr> <chr>      <vctr_SNP>   <dbl> #> 1 a     pop1        [1,1,...]   0.667 #> 2 b     pop1        [2,0,...]   0     #> 3 c     pop2        [1,2,...]   0.5   #> 4 d     pop2        [0,2,...]   0.333 #> 5 e     pop2        [1,1,...]   0.6 example_gt %>% mutate(het_obs = indiv_het_obs(genotypes)) #> # A gen_tibble: 6 loci #> # A tibble:     5 × 4 #>   id    population  genotypes het_obs #>   <chr> <chr>      <vctr_SNP>   <dbl> #> 1 a     pop1        [1,1,...]   0.667 #> 2 b     pop1        [2,0,...]   0     #> 3 c     pop2        [1,2,...]   0.5   #> 4 d     pop2        [0,2,...]   0.333 #> 5 e     pop2        [1,1,...]   0.6"},{"path":"https://evolecolgroup.github.io/tidypopgen/articles/a01_overview.html","id":"standard-dplyr-verbs-to-manipulate-the-tibble","dir":"Articles","previous_headings":"","what":"Standard dplyr verbs to manipulate the tibble","title":"The grammar of population genetics","text":"individual metadata can processed usual tidyverse grammar. , can filter individuals population number functions compute population genetics quantities individual, individual observed heterozygosity. can compute simply : filtering: can use mutate add observed heterozygosity column gen_tibble (, note functions work genotypes don’t need passed arguments tibble passed directly , column genotypes provided used within dplyr verbs mutate): number functions estimate quantities individual level, prefixed indiv_.","code":"example_pop2 <- example_gt %>% filter(population == \"pop2\") example_pop2 #> # A gen_tibble: 6 loci #> # A tibble:     3 × 3 #>   id    population  genotypes #>   <chr> <chr>      <vctr_SNP> #> 1 c     pop2        [1,2,...] #> 2 d     pop2        [0,2,...] #> 3 e     pop2        [1,1,...] example_gt %>% indiv_het_obs() #> [1] 0.6666667 0.0000000 0.5000000 0.3333333 0.6000000 example_gt %>%   filter(population == \"pop2\") %>%   indiv_het_obs() #> [1] 0.5000000 0.3333333 0.6000000 example_gt %>% mutate(het_obs = indiv_het_obs(genotypes)) #> # A gen_tibble: 6 loci #> # A tibble:     5 × 4 #>   id    population  genotypes het_obs #>   <chr> <chr>      <vctr_SNP>   <dbl> #> 1 a     pop1        [1,1,...]   0.667 #> 2 b     pop1        [2,0,...]   0     #> 3 c     pop2        [1,2,...]   0.5   #> 4 d     pop2        [0,2,...]   0.333 #> 5 e     pop2        [1,1,...]   0.6"},{"path":"https://evolecolgroup.github.io/tidypopgen/articles/a01_overview.html","id":"using-verbs-on-loci","dir":"Articles","previous_headings":"","what":"Using verbs on loci","title":"The grammar of population genetics","text":"Since genotypes loci stored compressed list one column, possible use standard dplyr verbs . However, tidypopgen provides number specialised verbs, postfixed _loci, manipulate loci. key operation loci selection (removal). compressed nature genotypes imposes constraints possible grammar. selection, two verbs: select_loci select_loci_if. select_loci understands concise-minilanguage spoken standard dplyr::select allows easily refer variables names. However, select_loci criteria can based actual genotypes (e.g. heterozygosity missingness). , use select_loci_if, can operate genotypes blind names loci. Let us start looking loci names simple dataset: can see two categories loci, one starting “rs” “x”. wanted select loci “rs” code, use: gives us gen_tibble 4 loci, expected. can confirm correct loci : Let us check indeed impacted individual heterozygosity can also subset reorder passing indices: operation helpful merging datasets fully overlap loci (later). limit select_loci can directly summarise genotypes. can separately feed result set indices. example, might want impose minimum minor allele frequency. loci_maf() allows us inspect minimum allele frequencies gen_tibble: can now create vector indices loci minimum allele frequency (MAF) larger 0.2, use select: Note passing variable directly select deprecated, use all_of wrap . select_loci_if allows us avoid creating temporary variable store indices: Note , need tidy evaluate loci_maf within select_loci_if verb, need provide column want use (even though genotypes). Also note , select_loci_if, reorder loci. select_loci_if flexible; example, filter loci MAF greater 0.2 also chromosome 2. can use similar approach select alleles given chromosome: Incidentally, loci_maf() one several functions compute quantities locus; can identified start loci_.","code":"loci_names(example_gt) #> [1] \"rs1\" \"rs2\" \"rs3\" \"rs4\" \"x1\"  \"x2\" example_sub <- example_gt %>% select_loci(starts_with(\"rs\")) example_sub #> # A gen_tibble: 4 loci #> # A tibble:     5 × 3 #>   id    population  genotypes #>   <chr> <chr>      <vctr_SNP> #> 1 a     pop1        [1,1,...] #> 2 b     pop1        [2,0,...] #> 3 c     pop2        [1,2,...] #> 4 d     pop2        [0,2,...] #> 5 e     pop2        [1,1,...] loci_names(example_sub) #> [1] \"rs1\" \"rs2\" \"rs3\" \"rs4\" example_sub %>% indiv_het_obs() #> [1] 0.5000000 0.0000000 0.1666667 0.1666667 0.4000000 example_gt %>%   select_loci(c(2, 6, 1)) %>%   show_loci() #> # A tibble: 3 × 7 #>   big_index name  chromosome position genetic_dist allele_ref allele_alt #>       <int> <chr> <fct>         <dbl>        <dbl> <chr>      <chr>      #> 1         2 rs2   1                 5            0 T          C          #> 2         6 x2    2               456            0 T          A          #> 3         1 rs1   1                 3            0 A          T example_gt %>%   select_loci(c(2, 6, 1)) %>%   show_genotypes() #>      [,1] [,2] [,3] #> [1,]    1    0    1 #> [2,]    0    0    2 #> [3,]    2    1    1 #> [4,]    2    1    0 #> [5,]    1    0    1 example_gt %>% loci_maf() #> [1] 0.500 0.400 0.000 0.400 0.375 0.200 sel_indices <- which((example_gt %>% loci_maf()) > 0.2) example_gt %>%   select_loci(all_of(sel_indices)) %>%   show_loci() #> # A tibble: 4 × 7 #>   big_index name  chromosome position genetic_dist allele_ref allele_alt #>       <int> <chr> <fct>         <dbl>        <dbl> <chr>      <chr>      #> 1         1 rs1   1                 3            0 A          T          #> 2         2 rs2   1                 5            0 T          C          #> 3         4 rs4   1               343            0 G          C          #> 4         5 x1    2                23            0 C          G example_gt_sub <- example_gt %>% select_loci_if(loci_maf(genotypes) > 0.2) example_gt_sub %>% show_genotypes() #>      [,1] [,2] [,3] [,4] #> [1,]    1    1    1    1 #> [2,]    2    0    0   NA #> [3,]    1    2    0    1 #> [4,]    0    2    1    2 #> [5,]    1    1    2    1 example_gt %>%   select_loci_if(     loci_chromosomes(genotypes) == 2 &       loci_maf(genotypes) > 0.2   ) %>%   show_loci() #> # A tibble: 1 × 7 #>   big_index name  chromosome position genetic_dist allele_ref allele_alt #>       <int> <chr> <fct>         <dbl>        <dbl> <chr>      <chr>      #> 1         5 x1    2                23            0 C          G"},{"path":"https://evolecolgroup.github.io/tidypopgen/articles/a01_overview.html","id":"grouping-individuals-in-populations","dir":"Articles","previous_headings":"","what":"Grouping individuals in populations","title":"The grammar of population genetics","text":"population genetics, generally interested computing quantities describe groups individuals (.e. populations). Grouping can used number ways. starting point, can group population get pop sizes: functions return one result per individual (indiv_het_obs used ), can use summarise, returns new tibble one line per population. example, can count number individuals per population, well mean heterozygosity : However, note somewhat inefficient, computing pop averages requires multiple access data. efficient approach : way, compute individual heterozygosities one go (optimising file access time), generate population summaries. working loci, can use reframe apply functions across groups. use reframe correctly, sure select genotype column within loci verbs: functions, loci_maf(), also method grouped tibbles allows even easier syntax: methods coded C++ efficient, preferred reframe() option. default, outputs return tidy tibble, one row per locus per population (.e. get reframe()). However, using type argument, also possible return list: matrix: Certain metrics analyses naturally defined grouped tibble refer populations, population-specific Fst. example: type functions prefixed pop.","code":"example_gt %>%   group_by(population) %>%   tally() #> # A tibble: 2 × 2 #>   population     n #>   <chr>      <int> #> 1 pop1           2 #> 2 pop2           3 example_gt %>%   group_by(population) %>%   summarise(n = n(), mean_het = mean(indiv_het_obs(genotypes))) #> # A tibble: 2 × 3 #>   population     n mean_het #>   <chr>      <int>    <dbl> #> 1 pop1           2    0.333 #> 2 pop2           3    0.478 example_gt %>%   mutate(het_obs = indiv_het_obs(genotypes)) %>%   group_by(population) %>%   summarise(n = n(), mean_het = mean(het_obs)) #> # A tibble: 2 × 3 #>   population     n mean_het #>   <chr>      <int>    <dbl> #> 1 pop1           2    0.333 #> 2 pop2           3    0.478 example_gt %>%   group_by(population) %>%   reframe(loci_hwe = loci_hwe(genotypes)) #> # A tibble: 12 × 2 #>    population loci_hwe #>    <chr>         <dbl> #>  1 pop1            0.5 #>  2 pop1            0.5 #>  3 pop1            0.5 #>  4 pop1            0.5 #>  5 pop1            0.5 #>  6 pop1            0.5 #>  7 pop2            0.6 #>  8 pop2            0.5 #>  9 pop2            0.5 #> 10 pop2            0.7 #> 11 pop2            0.6 #> 12 pop2            0.6 example_gt %>%   group_by(population) %>%   loci_maf() #> # A tibble: 12 × 3 #>    loci  group value #>    <chr> <chr> <dbl> #>  1 rs1   pop1  0.25  #>  2 rs1   pop2  0.333 #>  3 rs2   pop1  0.25  #>  4 rs2   pop2  0.167 #>  5 rs3   pop1  0     #>  6 rs3   pop2  0     #>  7 rs4   pop1  0.25  #>  8 rs4   pop2  0.5   #>  9 x1    pop1  0.5   #> 10 x1    pop2  0.333 #> 11 x2    pop1  0     #> 12 x2    pop2  0.333 example_gt %>%   group_by(population) %>%   loci_maf(type = \"list\") #> [[1]] #> [1] 0.25 0.25 0.00 0.25 0.50 0.00 #>  #> [[2]] #> [1] 0.3333333 0.1666667 0.0000000 0.5000000 0.3333333 0.3333333 example_gt %>%   group_by(population) %>%   loci_maf(type = \"matrix\") #>     pop1      pop2 #> rs1 0.25 0.3333333 #> rs2 0.25 0.1666667 #> rs3 0.00 0.0000000 #> rs4 0.25 0.5000000 #> x1  0.50 0.3333333 #> x2  0.00 0.3333333 example_gt %>%   group_by(population) %>%   pop_fst() #>        pop1        pop2  #>  0.34146341 -0.04878049"},{"path":"https://evolecolgroup.github.io/tidypopgen/articles/a01_overview.html","id":"functions-applies-to-all-pairwise-and-nwise-combinations-of-individuals-or-populations","dir":"Articles","previous_headings":"","what":"Functions applies to all pairwise and nwise combinations of individuals or populations","title":"The grammar of population genetics","text":"final group verbs prefixed pairwise_ nwise_, designed compute pairwise statistics pairs combinations n individuals populations (targeting populations, start pairwise_pop_ nwise_pop_). example, get Identity State pairs individuals, use:","code":"example_gt %>%   pairwise_ibs() #> # A tibble: 10 × 3 #>    item1 item2 value #>    <chr> <chr> <dbl> #>  1 a     b     0.7   #>  2 a     c     0.75  #>  3 a     d     0.667 #>  4 a     e     0.9   #>  5 b     c     0.6   #>  6 b     d     0.4   #>  7 b     e     0.5   #>  8 c     d     0.75  #>  9 c     e     0.6   #> 10 d     e     0.5"},{"path":"https://evolecolgroup.github.io/tidypopgen/articles/a01_overview.html","id":"saving-and-reading-data","dir":"Articles","previous_headings":"","what":"Saving and reading data","title":"The grammar of population genetics","text":"can save gen_tibble gt_save(). command save file extension .gt. Together .rds .bk files, .gt file include information stored gen_tibble. Note , whilst .rds .bk file share name, .gt file can named differently (, default, specific name given, gt_save use pattern .rds .bk file). , let us save file: ever need retrieve location .bk .rds files gen_tibble, can use: later session, reload data : can see genotypes recovered correctly. saw beginning vignette, possible create gen_tibble data data.frames tibbles. can use function wrangle small datasets custom formats, commonly SNP data stored PLINK bed files VCF files. gen_tibble can directly read types files (including gzipped vcf files), just need provide path file first argument gen_tibble; example, want read PLINK bed file, can simply use: vignette, don’t want keep files, using temporary path backing files, normal instances, can simply omit backingfile parameter, .rds .bk file saved name path original .bed file. can also export data various formats family functions gt_as_*(). functions, gt_as_hierfstat(), gt_as_genind() gt_as_genlight() return object appropriate type; functions, gt_as_plink() gt_as_geno_lea() write file appropriate format, return name file completion. example, export PLINK .bed file, simply use: also write .bim .fam file save together .bed file. Note , main tibble, id, population sex preserved .fam file. also possible write .ped .raw files specifying type=\"ped\" type=\"raw\" gt_as_plink() (see help page gt_as_plink() details).","code":"gt_file_name <- gt_save(example_gt) #>  #> gen_tibble saved to /tmp/RtmpjgVNl5/file2bd5512f03ae.gt #> using FBM RDS: /tmp/RtmpjgVNl5/file2bd5512f03ae.rds #> with FBM backing file: /tmp/RtmpjgVNl5/file2bd5512f03ae.bk #> make sure that you do NOT delete those files! #> to reload the gen_tibble in another session, use: #> gt_load('/tmp/RtmpjgVNl5/file2bd5512f03ae.gt') gt_file_name #> [1] \"/tmp/RtmpjgVNl5/file2bd5512f03ae.gt\"  #> [2] \"/tmp/RtmpjgVNl5/file2bd5512f03ae.rds\" #> [3] \"/tmp/RtmpjgVNl5/file2bd5512f03ae.bk\" gt_get_file_names(example_gt) #> [1] \"/tmp/RtmpjgVNl5/file2bd5512f03ae.rds\" #> [2] \"/tmp/RtmpjgVNl5/file2bd5512f03ae.bk\" new_example_gt <- gt_load(gt_file_name[1]) new_example_gt %>% show_genotypes() #>      [,1] [,2] [,3] [,4] [,5] [,6] #> [1,]    1    1    0    1    1    0 #> [2,]    2    0    0    0   NA    0 #> [3,]    1    2    0    0    1    1 #> [4,]    0    2    0    1    2    1 #> [5,]    1    1   NA    2    1    0 bed_path_pop_a <- system.file(\"extdata/pop_a.bed\", package = \"tidypopgen\") pop_a_gt <- gen_tibble(bed_path_pop_a, backingfile = tempfile(\"pop_a_\")) #>  #> gen_tibble saved to /tmp/RtmpjgVNl5/pop_a_2bd52b9de3fc.gt #> using FBM RDS: /tmp/RtmpjgVNl5/pop_a_2bd52b9de3fc.rds #> with FBM backing file: /tmp/RtmpjgVNl5/pop_a_2bd52b9de3fc.bk #> make sure that you do NOT delete those files! #> to reload the gen_tibble in another session, use: #> gt_load('/tmp/RtmpjgVNl5/pop_a_2bd52b9de3fc.gt') gt_as_plink(example_gt, file = tempfile(\"new_bed_\")) #> [1] \"/tmp/RtmpjgVNl5/new_bed_2bd57c89a082.bed\""},{"path":"https://evolecolgroup.github.io/tidypopgen/articles/a01_overview.html","id":"merging-data","dir":"Articles","previous_headings":"","what":"Merging data","title":"The grammar of population genetics","text":"Merging data different sources common problem, especially human population genetics wealth SNP chips available. tidypopgen, merging enacted rbind operation gen_tibbles. datasets loci, merge trivial. , necessary subset loci, ensure data coded reference alternate alleles (swap needed). Additionally, data come SNP chips, added complication strand always consistent, might also necessary flip strand (case, ambiguous SNPs filtered). rbind method gen_tibbles number parameters allow us control behaviour merge. Let us start bringing two sample datasets (note use tempfiles store data; real applications, usually avoid defining backingfile let function create backing files bed file stored): inspect : one: using small datasets, real life, rbind operations demanding. performing operation, can run rbind_dry_run: Note , default, rbind flip strand remove ambiguous SNPs (relevant merging different SNP chips), need set flip_strand TRUE. report object contains details locus either kept removed, usually report sufficient make decisions whether want go ahead. happy likely outcome, can proceed rbind. Note data saved disk. can either provide path prefix, ‘.RDS’ ‘.bk’ appended R object associated File-Backed Matrix; let function save files path original backing file first object). NOTE: vignette, save temporary directory, real life want save directory able retrieve file later date!!! Let’s check resulting gen_tibble: can look subsetted loci (note used first population reference determine strand order alleles): Note big_index values changed compared original files, generated new FBM merged data. default, rbind using loci names match two datasets. option ‘use_position = TRUE’ forces matching chromosome position; note common source problems merging coding chromosomes (e.g. dataset ‘chromosome1’ ‘chr1’). using ‘use_position = TRUE’, also make sure two datasets aligned reference genome assembly.","code":"bed_path_pop_a <- system.file(\"extdata/pop_a.bed\", package = \"tidypopgen\") pop_a_gt <- gen_tibble(bed_path_pop_a, backingfile = tempfile(\"pop_a_\")) #>  #> gen_tibble saved to /tmp/RtmpjgVNl5/pop_a_2bd5370c3ddc.gt #> using FBM RDS: /tmp/RtmpjgVNl5/pop_a_2bd5370c3ddc.rds #> with FBM backing file: /tmp/RtmpjgVNl5/pop_a_2bd5370c3ddc.bk #> make sure that you do NOT delete those files! #> to reload the gen_tibble in another session, use: #> gt_load('/tmp/RtmpjgVNl5/pop_a_2bd5370c3ddc.gt') bed_path_pop_b <- system.file(\"extdata/pop_b.bed\", package = \"tidypopgen\") pop_b_gt <- gen_tibble(bed_path_pop_b, backingfile = tempfile(\"pop_b_\")) #>  #> gen_tibble saved to /tmp/RtmpjgVNl5/pop_b_2bd5629eeffc.gt #> using FBM RDS: /tmp/RtmpjgVNl5/pop_b_2bd5629eeffc.rds #> with FBM backing file: /tmp/RtmpjgVNl5/pop_b_2bd5629eeffc.bk #> make sure that you do NOT delete those files! #> to reload the gen_tibble in another session, use: #> gt_load('/tmp/RtmpjgVNl5/pop_b_2bd5629eeffc.gt') pop_a_gt #> # A gen_tibble: 16 loci #> # A tibble:     5 × 4 #>   id    population sex    genotypes #>   <chr> <chr>      <fct> <vctr_SNP> #> 1 GRC24 pop_a      male   [0,0,...] #> 2 GRC25 pop_a      male   [0,0,...] #> 3 GRC26 pop_a      male   [0,1,...] #> 4 GRC27 pop_a      male   [0,0,...] #> 5 GRC28 pop_a      male   [0,0,...] pop_b_gt #> # A gen_tibble: 17 loci #> # A tibble:     3 × 4 #>   id     population sex     genotypes #>   <chr>  <chr>      <fct>  <vctr_SNP> #> 1 SL088  pop_b      female  [0,0,...] #> 2 SL1329 pop_b      female  [1,1,...] #> 3 SL1108 pop_b      male    [0,1,...] report <- rbind_dry_run(pop_a_gt, pop_b_gt, flip_strand = TRUE) #> harmonising loci between two datasets #> flip_strand =  TRUE  ; remove_ambiguous =  TRUE  #> ----------------------------- #> dataset: reference  #> number of SNPs: 16 reduced to 12  #> ( 2 are ambiguous, of which 2  were removed) #> ----------------------------- #> dataset: target  #> number of SNPs: 17 reduced to 12  #> ( 5 were flipped to match the reference set) #> ( 2 are ambiguous, of which 2 were removed) # #create merge merged_gt <- rbind(pop_a_gt, pop_b_gt,   flip_strand = TRUE,   backingfile = file.path(tempdir(), \"gt_merged\") ) #> harmonising loci between two datasets #> flip_strand =  TRUE  ; remove_ambiguous =  TRUE  #> ----------------------------- #> dataset: reference  #> number of SNPs: 16 reduced to 12  #> ( 2 are ambiguous, of which 2  were removed) #> ----------------------------- #> dataset: target  #> number of SNPs: 17 reduced to 12  #> ( 5 were flipped to match the reference set) #> ( 2 are ambiguous, of which 2 were removed) #>  #> gen_tibble saved to /tmp/RtmpjgVNl5/gt_merged.gt #> using FBM RDS: /tmp/RtmpjgVNl5/gt_merged.rds #> with FBM backing file: /tmp/RtmpjgVNl5/gt_merged.bk #> make sure that you do NOT delete those files! #> to reload the gen_tibble in another session, use: #> gt_load('/tmp/RtmpjgVNl5/gt_merged.gt') merged_gt #> # A gen_tibble: 12 loci #> # A tibble:     8 × 4 #>   id     population sex     genotypes #>   <chr>  <chr>      <fct>  <vctr_SNP> #> 1 GRC24  pop_a      male    [0,0,...] #> 2 GRC25  pop_a      male    [0,0,...] #> 3 GRC26  pop_a      male    [1,1,...] #> 4 GRC27  pop_a      male    [0,0,...] #> 5 GRC28  pop_a      male    [0,1,...] #> 6 SL088  pop_b      female  [0,0,...] #> 7 SL1329 pop_b      female  [1,1,...] #> 8 SL1108 pop_b      male    [0,1,...] merged_gt %>% show_loci() #> # A tibble: 12 × 7 #>    big_index name       chromosome  position genetic_dist allele_ref allele_alt #>        <int> <chr>      <fct>          <int>        <dbl> <chr>      <chr>      #>  1         1 rs3094315  1             752566            0 A          G          #>  2         2 rs3131972  1             752721            0 G          A          #>  3         3 rs12124819 1             776546            0 A          G          #>  4         4 rs11240777 1             798959            0 G          A          #>  5         5 rs1110052  1             873558            0 G          T          #>  6         6 rs6657048  1             957640            0 C          T          #>  7         7 rs2488991  1             994391            0 T          G          #>  8         8 rs2862633  2           61974443            0 G          A          #>  9         9 rs28569024 2          139008811            0 T          C          #> 10        10 rs10106770 2          235832763            0 G          A          #> 11        11 rs11942835 3          155913651            0 T          C          #> 12        12 rs5945676  23          51433071            0 T          G"},{"path":"https://evolecolgroup.github.io/tidypopgen/articles/a01_overview.html","id":"imputation","dir":"Articles","previous_headings":"","what":"Imputation","title":"The grammar of population genetics","text":"Many genetic analysis (e.g. PCA) allow missing data. many software implementations, missing genotypes imputed fly, often simplistic manner. tidypopgen, encourage taking step explicitly, running analysis. Let us start dataset missing genotypes: can visualise amount missingness :  attempt run PCA dataset, get: Note using gt_pca_autoSVD small dataset likely cause error, see manual page details. possible obviate problem filtering loci missing data, might lose lot loci. alternative impute missing data. tidypopgen provides wrapper fast imputation available bigsnpr, simple imputation (gt_impute_simple) based frequency alleles locus (random sampling, using mean mode). methods fine impute missing genotypes, used sophisticated imputation (e.g. low coverage genomes). use simple approach fix dataset: can now check dataset indeed imputed: However, note gen_tibble stores raw data imputed data. Even imputation, imputed data used default: indeed, summarise missingness, still get:  can manually force gen_tibble use imputed data:  However, generally needed, can keep gen_tibble set use raw data:  let functions need imputation use automatically: Note , function finished, gen_tibble back using raw genotypes:  details PCA analysis found vignette population genetic analysis.","code":"bed_file <- system.file(\"extdata\", \"example-missing.bed\", package = \"bigsnpr\") missing_gt <- gen_tibble(bed_file, backingfile = tempfile(\"missing_\")) #>  #> gen_tibble saved to /tmp/RtmpjgVNl5/missing_2bd574bc6dc2.gt #> using FBM RDS: /tmp/RtmpjgVNl5/missing_2bd574bc6dc2.rds #> with FBM backing file: /tmp/RtmpjgVNl5/missing_2bd574bc6dc2.bk #> make sure that you do NOT delete those files! #> to reload the gen_tibble in another session, use: #> gt_load('/tmp/RtmpjgVNl5/missing_2bd574bc6dc2.gt') missing_gt #> # A gen_tibble: 500 loci #> # A tibble:     200 × 3 #>    id     population  genotypes #>    <chr>  <chr>      <vctr_SNP> #>  1 ind_1  fam_1       [0,.,...] #>  2 ind_2  fam_2       [0,.,...] #>  3 ind_3  fam_3       [0,0,...] #>  4 ind_4  fam_4       [.,0,...] #>  5 ind_5  fam_5       [0,0,...] #>  6 ind_6  fam_6       [0,0,...] #>  7 ind_7  fam_7       [0,0,...] #>  8 ind_8  fam_8       [0,0,...] #>  9 ind_9  fam_9       [0,0,...] #> 10 ind_10 fam_10      [0,0,...] #> # ℹ 190 more rows missing_gt %>%   loci_missingness() %>%   hist() missing_pca <- missing_gt %>% gt_pca_autoSVD() #> Error: You can't have missing values in 'G'. missing_gt <- gt_impute_simple(missing_gt, method = \"mode\") gt_has_imputed(missing_gt) #> [1] TRUE gt_uses_imputed(missing_gt) #> [1] FALSE missing_gt %>%   loci_missingness() %>%   hist() gt_set_imputed(missing_gt, set = TRUE) missing_gt %>%   loci_missingness() %>%   hist() gt_set_imputed(missing_gt, set = FALSE) missing_gt %>%   loci_missingness() %>%   hist() missing_pca <- missing_gt %>% gt_pca_partialSVD() missing_pca #>  === PCA of gen_tibble object === #> Method: [1] \"partialSVD\" #>  #> Call ($call):gt_pca_partialSVD(x = .) #>  #> Eigenvalues ($d): #>  146.859 106.219 90.352 80.983 69.332 68.427 ... #>  #> Principal component scores ($u): #>  matrix with 200 rows (individuals) and 10 columns (axes)  #>  #> Loadings (Principal axes) ($v): #>  matrix with 500 rows (SNPs) and 10 columns (axes) gt_uses_imputed(missing_gt) #> [1] FALSE missing_gt %>%   loci_missingness() %>%   hist()"},{"path":"https://evolecolgroup.github.io/tidypopgen/articles/a02_qc.html","id":"quality-control-for-snp-datasets","dir":"Articles","previous_headings":"","what":"Quality control for SNP datasets","title":"Quality Control","text":"tidypopgen two key functions examine quality data across loci across individuals: qc_report_loci qc_report_indiv. vignette uses simulated data set illustrate methods data cleaning.","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/articles/a02_qc.html","id":"read-data-into-gen_tibble-format","dir":"Articles","previous_headings":"","what":"Read data into gen_tibble format","title":"Quality Control","text":"#Quality control individuals output qc_report_indiv supplies observed heterozygosity per individual, rate missingness per individual standard. data can also visualised using autoplot:  , red line indicates threshold proportion missing loci, set 5% default, can altered using miss_threshold argument. Similarly, blue lines drawn 2 (inner) 3 (outer) standard deviations mean observed heterozygosity. thresholds can used visualise outliers consider filter datasets. can see individuals low missingness, none default 5% threshold. However, wanted filter individuals remove 4.5% genotypes missing, can use filter. wanted remove outliers particularly high low heterozygosity, can using filter. example, remove observations lie 2 standard deviations mean. Next, can look relatedness within sample. parameter kings_threshold provided qc_report_indiv(), report also calculates KING coefficient relatedness matrix using sample. kings_threshold used provide output largest possible group related individuals third column to_keep. boolean column recommends individuals remove (FALSE) keep (TRUE) achieve unrelated sample. can remove recommended individuals using: can now view summary cleaned data set , showing data reduced 12 8 individuals.","code":"library(tidypopgen) ## Loading required package: dplyr ##  ## Attaching package: 'dplyr' ## The following objects are masked from 'package:stats': ##  ##     filter, lag ## The following objects are masked from 'package:base': ##  ##     intersect, setdiff, setequal, union ## Loading required package: tibble data <- gen_tibble(   system.file(\"extdata/related/families.bed\",     package = \"tidypopgen\"   ),   quiet = TRUE, backingfile = tempfile(),   valid_alleles = c(\"1\", \"2\") ) individual_report <- qc_report_indiv(data) summary(individual_report) ##     het_obs        missingness      ##  Min.   :0.3467   Min.   :0.03018   ##  1st Qu.:0.3736   1st Qu.:0.03642   ##  Median :0.3790   Median :0.03798   ##  Mean   :0.3799   Mean   :0.03867   ##  3rd Qu.:0.3901   3rd Qu.:0.04110   ##  Max.   :0.4015   Max.   :0.04579 autoplot(individual_report) data <- data %>% filter(indiv_missingness(genotypes) < 0.045) nrow(data) ## [1] 10 mean_val <- mean(individual_report$het_obs) sd_val <- stats::sd(individual_report$het_obs)  lower <- mean_val - 2 * (sd_val) upper <- mean_val + 2 * (sd_val)  data <- data %>% filter(indiv_het_obs(genotypes) > lower) data <- data %>% filter(indiv_het_obs(genotypes) < upper) nrow(data) ## [1] 9 individual_report <- qc_report_indiv(data, kings_threshold = 0.177) summary(individual_report) ##     het_obs        missingness       to_keep             id            ##  Min.   :0.3688   Min.   :0.03018   Mode :logical   Length:9           ##  1st Qu.:0.3774   1st Qu.:0.03642   FALSE:1         Class :character   ##  Median :0.3795   Median :0.03746   TRUE :8         Mode  :character   ##  Mean   :0.3851   Mean   :0.03735                                      ##  3rd Qu.:0.3985   3rd Qu.:0.04058                                      ##  Max.   :0.4015   Max.   :0.04266 data <- data %>%   filter(id %in% individual_report$id & individual_report$to_keep == TRUE) summary(data) ##       id             genotypes         ##  Length:8           Length:8           ##  Class :character   Class :character   ##  Mode  :character   Mode  :character"},{"path":"https://evolecolgroup.github.io/tidypopgen/articles/a02_qc.html","id":"quality-control-for-loci","dir":"Articles","previous_headings":"","what":"Quality control for loci","title":"Quality Control","text":"output qc_report_loci supplies minor allele frequency, rate missingness, Hardy-Weinberg exact p-value SNP. data can visualised autoplot :  Using ‘overview’ provides Upset plot, designed show intersection different sets way Venn diagram. SNPs can divided ‘sets’ pass predefined quality control threshold; set SNPs missingness given threshold, set SNPs MAF given threshold, set SNPs Hardy-Weinberg exact p-value falls given significance level. thresholds parameter, (percentage missingness accepted, minor allele frequency cutoff, Hardy-Weinberg equilibrium p-value) can adjusted using parameters provided autoplot. example:  upset plot visualises 961 SNPs within respective sets. number second bar indicates 262 SNPs occur 3 sets, meaning 262 SNPs pass QC thresholds. combined total first second bars represents number SNPs pass MAF HWE thresholds, 939 SNPs. examine QC measure detail, can plot different summary panel.  can begin consider quality control raw data set. Let’s start filtering SNPs according minor allele frequency. can visualise MAF distribution using:  can see monomorphic SNPs data set. Let’s filter loci minor allele frequency lower 2%, using select_loci_if. , select SNPs MAF greater 2%. operation equivalent plink –maf 0.02. Following , can remove SNPs high rate missingness. Lets say want remove SNPs missing 5% individuals, equivalent using plink –geno 0.05  can see SNPs low missingness, 5% threshold, , however, missingness threshold. remove SNPs, can use select_loci_if. Finally, may want remove SNPs show significant deviation Hardy-Weinberg equilibrium, study design requires. visualise SNPs significant p-values Hardy-Weinberg exact test, can call autoplot:  None SNPs data significant, however may circumstances want cut extreme cases, data real, cases indicate genotyping errors.","code":"loci_report <- qc_report_loci(data) ## This gen_tibble is not grouped. For Hardy-Weinberg equilibrium, `qc_report_loci()` will assume individuals are part of the same population and HWE test p-values will be calculated across all individuals. If you wish to calculate HWE p-values within populations or groups, please use`group_by()` before calling `qc_report_loci()`. summary(loci_report) ##     snp_id               maf          missingness          hwe_p         ##  Length:961         Min.   :0.0000   Min.   :0.00000   Min.   :0.00272   ##  Class :character   1st Qu.:0.1667   1st Qu.:0.00000   1st Qu.:0.32867   ##  Mode  :character   Median :0.2500   Median :0.00000   Median :0.53333   ##                     Mean   :0.2661   Mean   :0.03733   Mean   :0.50321   ##                     3rd Qu.:0.3750   3rd Qu.:0.12500   3rd Qu.:0.69231   ##                     Max.   :0.5000   Max.   :0.37500   Max.   :0.76503 autoplot(loci_report, type = \"overview\") ## Warning: `aes_string()` was deprecated in ggplot2 3.0.0. ## ℹ Please use tidy evaluation idioms with `aes()`. ## ℹ See also `vignette(\"ggplot2-in-packages\")` for more information. ## ℹ The deprecated feature was likely used in the UpSetR package. ##   Please report the issue to the authors. ## This warning is displayed once every 8 hours. ## Call `lifecycle::last_lifecycle_warnings()` to see where this warning was ## generated. ## Warning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0. ## ℹ Please use `linewidth` instead. ## ℹ The deprecated feature was likely used in the UpSetR package. ##   Please report the issue to the authors. ## This warning is displayed once every 8 hours. ## Call `lifecycle::last_lifecycle_warnings()` to see where this warning was ## generated. ## Warning: The `size` argument of `element_line()` is deprecated as of ggplot2 3.4.0. ## ℹ Please use the `linewidth` argument instead. ## ℹ The deprecated feature was likely used in the UpSetR package. ##   Please report the issue to the authors. ## This warning is displayed once every 8 hours. ## Call `lifecycle::last_lifecycle_warnings()` to see where this warning was ## generated. autoplot(loci_report,   type = \"overview\",   miss_threshold = 0.03,   maf_threshold = 0.02,   hwe_p = 0.01 ) autoplot(loci_report,   type = \"all\",   miss_threshold = 0.03,   maf_threshold = 0.02,   hwe_p = 0.01 ) autoplot(loci_report, type = \"maf\") data <- data %>% select_loci_if(loci_maf(genotypes) > 0.02) count_loci(data) ## [1] 931 autoplot(loci_report, type = \"missing\", miss_threshold = 0.05) data <- data %>% select_loci_if(loci_missingness(genotypes) < 0.05) count_loci(data) ## [1] 698 autoplot(loci_report, type = \"significant hwe\", hwe_p = 0.01) data <- data %>% select_loci_if(loci_hwe(genotypes) > 0.01) count_loci(data) ## [1] 697"},{"path":"https://evolecolgroup.github.io/tidypopgen/articles/a02_qc.html","id":"linkage-disequilibrium","dir":"Articles","previous_headings":"","what":"Linkage Disequilibrium","title":"Quality Control","text":"analyses, may necessary control linkage data set. tidypopgen provides LD clumping. option similar –indep-pairwise flag plink, results even distribution loci compared LD pruning. explore clumping preferable pruning, see https://privefl.github.io/bigsnpr/articles/pruning-vs-clumping.html LD clumping requires data set missingness. means need create imputed data set LD pruning, can quickly gt_impute_simple. removed individuals filtering, first need update backingfiles : can impute using: example, want remove SNPs correlation greater 0.2 windows 10 SNPs time, can set parameters thr_r2 size respectively. loci_ld_clump provides boolean vector length list SNPs, telling us keep data set. can use list create pruned version data:","code":"data <- gt_update_backingfile(data) ## Genetic distances are not sorted, setting them to zero ##  ## gen_backing files updated, now ## using FBM RDS: /tmp/Rtmp4QpAQP/file2c1d5929574c_v2.rds ## with FBM backing file: /tmp/Rtmp4QpAQP/file2c1d5929574c_v2.bk ## make sure that you do NOT delete those files! imputed_data <- gt_impute_simple(data, method = \"random\") to_keep_ld <- loci_ld_clump(imputed_data, thr_r2 = 0.2, size = 10) head(to_keep_ld) ## [1] FALSE FALSE FALSE FALSE FALSE FALSE ld_data <- imputed_data %>%   select_loci_if(loci_ld_clump(genotypes, thr_r2 = 0.2, size = 10))"},{"path":"https://evolecolgroup.github.io/tidypopgen/articles/a02_qc.html","id":"save","dir":"Articles","previous_headings":"","what":"Save","title":"Quality Control","text":"benefit operating gen_tibble quality control step can observed visually, easily reversed necessary. happy quality data, can create save final quality controlled version gen_tibble using gt_save.","code":"gt_save(ld_data, file_name = tempfile()) ##  ## gen_tibble saved to /tmp/Rtmp4QpAQP/file2c1d59855e12.gt ## using FBM RDS: /tmp/Rtmp4QpAQP/file2c1d5929574c_v2.rds ## with FBM backing file: /tmp/Rtmp4QpAQP/file2c1d5929574c_v2.bk ## make sure that you do NOT delete those files! ## to reload the gen_tibble in another session, use: ## gt_load('/tmp/Rtmp4QpAQP/file2c1d59855e12.gt') ## [1] \"/tmp/Rtmp4QpAQP/file2c1d59855e12.gt\"     ## [2] \"/tmp/Rtmp4QpAQP/file2c1d5929574c_v2.rds\" ## [3] \"/tmp/Rtmp4QpAQP/file2c1d5929574c_v2.bk\""},{"path":"https://evolecolgroup.github.io/tidypopgen/articles/a02_qc.html","id":"grouping-data","dir":"Articles","previous_headings":"","what":"Grouping data","title":"Quality Control","text":"quality control measures, gen_tibble includes multiple datasets may want group population running quality control. can done using group_by. First, lets add imaginary population data gen_tibble: can group population run quality control group: loci report receive calculate Hardy-Weinberg equilibrium SNP within population separately, providing Bonferroni corrected p-value SNP. Similarly, can run quality control report individuals within population: important related individuals, background population structure can affect filtering relatives.","code":"data <- data %>% mutate(population = c(rep(\"A\", 4), rep(\"B\", 4))) grouped_loci_report <- data %>%   group_by(population) %>%   qc_report_loci() head(grouped_loci_report) ## # A tibble: 6 × 4 ##   snp_id   maf missingness hwe_p ##   <chr>  <dbl>       <dbl> <dbl> ## 1 2      0.438           0 0.429 ## 2 3      0.188           0 1     ## 3 5      0.25            0 1     ## 4 7      0.312           0 0.429 ## 5 8      0.312           0 1.14  ## 6 10     0.438           0 0.429 grouped_individual_report <- data %>%   group_by(population) %>%   qc_report_indiv(kings_threshold = 0.177) head(grouped_individual_report) ## # A tibble: 6 × 5 ##   het_obs missingness id    group to_keep ##     <dbl>       <dbl> <chr> <chr> <lgl>   ## 1   0.382           0 1     A     TRUE    ## 2   0.377           0 4     A     TRUE    ## 3   0.393           0 5     A     TRUE    ## 4   0.382           0 6     A     TRUE    ## 5   0.403           0 7     B     TRUE    ## 6   0.382           0 8     B     TRUE"},{"path":"https://evolecolgroup.github.io/tidypopgen/articles/a02_qc.html","id":"grouped-functions","dir":"Articles","previous_headings":"","what":"Grouped functions","title":"Quality Control","text":"also possible run loci indiv functions grouped data. useful want run quality control group data, don’t want split data separate gen_tibbles. Grouped functions built efficiency surpass use applying function group_map.","code":"loci_maf_grouped <- data %>%   group_by(population) %>%   loci_maf()"},{"path":"https://evolecolgroup.github.io/tidypopgen/articles/a03_example_clustering_and_dapc.html","id":"an-example-workflow-with-real-data","dir":"Articles","previous_headings":"","what":"An example workflow with real data","title":"Population genetic analysis with tidypopgen","text":"explore genetic structure Anolis punctatus South America, using data Prates et al 2018. downloaded vcf file genotypes “https://github.com/ivanprates/2018_Anolis_EcolEvol/blob/master/data/VCFtools_SNMF_punctatus_t70_s10_n46/punctatus_t70_s10_n46_filtered.recode.vcf?raw=true” compressed vcf.gz file. read data compressed vcf : Now let’s inspect gen_tibble: can see 46 individuals, 3249 loci. Note don’t information population vcf. information can found another csv file. add population information manually. Let’s start reading file: can now attempt join tables. recommend using left_join , rather cbind bind_cols, latter functions assume two tables order. case, want bring wrong data due mismatched ordering. Let us check successful:","code":"library(tidypopgen) #> Loading required package: dplyr #>  #> Attaching package: 'dplyr' #> The following objects are masked from 'package:stats': #>  #>     filter, lag #> The following objects are masked from 'package:base': #>  #>     intersect, setdiff, setequal, union #> Loading required package: tibble vcf_path <-   system.file(\"/extdata/anolis/punctatus_t70_s10_n46_filtered.recode.vcf.gz\",     package = \"tidypopgen\"   ) anole_gt <-   gen_tibble(vcf_path, quiet = TRUE, backingfile = tempfile(\"anolis_\")) anole_gt #> # A gen_tibble: 3249 loci #> # A tibble:     46 × 2 #>    id                 genotypes #>    <chr>             <vctr_SNP> #>  1 punc_BM288         [0,0,...] #>  2 punc_GN71          [2,0,...] #>  3 punc_H1907         [0,2,...] #>  4 punc_H1911         [0,2,...] #>  5 punc_H2546         [0,1,...] #>  6 punc_IBSPCRIB0361  [0,0,...] #>  7 punc_ICST764       [0,0,...] #>  8 punc_JFT459        [0,0,...] #>  9 punc_JFT773        [0,0,...] #> 10 punc_LG1299        [0,0,...] #> # ℹ 36 more rows pops_path <- system.file(\"/extdata/anolis/punctatus_n46_meta.csv\",   package = \"tidypopgen\" ) pops <- read.csv(pops_path) pops #>                   id       population longitude latitude pop #> 1         punc_BM288 Amazonian_Forest  -51.8448  -3.3228 Eam #> 2          punc_GN71 Amazonian_Forest  -54.6064  -9.7307 Eam #> 3         punc_H1907 Amazonian_Forest  -64.8247  -9.4459 Wam #> 4         punc_H1911 Amazonian_Forest  -64.8203  -9.4358 Wam #> 5         punc_H2546 Amazonian_Forest  -65.3576  -9.5979 Wam #> 6  punc_IBSPCRIB0361  Atlantic_Forest  -46.0247 -23.7564  AF #> 7       punc_ICST764  Atlantic_Forest  -36.2838  -9.8092  AF #> 8        punc_JFT459  Atlantic_Forest  -40.5219 -20.2811  AF #> 9        punc_JFT773  Atlantic_Forest  -40.5200 -19.9600  AF #> 10       punc_LG1299  Atlantic_Forest  -39.0694 -15.2696  AF #> 11  punc_LSUMZH12577 Amazonian_Forest  -75.8069  -0.2172 Wam #> 12  punc_LSUMZH12751 Amazonian_Forest  -75.8069  -0.2172 Wam #> 13  punc_LSUMZH13910 Amazonian_Forest  -72.7677  -8.2509 Eam #> 14  punc_LSUMZH14100 Amazonian_Forest  -65.7161  -8.3464 Wam #> 15  punc_LSUMZH14336 Amazonian_Forest  -54.8416  -3.1354 Eam #> 16  punc_LSUMZH15476 Amazonian_Forest  -64.5500 -10.3167 Wam #> 17    punc_MPEG20846 Amazonian_Forest  -56.1842  -2.6096 Eam #> 18    punc_MPEG21348 Amazonian_Forest  -64.3915 -11.6996 Wam #> 19    punc_MPEG22415 Amazonian_Forest  -48.2948  -1.2169 Eam #> 20    punc_MPEG24758 Amazonian_Forest  -56.3706  -1.7731 Eam #> 21    punc_MPEG26102 Amazonian_Forest  -51.6418  -1.9969 Eam #> 22    punc_MPEG28489 Amazonian_Forest  -56.2256  -2.5475 Eam #> 23    punc_MPEG29314 Amazonian_Forest  -59.0495  -2.9096 Eam #> 24    punc_MPEG29943 Amazonian_Forest  -55.6771  -4.1144 Eam #> 25     punc_MTR05978  Atlantic_Forest  -39.5233 -15.1547  AF #> 26     punc_MTR12338  Atlantic_Forest  -40.0804 -19.4483  AF #> 27     punc_MTR12511  Atlantic_Forest  -39.8942 -19.0564  AF #> 28     punc_MTR15267  Atlantic_Forest  -42.6216 -22.4354  AF #> 29     punc_MTR17744  Atlantic_Forest  -42.5333 -19.6411  AF #> 30     punc_MTR18550 Amazonian_Forest  -61.8135  -4.3074 Wam #> 31     punc_MTR20798 Amazonian_Forest  -61.1451   4.4621 Eam #> 32     punc_MTR21474 Amazonian_Forest  -59.9494  -2.9979 Eam #> 33     punc_MTR21545  Atlantic_Forest  -40.1473 -19.0556  AF #> 34     punc_MTR25584 Amazonian_Forest  -63.6281 -10.7868 Wam #> 35     punc_MTR28048 Amazonian_Forest  -73.6575  -7.4424 Eam #> 36     punc_MTR28401 Amazonian_Forest  -73.7214  -7.5016 Eam #> 37     punc_MTR28593 Amazonian_Forest  -67.6063 -10.0679 Eam #> 38     punc_MTR34227  Atlantic_Forest  -39.6611 -15.8958  AF #> 39     punc_MTR34414  Atlantic_Forest  -39.0700 -16.4420  AF #> 40    punc_MTR976723 Amazonian_Forest  -53.2564 -13.1833 Eam #> 41    punc_MTR978312 Amazonian_Forest  -51.2000  -9.9000 Eam #> 42     punc_MTRX1468  Atlantic_Forest  -41.7192 -20.9031  AF #> 43     punc_MTRX1478  Atlantic_Forest  -43.2547 -22.9712  AF #> 44    punc_MUFAL9635  Atlantic_Forest  -35.7099  -9.5073  AF #> 45       punc_PJD409 Amazonian_Forest  -57.3956  -5.8174 Wam #> 46   punc_UNIBAN1670 Amazonian_Forest  -63.2375 -10.2987 Wam anole_gt <- anole_gt %>% left_join(pops, by = \"id\") anole_gt %>% glimpse() #> Rows: 46 #> Columns: 6 #> A tibble: 46 × 6 #> $ id         <chr> \"punc_BM288\", \"punc_GN71\", \"punc_H1907\", \"punc_H1911\", \"pun… #> $ genotypes  <vctr_SNP> [0,0,...], [2,0,...], [0,2,...], [0,2,...], [0,1,...],… #> $ population <chr> \"Amazonian_Forest\", \"Amazonian_Forest\", \"Amazonian_Forest\",… #> $ longitude  <dbl> -51.8448, -54.6064, -64.8247, -64.8203, -65.3576, -46.0247,… #> $ latitude   <dbl> -3.3228, -9.7307, -9.4459, -9.4358, -9.5979, -23.7564, -9.8… #> $ pop        <chr> \"Eam\", \"Eam\", \"Wam\", \"Wam\", \"Wam\", \"AF\", \"AF\", \"AF\", \"AF\", …"},{"path":"https://evolecolgroup.github.io/tidypopgen/articles/a03_example_clustering_and_dapc.html","id":"map","dir":"Articles","previous_headings":"","what":"Map","title":"Population genetic analysis with tidypopgen","text":"Lets begin visualising samples geographically. latitudes longitudes tibble; can transform sf geometry function gt_add_sf(). done , gen_tibble act sf object, can plotted ggplot2. visualise samples, can create map South America using rnaturalearth package. use ne_countries() function get countries South America. plot map add samples using geom_sf() function ggplot2.  map can see samples coastal Atlantic Forest Amazonian Forest.","code":"anole_gt <- gt_add_sf(anole_gt, c(\"longitude\", \"latitude\")) anole_gt #> Simple feature collection with 46 features and 6 fields #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: -75.8069 ymin: -23.7564 xmax: -35.7099 ymax: 4.4621 #> Geodetic CRS:  WGS 84 #> # A gen_tibble: 3249 loci #> # A tibble:     46 × 7 #>    id    genotypes population longitude latitude pop              geometry #>    <chr> <vctr_SN> <chr>          <dbl>    <dbl> <chr>         <POINT [°]> #>  1 punc… [0,0,...] Amazonian…     -51.8    -3.32 Eam    (-51.8448 -3.3228) #>  2 punc… [2,0,...] Amazonian…     -54.6    -9.73 Eam    (-54.6064 -9.7307) #>  3 punc… [0,2,...] Amazonian…     -64.8    -9.45 Wam    (-64.8247 -9.4459) #>  4 punc… [0,2,...] Amazonian…     -64.8    -9.44 Wam    (-64.8203 -9.4358) #>  5 punc… [0,1,...] Amazonian…     -65.4    -9.60 Wam    (-65.3576 -9.5979) #>  6 punc… [0,0,...] Atlantic_…     -46.0   -23.8  AF    (-46.0247 -23.7564) #>  7 punc… [0,0,...] Atlantic_…     -36.3    -9.81 AF     (-36.2838 -9.8092) #>  8 punc… [0,0,...] Atlantic_…     -40.5   -20.3  AF    (-40.5219 -20.2811) #>  9 punc… [0,0,...] Atlantic_…     -40.5   -20.0  AF        (-40.52 -19.96) #> 10 punc… [0,0,...] Atlantic_…     -39.1   -15.3  AF    (-39.0694 -15.2696) #> # ℹ 36 more rows library(rnaturalearth) library(ggplot2)  map <- ne_countries(   continent = \"South America\",   type = \"map_units\", scale = \"medium\" )  ggplot() +   geom_sf(data = map) +   geom_sf(data = anole_gt$geometry) +   coord_sf(     xlim = c(-85, -30),     ylim = c(-30, 15)   ) +   theme_minimal()"},{"path":"https://evolecolgroup.github.io/tidypopgen/articles/a03_example_clustering_and_dapc.html","id":"pca","dir":"Articles","previous_headings":"","what":"PCA","title":"Population genetic analysis with tidypopgen","text":"easy. loci already filtered cleaned, don’t need QC. Let us jump straight analysis run PCA: OK, jumped quickly. missing data, need first impute : now: Let us look object: print function (implicitly called type name object) gives us information important elements object (names elements stored). can extract elements tidy function, returns tibble can easily used analysis, e.g.: can return information eigenvalues, scores loadings pca. also autoplot method allows visualise elements (type screeplot eigenvalues, type scores scores, loadings loadings:  plot sample principal coordinates space, can simply use:  autoplots deliberately kept simple: just way quickly inspect results. explore additional dimensions, can use k argument:  autoplots generate ggplot2 objects, can embellished usual ggplot2 grammar:  complex/publication ready plots, want add PC scores tibble, can create custom plot ggplot2. can easily add data augment method: now can use ggplot2 directly generate plot:  can see two population separate clearly PCA space, individuals Atlantic Forest clustering closely together Amazonian Forest individuals spread across first two principal components. also possible inspect loci contribute given component:  using information loci table, easily embellish plot, example colouring chromosome maf. complex plots, can augment loci table loadings using augment_loci():","code":"anole_pca <- anole_gt %>% gt_pca_partialSVD(k = 30) #> Error: You can't have missing values in 'X'. anole_gt <- gt_impute_simple(anole_gt, method = \"mode\") anole_pca <- anole_gt %>% gt_pca_partialSVD(k = 30) anole_pca #>  === PCA of gen_tibble object === #> Method: [1] \"partialSVD\" #>  #> Call ($call):gt_pca_partialSVD(x = ., k = 30) #>  #> Eigenvalues ($d): #>  351.891 192.527 113.562 104.427 87.615 83.476 ... #>  #> Principal component scores ($u): #>  matrix with 46 rows (individuals) and 30 columns (axes)  #>  #> Loadings (Principal axes) ($v): #>  matrix with 3249 rows (SNPs) and 30 columns (axes) tidy(anole_pca, matrix = \"eigenvalues\") #> # A tibble: 30 × 4 #>       PC std.dev percent cumulative #>    <int>   <dbl>   <dbl>      <dbl> #>  1     1   52.5    45.9        45.9 #>  2     2   28.7    13.7        59.7 #>  3     3   16.9     4.78       64.5 #>  4     4   15.6     4.05       68.5 #>  5     5   13.1     2.85       71.4 #>  6     6   12.4     2.58       73.9 #>  7     7   10.3     1.79       75.7 #>  8     8   10.0     1.68       77.4 #>  9     9    9.23    1.42       78.8 #> 10    10    8.90    1.32       80.2 #> # ℹ 20 more rows autoplot(anole_pca, type = \"screeplot\") autoplot(anole_pca, type = \"scores\") autoplot(anole_pca, type = \"scores\", k = c(1, 3)) library(ggplot2) autoplot(anole_pca, type = \"scores\") +   aes(color = anole_gt$population) +   labs(color = \"population\") anole_gt <- augment(anole_pca, data = anole_gt) anole_gt %>% ggplot(aes(.fittedPC1, .fittedPC2, color = population)) +   geom_point() +   labs(x = \"PC1\", y = \"PC2\", color = \"Population\") autoplot(anole_pca, type = \"loadings\") anole_gt_load <- augment_loci(anole_pca, data = anole_gt)"},{"path":"https://evolecolgroup.github.io/tidypopgen/articles/a03_example_clustering_and_dapc.html","id":"explore-population-structure-with-dapc","dir":"Articles","previous_headings":"","what":"Explore population structure with DAPC","title":"Population genetic analysis with tidypopgen","text":"DAPC powerful tool investigate population structure. advantage scaling well large datasets. assumptions STRUCTURE ADMIXTURE (also limits power). first step determine number genetic clusters dataset. DAPC can either used test -priori hypothesis, can use data suggest number clusters. case, strong expectations structure study system, let data inform number possible genetic clusters. use k-clustering algorithm applied principal components (allowing us reduce dimensions thousands loci just tens components). need decide many components use; decision often made based plot cumulative explained variance components. Using tidy gt_pca object allows us easily obtain quantities, trivial plot :  Note , working truncated SVD algorithm PCA, can easily phrase eigenvalues terms proportion total variance, cumulative y axis simply shows cumulative sum eigenvalues. Ideally, looking point curve starts flattening. case, can see clear flattening, PC 10 increase explained variance markedly decelerated. can now find clusters based 10 PCs: define k values explore, default 1 5 used (can change setting k parameter change range). choose appropriate k, plot number clusters measure fit. BIC shown good metric many scenarios:  looking minimum value BIC. clear elbow (minimum BIC increases increasing k). However, notice quick levelling decrease BIC 3 clusters. Arguably, sufficient capture main structure. can also use number algorithmic approaches (based original find.clusters() function adegenet) choose best k value plot gt_cluster_pca_best_k(). use defaults (BIC “diffNgroup”, see help page gt_cluster_pca_best_k() description various options): algorithm confirms choice. Note function simply adds element $best_k gt_cluster_pca object: decided wanted explore different value, simply overwrite number anole_clusters$best_k<-5 case, happy option 3 clusters, can run DAPC: Note gt_dapc() takes automatically number clusters anole_clusters object, can change behaviour setting parameters (see help page gt_dapc()). print object, given information important elements object find (saw gt_pca): , elements can obtained tidiers (matrix equal eigenvalues, scores,ld_loadings loci_loadings): can visualised autoplot:  pca, tidy method can used extract information gt_dapc objects. example, want create bar plot eigenvalues (since two), simply use:  can plot scores :  DAPC plot shows separation individuals 3 clusters. can inspect assignment DAPC autoplot using type components, ordering samples original population labels:  can see DAPC splits Amazonian Forest individuals two clusters. clear separation observed plotting LD scores, individual modelled mixture: assignments 100% probability single cluster. Finally, can explore loci biggest impact separating clusters (either drift selection):  strong outlier, suggesting drift across many loci created signal picked DAPC. Note anole_dapc class gt_dapc, subclass dapc adegenet. means functions written work dapc objects work box (exception adegenet::predict.dapc, work underlying pca object different). example, can obtain standard dapc plot :  can also plot results onto map created earlier.  Atlantic forest lizards form distinct geographic cluster, separate Amazonian lizards.","code":"library(ggplot2) tidy(anole_pca, matrix = \"eigenvalues\") %>%   ggplot(mapping = aes(x = PC, y = cumulative)) +   geom_point() anole_clusters <- gt_cluster_pca(anole_pca, n_pca = 10) autoplot(anole_clusters) anole_clusters <- gt_cluster_pca_best_k(anole_clusters) #> Using BIC with criterion diffNgroup: 3 clusters anole_clusters$best_k #> [1] 3 anole_dapc <- gt_dapc(anole_clusters) anole_dapc #>  === DAPC of gen_tibble object === #> Call ($call):gt_dapc(x = anole_clusters) #>  #> Eigenvalues ($eig): #>  727.414 218.045  #>  #> LD scores ($ind.coord): #>  matrix with 46 rows (individuals) and 2 columns (LD axes)  #>  #> Loadings by PC ($loadings): #>  matrix with 2 rows (PC axes) and 2 columns (LD axes)  #>  #> Loadings by locus($var.load): #>  matrix with 3249 rows (loci) and 2 columns (LD axes) tidy(anole_dapc, matrix = \"eigenvalues\") #> # A tibble: 2 × 3 #>      LD eigenvalue cumulative #>   <int>      <dbl>      <dbl> #> 1     1       727.       727. #> 2     2       218.       945. autoplot(anole_dapc, type = \"screeplot\") tidy(anole_dapc, matrix = \"eigenvalues\") %>%   ggplot(aes(x = LD, y = eigenvalue)) +   geom_col() autoplot(anole_dapc, type = \"scores\") autoplot(anole_dapc, type = \"components\", group = anole_gt$population) #> Warning in ggplot2::geom_col(color = \"gray\", size = 0.1): Ignoring #> unknown parameters: `size` autoplot(anole_dapc, \"loadings\") library(adegenet) #> Loading required package: ade4 #>  #>    /// adegenet 2.1.11 is loaded //////////// #>  #>    > overview: '?adegenet' #>    > tutorials/doc/questions: 'adegenetWeb()'  #>    > bug reports/feature requests: adegenetIssues() scatter(anole_dapc, posi.da = \"bottomright\") anole_gt <- anole_gt %>% mutate(dapc = anole_dapc$grp)  ggplot() +   geom_sf(data = map) +   geom_sf(data = anole_gt$geometry, aes(color = anole_gt$dapc)) +   coord_sf(     xlim = c(-85, -30),     ylim = c(-30, 15)   ) +   labs(color = \"DAPC cluster\") +   theme_minimal()"},{"path":"https://evolecolgroup.github.io/tidypopgen/articles/a03_example_clustering_and_dapc.html","id":"clustering-with-admixture","dir":"Articles","previous_headings":"","what":"Clustering with ADMIXTURE","title":"Population genetic analysis with tidypopgen","text":"ADMIXTURE fast clustering algorithm provides results similar STRUCTURE. can run directly tidypopgen using gt_admixture function. output gt_admixture gt_admix object. gt_admix objects designed make visualising data different clustering algorithms swift easy. Lets begin running gt_admixture. can run K clusters k=2 k=6. use just one repeat, ideally run multiple repetitions K: Note within vignette running gt_admixture function, requires ADMIXTURE software installed machine available PATH. Instead, load results previous run ADMIXTURE. prefer native clustering algorithm, recommend using gt_snmf function, wrapper snmf function LEA package. sNMF fast clustering algorithm provides results similar STRUCTURE ADMIXTURE, available directly using tidypopgen package. can examine suitability K values plotting cross-entropy values K value, contained cv element gt_admix object:  can see K = 3 sensible choice, K = 3 represents ‘elbow’ plot, cross-entropy ’s lowest. can quickly plot data autoplot using type barplot selecting chosen value k:  plot fine, messy, helpful visualisation want understand populations structured. re-order plot, grouping individuals population, can use annotate_group arrange_by_group arguments autoplot:  plot much better. Now plot labelled population can see individuals population grouped together, individuals showing mixed ancestry populations. However, visually appealing plot, can re-order individuals within population follows:  Now individuals neatly ordered within population. complex/publication ready plots, can extract specific K value run interested plotting, add .Q matrix gen_tibble object, can create custom plot ggplot2. First extract q_matrix interest using get_q_matrix function: can easily add data augment method: Alternatively, can convert q matrix tidy format, suitable plotting: now can use ggplot2 directly generate custom plot:  Prates et al 2018 data, anolis lizards assigned three regions, described Af, Eam, Wam, acronyms correspond Atlantic Forest, Eastern Amazonia, Western Amazonia Brazil. metadata also contains assignment, column pop. Lets say wanted change grouping variable plot match regions. can use gt_admix_reorder_q function reorder Q matrix different grouping variable: replot data:  can see clear distinction three regions, individuals admixed ancestry.","code":"anole_gt <- anole_gt %>% group_by(population)  anole_adm_original <- gt_admixture(   x = anole_gt,   k = 2:6,   n_runs = 1,   crossval = TRUE,   seed = 1 ) autoplot(anole_adm, type = \"cv\") autoplot(anole_adm,   k = 3, run = 1, data = anole_gt, annotate_group = FALSE,   type = \"barplot\" ) autoplot(anole_adm,   type = \"barplot\", k = 3, run = 1, data = anole_gt,   annotate_group = TRUE, arrange_by_group = TRUE ) autoplot(anole_adm,   type = \"barplot\", k = 3, run = 1,   data = anole_gt, annotate_group = TRUE, arrange_by_group = TRUE,   arrange_by_indiv = TRUE, reorder_within_groups = TRUE ) q_mat <- get_q_matrix(anole_adm, k = 3, run = 1) anole_gt_adm <- augment(q_mat, data = anole_gt) head(anole_gt_adm) #> Simple feature collection with 6 features and 42 fields #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: -65.3576 ymin: -23.7564 xmax: -46.0247 ymax: -3.3228 #> Geodetic CRS:  WGS 84 #> # A tibble: 6 × 43 #> # Groups:   population [2] #>   id     genotypes population longitude latitude pop              geometry #>   <chr>  <vctr_SN> <chr>          <dbl>    <dbl> <chr>         <POINT [°]> #> 1 punc_… [0,0,...] Amazonian…     -51.8    -3.32 Eam    (-51.8448 -3.3228) #> 2 punc_… [2,0,...] Amazonian…     -54.6    -9.73 Eam    (-54.6064 -9.7307) #> 3 punc_… [0,2,...] Amazonian…     -64.8    -9.45 Wam    (-64.8247 -9.4459) #> 4 punc_… [0,2,...] Amazonian…     -64.8    -9.44 Wam    (-64.8203 -9.4358) #> 5 punc_… [0,1,...] Amazonian…     -65.4    -9.60 Wam    (-65.3576 -9.5979) #> 6 punc_… [0,0,...] Atlantic_…     -46.0   -23.8  AF    (-46.0247 -23.7564) #> # ℹ 36 more variables: .rownames <chr>, .fittedPC1 <dbl>, .fittedPC2 <dbl>, #> #   .fittedPC3 <dbl>, .fittedPC4 <dbl>, .fittedPC5 <dbl>, .fittedPC6 <dbl>, #> #   .fittedPC7 <dbl>, .fittedPC8 <dbl>, .fittedPC9 <dbl>, .fittedPC10 <dbl>, #> #   .fittedPC11 <dbl>, .fittedPC12 <dbl>, .fittedPC13 <dbl>, .fittedPC14 <dbl>, #> #   .fittedPC15 <dbl>, .fittedPC16 <dbl>, .fittedPC17 <dbl>, .fittedPC18 <dbl>, #> #   .fittedPC19 <dbl>, .fittedPC20 <dbl>, .fittedPC21 <dbl>, .fittedPC22 <dbl>, #> #   .fittedPC23 <dbl>, .fittedPC24 <dbl>, .fittedPC25 <dbl>, … tidy_q <- tidy(q_mat, anole_gt) head(tidy_q) #> # A tibble: 6 × 4 #>   id         group            q     percentage #>   <chr>      <chr>            <chr>      <dbl> #> 1 punc_BM288 Amazonian_Forest .Q1     0.000019 #> 2 punc_BM288 Amazonian_Forest .Q2     0.00001  #> 3 punc_BM288 Amazonian_Forest .Q3     1.000    #> 4 punc_GN71  Amazonian_Forest .Q1     0.00001  #> 5 punc_GN71  Amazonian_Forest .Q2     0.00001  #> 6 punc_GN71  Amazonian_Forest .Q3     1.000 tidy_q <- tidy_q %>%   dplyr::group_by(id) %>%   dplyr::mutate(dominant_q = max(percentage)) %>%   dplyr::ungroup() %>%   dplyr::arrange(group, dplyr::desc(dominant_q)) %>%   dplyr::mutate(     plot_order = dplyr::row_number(),     id = factor(id, levels = unique(id))   )  plt <- ggplot2::ggplot(tidy_q, ggplot2::aes(x = id, y = percentage, fill = q)) +   ggplot2::geom_col(     width = 1,     position = ggplot2::position_stack(reverse = TRUE)   ) +   ggplot2::labs(     y = \"Population Structure for K = 3\",     title = \"ADMIXTURE algorithm on A. punctatus\"   ) +   theme_distruct() +   scale_fill_distruct()  plt anole_adm <- gt_admix_reorder_q(anole_adm, group = anole_gt$pop) autoplot(anole_adm,   type = \"barplot\", k = 3, run = 1,   annotate_group = TRUE, arrange_by_group = TRUE,   arrange_by_indiv = TRUE, reorder_within_groups = TRUE )"},{"path":"https://evolecolgroup.github.io/tidypopgen/articles/a03_example_clustering_and_dapc.html","id":"handling-q-matrices","dir":"Articles","previous_headings":"","what":"Handling Q matrices","title":"Population genetic analysis with tidypopgen","text":"clustering algorithms operate outside R environment, function q_matrix() can take path directory containing results multiple runs clustering algorithm multiple values K, read .Q files, summarise single q_matrix_list object. analysis , gt_admxiture(), ran 1 repetition K values 2 6. Let us now collate results standard run ADMIXTURE stored files directory: read back R environment using q_matrix_list: q_matrix_list read summarised .Q files analysis, can access single matrix list selecting run number K value interest using get_q_matrix . example, like view second run K = 3: , , can autoplot matrix selecting q_matrix_list object:  way, tidypopgen integrates external clustering software seamlessly quick, easy plotting.","code":"adm_dir <- file.path(tempdir(), \"anolis_adm\") list.files(adm_dir) #> [1] \"K2run1.Q\" \"K3run1.Q\" \"K4run1.Q\" \"K5run1.Q\" \"K6run1.Q\" q_list <- read_q_files(adm_dir) summary(q_list) #> Admixture results for multiple runs:            #> k 2 3 4 5 6 #> n 1 1 1 1 1 #> with slots: #> $Q for Q matrices head(get_q_matrix(q_list, k = 3, run = 1)) #>           .Q1     .Q2      .Q3 #> [1,] 0.000019 0.00001 0.999971 #> [2,] 0.000010 0.00001 0.999980 #> [3,] 0.000010 0.99998 0.000010 #> [4,] 0.000010 0.99998 0.000010 #> [5,] 0.000010 0.99998 0.000010 #> [6,] 0.999980 0.00001 0.000010 autoplot(get_q_matrix(q_list, k = 3, run = 1),   data = anole_gt,   annotate_group = TRUE, arrange_by_group = TRUE,   arrange_by_indiv = TRUE, reorder_within_groups = TRUE )"},{"path":"https://evolecolgroup.github.io/tidypopgen/articles/a99_plink_cheatsheet.html","id":"file-management-and-reading-data","dir":"Articles","previous_headings":"","what":"File management and reading data:","title":"PLINK cheatsheet","text":"PLINK flags –update-alleles, –allele1234, –alleleACGT, alter coding alleles. tidypopgen, valid alleles supplied reading gen_tibble.","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/articles/a99_plink_cheatsheet.html","id":"quality-control","dir":"Articles","previous_headings":"","what":"Quality control:","title":"PLINK cheatsheet","text":"filter variants tidypopgen, similar way PLINK flags –extract –autosome, necessary use gen_tibble select_loci_if(). example: select autosomal loci way –autosome. alternatively: select loci previously defined set way –extract. Similarly, filter individuals, might performed –keep PLINK, requires using filter:","code":"data %>% select_loci_if(loci_chromosomes(genotypes) %in% c(1:22)) #> # A gen_tibble: 15 loci #> # A tibble:     5 × 4 #>   id    population sex    genotypes #>   <chr> <chr>      <fct> <vctr_SNP> #> 1 GRC24 pop_a      male   [0,0,...] #> 2 GRC25 pop_a      male   [0,0,...] #> 3 GRC26 pop_a      male   [0,1,...] #> 4 GRC27 pop_a      male   [0,0,...] #> 5 GRC28 pop_a      male   [0,0,...] my_snps <- c(\"rs4477212\", \"rs3094315\", \"rs3131972\", \"rs12124819\", \"rs11240777\")  data %>%   select_loci_if(loci_names(genotypes) %in% my_snps) %>%   show_loci() #> # A tibble: 5 × 7 #>   big_index name       chromosome position genetic_dist allele_ref allele_alt #>       <int> <chr>      <fct>         <int>        <dbl> <chr>      <chr>      #> 1         1 rs4477212  1             82154            0 A          NA         #> 2         2 rs3094315  1            752566            0 A          G          #> 3         3 rs3131972  1            752721            0 G          A          #> 4         4 rs12124819 1            776546            0 A          NA         #> 5         5 rs11240777 1            798959            0 G          A my_individuals <- c(\"GRC14300079\", \"GRC14300142\", \"GRC14300159\")  data %>% filter(id %in% my_individuals) #> # A gen_tibble: 16 loci #> # A tibble:     0 × 4 #> # ℹ 4 variables: id <chr>, population <chr>, sex <fct>, genotypes <vctr_SNP>"},{"path":"https://evolecolgroup.github.io/tidypopgen/articles/a99_plink_cheatsheet.html","id":"handling-linkage","dir":"Articles","previous_headings":"","what":"Handling linkage","title":"PLINK cheatsheet","text":"Linkage disequilibrium managed clumping tidypopgen loci_ld_clump(). option similar –indep-pairwise flag PLINK, results even distribution loci compared LD pruning. explore clumping preferable pruning, see https://privefl.github.io/bigsnpr/articles/pruning-vs-clumping.html","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/articles/a99_plink_cheatsheet.html","id":"quality-control-for-relatedness-king","dir":"Articles","previous_headings":"","what":"Quality control for relatedness (KING)","title":"PLINK cheatsheet","text":"pairwise_king() implements KING-robust estimator kinship, equivalent –kinship KING. remove related individuals, user can pass kinship matrix pairwise_king() relatedness threshold (numeric KING kinship coefficient) filter_high_relatedness(), return largest possible set individuals relationships threshold. pairwise_king() also forms part qc_report_indiv() parameter kings_threshold. remove related individuals qc_report_indiv(), user can pass either relatedness threshold, string either “first” “second” remove first degree second degree relationships dataset. second option similar using –unrelated –degree 1 –unrelated –degree 2 KING. qc_report_indiv() returns dataframe including columns ‘id’ ‘to_keep’, showing ID individuals logical column whether individual removed retain largest possible set individuals relationships threshold.","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/articles/a99_plink_cheatsheet.html","id":"merging-datasets","dir":"Articles","previous_headings":"","what":"Merging datasets:","title":"PLINK cheatsheet","text":"PLINK, data merging can fail due strand inconsistencies addressed prior merging. PLINK documentation suggests users try ‘trial flip’ data address , ‘unflip’ errors remain. tidypopgen, data merged rbind, strand inconsistencies identified automatically flipped, avoiding multiple rounds flipping merging. PLINK allow users identify inconsistencies prior merging –flip-scan, functionality included tidypopgen rbind_dry_run(). rbind_dry_run() reports numeric overlap datasets, alongside number SNPs ‘flip’ new target dataset, well number ambiguous SNPs. Data merged one set time, equivalent –merge-list.","code":""},{"path":[]},{"path":"https://evolecolgroup.github.io/tidypopgen/articles/aDNA_pseudohaploids.html","id":"download-the-data","dir":"Articles","previous_headings":"","what":"Download the data","title":"Working with aDNA pseuodhaploid samples","text":"","code":"temp_dir <- tempdir() download_url <- \"https://reich.hms.harvard.edu/sites/reich.hms.harvard.edu/files/inline-files/NearEastPublic.tar.gz\" download_path <- file.path(temp_dir, \"NearEastPublic.tar.gz\") download.file(download_url, download_path, mode = \"wb\") utils::untar(download_path, exdir = temp_dir)"},{"path":"https://evolecolgroup.github.io/tidypopgen/articles/aDNA_pseudohaploids.html","id":"read-in-the-data","dir":"Articles","previous_headings":"","what":"Read in the data","title":"Working with aDNA pseuodhaploid samples","text":"Now data downloaded, can use tidypopgen read data gen_tibble objects, beginning modern data: Followed ancient data:","code":"ho_modern <- gen_tibble(\"./data/NearEastPublic/HumanOriginsPublic2068.geno\",   quiet = TRUE,   backingfile = tempfile(\"test_\") ) ancient <- gen_tibble(\"./data/NearEastPublic/AncientLazaridis2016.geno\",   quiet = TRUE,   backingfile = tempfile(\"test_\") )"},{"path":"https://evolecolgroup.github.io/tidypopgen/articles/aDNA_pseudohaploids.html","id":"assigning-pseudohaploid-data","dir":"Articles","previous_headings":"","what":"Assigning Pseudohaploid data","title":"Working with aDNA pseuodhaploid samples","text":"Due damage associated ancient DNA samples, genotype datasets ancient individuals often include pseudohaploid data. Instead diploid genotypes, low coverage samples represented sampling one allele per site. tidypopgen handles gen_tibbles containing pseudohaploid data assigning specific genotype code (-2) denote individuals pseudohaplodified. ploidy individual stored 1 (denoting pseudohaploid) 2 (diploid individual). proceed analysis, can therefore use function gt_pseudohaploid assign ploidy individual gen_tibble object (based whether first test_n_loci homozygote): ploidy assigned, pseudohaploid data handled automatically functions designed work pseudohaploid data. functions meaningless use pseudohaplodified data, functions return error. example, attempting run indiv_inbreeding pseudohaploid data tell us function works diploid data:","code":"ancient <- gt_pseudohaploid(ancient, test_n_loci = 100000) indiv_inbreeding(ancient) #> Error in stopifnot_diploid(.x): this function only works on diploid data"},{"path":"https://evolecolgroup.github.io/tidypopgen/articles/aDNA_pseudohaploids.html","id":"pca","dir":"Articles","previous_headings":"","what":"PCA","title":"Working with aDNA pseuodhaploid samples","text":"PCA analysis, projecting ancient European individuals. Therefore, need subset modern data modern West Eurasian populations. can select populations filtering gen_tibble object using filter() function dplyr package: run PCA modern Eurasian individuals, need impute missing genotypes. subset gen_tibble object, first need update backingfile: can impute, using: also remove monomorphic loci data, loci uninformative. Monomorphic markers must always removed PCA computed using gt_pca functions. , use select_loci_if function together loci_maf select genotypes MAF greater 0: Now can create PCA object modern data: can use augment add PCA coordinates individual gen_tibble object: tidy extract proportion explained variance:","code":"west_eurasian_pops <- c(   \"Abkhasian\", \"Adygei\", \"Albanian\", \"Armenian\", \"Assyrian\", \"Balkar\", \"Basque\",   \"BedouinA\", \"BedouinB\", \"Belarusian\", \"Bulgarian\", \"Canary_Islander\",   \"Chechen\", \"Croatian\", \"Cypriot\", \"Czech\", \"Druze\", \"English\", \"Estonian\",   \"Finnish\", \"French\", \"Georgian\", \"German\", \"Greek\", \"Hungarian\", \"Icelandic\",   \"Iranian\", \"Irish\", \"Irish_Ulster\", \"Italian_North\", \"Italian_South\",   \"Jew_Ashkenazi\", \"Jew_Georgian\", \"Jew_Iranian\", \"Jew_Iraqi\", \"Jew_Libyan\",   \"Jew_Moroccan\", \"Jew_Tunisian\", \"Jew_Turkish\", \"Jew_Yemenite\", \"Jordanian\",   \"Kumyk\", \"Lebanese_Christian\", \"Lebanese\", \"Lebanese_Muslim\", \"Lezgin\",   \"Lithuanian\", \"Maltese\", \"Mordovian\", \"North_Ossetian\", \"Norwegian\",   \"Orcadian\", \"Palestinian\", \"Polish\", \"Romanian\", \"Russian\", \"Sardinian\",   \"Saudi\", \"Scottish\", \"Shetlandic\", \"Sicilian\", \"Sorb\", \"Spanish_North\",   \"Spanish\", \"Syrian\", \"Turkish\", \"Ukrainian\" )  ho_modern <- ho_modern %>% filter(population %in% west_eurasian_pops) ho_modern <- gt_update_backingfile(ho_modern,   quiet = TRUE ) ho_modern <- gt_impute_simple(ho_modern, method = \"mean\") ho_modern <- ho_modern %>% select_loci_if(loci_maf(genotypes) > 0) modern_pca <- gt_pca_partialSVD(ho_modern, k = 2) modern_pca_scores <- augment(x = modern_pca, data = ho_modern, k = 2) pca_variance <- tidy(modern_pca)"},{"path":"https://evolecolgroup.github.io/tidypopgen/articles/aDNA_pseudohaploids.html","id":"projection","dir":"Articles","previous_headings":"","what":"Projection","title":"Working with aDNA pseuodhaploid samples","text":"projecting ancient samples, remove ancient individuals outgroups interest: now can project data using predict function: , use “least_squares” argument generate least squares projection comparable approach used smartpca (also implemented R package smartsnp). Finally, can tidy data ready plot converting predicted object data frame adding population names: PCA predicted individuals can visualized using ggplot2 layering geom ancient individuals modern individuals, using syntax smartsnp:","code":"# Samples to remove: sample_remove <- c(   \"Mota\", \"Denisovan\", \"Chimp\", \"Mbuti.DG\", \"Altai\",   \"Vi_merge\", \"Clovis\", \"Kennewick\", \"Chuvash\", \"Ust_Ishim\",   \"AG2\", \"MA1\", \"MezE\", \"hg19ref\", \"Kostenki14\" )  ancient <- ancient %>% filter(!population %in% sample_remove) predicted <- predict(   object = modern_pca,   new_data = ancient,   project_method = \"least_squares\",   as_matrix = FALSE ) predicted <- predicted %>% mutate(   id = ancient$id,   population = ancient$population ) ggplot() +   geom_point(     data = modern_pca_scores,     aes(x = .fittedPC1, y = .fittedPC2), alpha = 0.5   ) +   geom_point(     data = predicted,     aes(.PC1, .PC2, fill = population, shape = population), size = 3   ) +   scale_shape_manual(values = rep(21:25, 100)) +   geom_label_repel(     data = predicted,     aes(.PC1, .PC2, label = population, col = population),     alpha = 0.7, segment.color = \"NA\"   ) +   theme_bw() +   theme(legend.position = \"none\") +   labs(     x = paste0(\"PC 1 (\", round(pca_variance$percent[1], 2), \"%)\"),     y = paste0(\"PC 2 (\", round(pca_variance$percent[2], 2), \"%)\")   ) #> Warning: ggrepel: 247 unlabeled data points (too many overlaps). Consider increasing max.overlaps"},{"path":"https://evolecolgroup.github.io/tidypopgen/articles/aDNA_pseudohaploids.html","id":"pairwise-fst","dir":"Articles","previous_headings":"","what":"Pairwise Fst","title":"Working with aDNA pseuodhaploid samples","text":"Now let’s replicate pairwise Fst analysis Lazaridis et al. (2016). First need merge ancient modern data: , group ancient modern data population: calculating Fst populations, remove populations contain one individual. can calculate Fst: can assign time ranges populations based names. allow us group populations time period creating plot: adding time ranges, can filter pairwise Fst data include comparisons populations time range, set ranges factor levels order plot: Finally, calculate median, minimum, maximum values time range, can added plot: can create plot using ggplot2, adding median, minimum, maximum values lines text labels:","code":"ancient_modern <- rbind(ho_modern, ancient) #> harmonising loci between two datasets #> flip_strand =  FALSE  ; remove_ambiguous =  FALSE  #> ----------------------------- #> dataset: reference  #> number of SNPs: 548749 reduced to 548749  #> ( 0 are ambiguous, of which 0  were removed) #> ----------------------------- #> dataset: target  #> number of SNPs: 1233553 reduced to 548749  #> ( 0 were flipped to match the reference set) #> ( 36301 are ambiguous, of which 36301 were removed) #>  #> gen_tibble saved to /tmp/RtmpptKMxO/gt_merged_42bc4e3e7eb.gt #> using bigSNP file: /tmp/RtmpptKMxO/gt_merged_42bc4e3e7eb.rds #> with backing file: /tmp/RtmpptKMxO/gt_merged_42bc4e3e7eb.bk #> make sure that you do NOT delete those files! #> to reload the gen_tibble in another session, use: #> gt_load('/tmp/RtmpptKMxO/gt_merged_42bc4e3e7eb.gt') ancient_modern <- ancient_modern %>% group_by(population) ancient_modern <- ancient_modern %>%   filter(n() > 1) pairwise_fst_tidy <- pairwise_pop_fst(ancient_modern,   method = \"Hudson\",   type = \"tidy\" ) pairwise_fst_tidy <- pairwise_fst_tidy %>%   mutate(time_range_pop1 = case_when(     str_detect(population_1, \"BA\") ~ \"Bronze Age\",     str_detect(       population_1,       \"ChL|_EN|_N|Eneolithic\"     ) ~ \"European Neolithic to Chalcolithic\",     str_detect(population_1, \"HG|Natufian\") ~ \"Before European Neolithic\",     TRUE ~ \"Present\"   )) %>%   mutate(time_range_pop2 = case_when(     str_detect(population_2, \"BA\") ~ \"Bronze Age\",     str_detect(       population_2,       \"ChL|_EN|_N|Eneolithic\"     ) ~ \"European Neolithic to Chalcolithic\",     str_detect(population_2, \"HG|Natufian\") ~ \"Before European Neolithic\",     TRUE ~ \"Present\"   )) pairwise_fst_tidy <- pairwise_fst_tidy %>%   filter(time_range_pop1 == time_range_pop2) %>%   mutate(time_range_pop1 = factor(time_range_pop1, levels = c(     \"Present\",     \"Bronze Age\",     \"European Neolithic to Chalcolithic\",     \"Before European Neolithic\"   ))) medians <- pairwise_fst_tidy %>%   group_by(time_range_pop1) %>%   summarise(median_value = median(value, na.rm = TRUE)) %>%   arrange(factor(time_range_pop1,     levels = unique(pairwise_fst_tidy$time_range_pop1)   ))  min <- pairwise_fst_tidy %>%   group_by(time_range_pop1) %>%   summarise(min_value = min(value, na.rm = TRUE))  max <- pairwise_fst_tidy %>%   group_by(time_range_pop1) %>%   summarise(max_value = max(value, na.rm = TRUE)) ggplot(pairwise_fst_tidy, aes(x = value, y = time_range_pop1)) +   geom_point() +   geom_line(     data = medians, aes(x = median_value, y = time_range_pop1, group = 1),     color = \"red\", linewidth = 1.2   ) +   geom_text(data = min, aes(     x = min_value, y = time_range_pop1,     label = round(min_value, 3), vjust = -0.7   )) +   geom_text(data = max, aes(     x = max_value, y = time_range_pop1,     label = round(max_value, 3), vjust = -0.7   )) +   labs(x = expression(\"F\"[ST]), y = element_blank())"},{"path":"https://evolecolgroup.github.io/tidypopgen/articles/aDNA_pseudohaploids.html","id":"f-statistics","dir":"Articles","previous_headings":"","what":"F statistics","title":"Working with aDNA pseuodhaploid samples","text":"calculate F statistics, tidypopgen integrates R admixtools package (.k.. ADMIXTOOLS 2). function gt_extract_f2 allows users calculate blocked f2 statistics gen_tibble object, operating way extract_f2 function admixtools. gt_extract_f2 can used follows: now use functions admixtools giving outdir f2 values.","code":"f2s <- gt_extract_f2(ancient_modern,   outdir = \"./data/NearEastPublic/f2\" )"},{"path":"https://evolecolgroup.github.io/tidypopgen/articles/benchmark_hgdp.html","id":"create-gen_tibble-object","dir":"Articles","previous_headings":"","what":"Create gen_tibble object","title":"Benchmark on the HGDP","text":"first step load HGDP data gen_tibble object, add associated metadata. read_plink: 2.6s Add metadata Let’s confirm read expected information:","code":"hgdp <- gen_tibble(bed_path,   quiet = TRUE,   backingfile = tempfile(\"test_\"),   n_cores = n_cores ) hgdp <- hgdp %>% mutate(   population = meta_info$population[match(hgdp$id, meta_info$Id)],   region = meta_info$Region[match(hgdp$id, meta_info$Id)] ) hgdp #> # A gen_tibble: 643733 loci #> # A tibble:     1,043 × 4 #>    id         genotypes population region #>    <chr>     <vctr_SNP> <chr>      <chr> #>  1 HGDP00448          1 Biaka_HG   Africa #>  2 HGDP00479          2 Biaka_HG   Africa #>  3 HGDP00985          3 Biaka_HG   Africa #>  4 HGDP01094          4 Biaka_HG   Africa #>  5 HGDP00982          5 Mbuti_HG   Africa #>  6 HGDP00911          6 Mandenka   Africa #>  7 HGDP01202          7 Mandenka   Africa #>  8 HGDP00927          8 Yoruba     Africa #>  9 HGDP00461          9 Biaka_HG   Africa #> 10 HGDP00451         10 Biaka_HG   Africa #> # ℹ 1,033 more rows"},{"path":"https://evolecolgroup.github.io/tidypopgen/articles/benchmark_hgdp.html","id":"loci-report","dir":"Articles","previous_headings":"","what":"Loci Report","title":"Benchmark on the HGDP","text":"can call qc_report_loci. function supplies minor allele frequency, rate missingness, Hardy-Weinberg exact p-value SNP. loci_report: 1.8s resulting report can observed using autoplot.","code":"loci_report <- qc_report_loci(hgdp) #> This gen_tibble is not grouped. For Hardy-Weinberg equilibrium, `qc_report_loci()` will assume individuals are part of the same population and HWE test p-values will be calculated across all individuals. If you wish to calculate HWE p-values within populations or groups, please use`group_by()` before calling `qc_report_loci()`. autoplot(loci_report, type = \"all\")"},{"path":"https://evolecolgroup.github.io/tidypopgen/articles/benchmark_hgdp.html","id":"filter-loci","dir":"Articles","previous_headings":"","what":"Filter Loci","title":"Benchmark on the HGDP","text":"Following , filter loci including minor allele frequency 0.05, missingness rate 0.05. filter_loci: 1.5s","code":"to_keep_loci <-   subset(loci_report, loci_report$maf > 0.05 & loci_report$missingness < 0.05) hgdp <- hgdp %>% select_loci(to_keep_loci$snp_id)"},{"path":"https://evolecolgroup.github.io/tidypopgen/articles/benchmark_hgdp.html","id":"individual-report","dir":"Articles","previous_headings":"","what":"Individual Report","title":"Benchmark on the HGDP","text":"can call qc_report_indiv supply observed heterozygosity per individual, rate missingness per individual. indiv_report: 2.4s","code":"indiv_report <- qc_report_indiv(hgdp) autoplot(indiv_report, type = \"scatter\")"},{"path":"https://evolecolgroup.github.io/tidypopgen/articles/benchmark_hgdp.html","id":"filter-individuals","dir":"Articles","previous_headings":"","what":"Filter individuals","title":"Benchmark on the HGDP","text":"can filter individuals include less 1% genotypes missing. filter_indiv: 4ms","code":"to_keep_indiv <- which(indiv_report$missingness < 0.01) hgdp <- hgdp[to_keep_indiv, ]"},{"path":"https://evolecolgroup.github.io/tidypopgen/articles/benchmark_hgdp.html","id":"update-backingfile","dir":"Articles","previous_headings":"","what":"Update backingfile","title":"Benchmark on the HGDP","text":"removing individuals dataset, imputing, need update file backing matrix gt_update_backingfile.","code":"hgdp <- gt_update_backingfile(hgdp) #> Genetic distances are not sorted, setting them to zero #> #> gen_backing files updated, now #> using bigSNP file: /tmp/RtmppmRPhl/test_11da24e07766_v2.rds #> with backing file: /tmp/RtmppmRPhl/test_11da24e07766_v2.bk #> make sure that you do NOT delete those files!"},{"path":"https://evolecolgroup.github.io/tidypopgen/articles/benchmark_hgdp.html","id":"impute-data","dir":"Articles","previous_headings":"","what":"Impute data","title":"Benchmark on the HGDP","text":"functions, loci_ld_clump gt_pca functions, require missingness dataset, use gt_impute_simple impute remaining missing genotypes. impute: 134ms","code":"hgdp <- gt_impute_simple(hgdp, method = \"mode\", n_cores = n_cores) gt_set_imputed(hgdp, TRUE)"},{"path":"https://evolecolgroup.github.io/tidypopgen/articles/benchmark_hgdp.html","id":"ld-clumping","dir":"Articles","previous_headings":"","what":"LD clumping","title":"Benchmark on the HGDP","text":"LD clumping performed control linkage disequilibrium. ld_clumping: 3.6s","code":"hgdp <- hgdp %>%   select_loci_if(loci_ld_clump(genotypes, thr_r2 = 0.2, n_cores = n_cores))"},{"path":"https://evolecolgroup.github.io/tidypopgen/articles/benchmark_hgdp.html","id":"pca","dir":"Articles","previous_headings":"","what":"PCA","title":"Benchmark on the HGDP","text":"principal components analysis can computed using resulting cleaned LD clumped dataset. pca: 1.7s Plot PCA:","code":"test_pca <- hgdp %>% gt_pca_partialSVD() autoplot(test_pca, type = \"scores\") +   aes(color = hgdp$region, shape = hgdp$region)"},{"path":"https://evolecolgroup.github.io/tidypopgen/articles/benchmark_hgdp.html","id":"dapc","dir":"Articles","previous_headings":"","what":"DAPC","title":"Benchmark on the HGDP","text":"can continue discriminant analysis principal components using gt_dapc, setting 6 groups corresponding main geographic regions covered dataset. dapc: 35ms Plot DAPC:","code":"test_dapc <- gt_dapc(test_pca, pop = as.factor(hgdp$region)) autoplot(test_dapc, type = \"scores\")"},{"path":"https://evolecolgroup.github.io/tidypopgen/articles/benchmark_hgdp.html","id":"calculate-fst","dir":"Articles","previous_headings":"","what":"Calculate Fst","title":"Benchmark on the HGDP","text":"examine differentiation populations global HGDP set, calculate pairwise Fst. pairwise_fst: 3.5s Plot pairwise Fst:","code":"grouped_hgdp <- hgdp %>% group_by(population) pairwise_fsts <- grouped_hgdp %>% pairwise_pop_fst(   n_cores = n_cores,   type = \"pairwise\" ) # Order by continents grouped_hgdp_order <- grouped_hgdp %>% arrange(region, population) regional_order <- unique(grouped_hgdp_order$population) pairwise_fsts <- pairwise_fsts[regional_order, regional_order]  ggheatmap(pairwise_fsts) +   scale_fill_viridis_c() +   theme(     axis.text.x = element_text(angle = -60, hjust = 0, size = 6),     axis.text.y = element_text(angle = 0, hjust = 1, size = 6)   ) +   labs(     x = element_blank(),     y = element_blank(),     fill = \"Fst\"   )"},{"path":"https://evolecolgroup.github.io/tidypopgen/articles/benchmark_hgdp.html","id":"save-in-plink-bed-format","dir":"Articles","previous_headings":"","what":"Save in plink bed format","title":"Benchmark on the HGDP","text":"Finally, can save resulting cleaned dataset PLINK .bed file. plink_save: 246ms","code":"gt_as_plink(hgdp,   file = tempfile(),   type = \"bed\",   overwrite = TRUE ) #> [1] \"/tmp/RtmppmRPhl/file11da6e81448a.bed\""},{"path":"https://evolecolgroup.github.io/tidypopgen/articles/benchmark_hgdp.html","id":"summary","dir":"Articles","previous_headings":"","what":"Summary","title":"Benchmark on the HGDP","text":"summary time taken (seconds) perform step analyses:","code":"#>            step  time #> 1    read_plink  2.61 #> 2   loci_report  1.83 #> 3   filter_loci  1.53 #> 4  indiv_report  2.42 #> 5  filter_indiv     0 #> 6        impute  0.13 #> 7   ld_clumping  3.65 #> 8           pca  1.71 #> 9          dapc  0.03 #> 10 pairwise_fst  3.48 #> 11   plink_save  0.25 #> 12        Total 17.64"},{"path":"https://evolecolgroup.github.io/tidypopgen/articles/benchmark_hgdp.html","id":"running-the-benchmark-on-a-laptop","dir":"Articles","previous_headings":"","what":"Running the benchmark on a laptop","title":"Benchmark on the HGDP","text":"now run benchmark laptop GenuineIntel, Intel(R) Core(TM) Ultra 7 155H, 22 CPU 31 GiB RAM, limiting number cores 4. summary time taken (seconds) perform step analyses:","code":"#>            step  time #> 1    read_plink  4.68 #> 2   loci_report  3.18 #> 3   filter_loci   3.2 #> 4  indiv_report  3.27 #> 5  filter_indiv     0 #> 6        impute  0.88 #> 7   ld_clumping  9.28 #> 8           pca  3.74 #> 9          dapc  0.06 #> 10 pairwise_fst  5.49 #> 11   plink_save  0.34 #> 12        Total 34.12"},{"path":"https://evolecolgroup.github.io/tidypopgen/articles/interpolating.html","id":"map","dir":"Articles","previous_headings":"","what":"Map","title":"Interpolating genetic data","text":"tidypopgen integrates sf package allow swift easy spatial analyses mapping genetic data. begin, can add sf geometry gen_tibble using gt_add_sf(). need specify names columns containing longitude latitude coordinates. can create map South America using rnaturalearth package. base map onto plot samples interpolate PC scores.","code":"anole_gt <- gt_add_sf(anole_gt, c(\"longitude\", \"latitude\")) anole_gt #> Simple feature collection with 46 features and 6 fields #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: -75.8069 ymin: -23.7564 xmax: -35.7099 ymax: 4.4621 #> Geodetic CRS:  WGS 84 #> # A gen_tibble: 3249 loci #> # A tibble:     46 × 7 #>    id                 genotypes population       longitude latitude pop              geometry #>    <chr>             <vctr_SNP> <chr>                <dbl>    <dbl> <chr>         <POINT [°]> #>  1 punc_BM288         [0,0,...] Amazonian_Forest     -51.8    -3.32 Eam    (-51.8448 -3.3228) #>  2 punc_GN71          [2,0,...] Amazonian_Forest     -54.6    -9.73 Eam    (-54.6064 -9.7307) #>  3 punc_H1907         [0,2,...] Amazonian_Forest     -64.8    -9.45 Wam    (-64.8247 -9.4459) #>  4 punc_H1911         [0,2,...] Amazonian_Forest     -64.8    -9.44 Wam    (-64.8203 -9.4358) #>  5 punc_H2546         [0,1,...] Amazonian_Forest     -65.4    -9.60 Wam    (-65.3576 -9.5979) #>  6 punc_IBSPCRIB0361  [0,0,...] Atlantic_Forest      -46.0   -23.8  AF    (-46.0247 -23.7564) #>  7 punc_ICST764       [0,0,...] Atlantic_Forest      -36.3    -9.81 AF     (-36.2838 -9.8092) #>  8 punc_JFT459        [0,0,...] Atlantic_Forest      -40.5   -20.3  AF    (-40.5219 -20.2811) #>  9 punc_JFT773        [0,0,...] Atlantic_Forest      -40.5   -20.0  AF        (-40.52 -19.96) #> 10 punc_LG1299        [0,0,...] Atlantic_Forest      -39.1   -15.3  AF    (-39.0694 -15.2696) #> # ℹ 36 more rows library(rnaturalearth) library(ggplot2)  map <- ne_countries(   continent = \"South America\",   type = \"map_units\", scale = \"medium\" )  ggplot() +   geom_sf(data = map) +   geom_sf(data = anole_gt$geometry, aes(colour = anole_gt$population)) +   coord_sf(     xlim = c(-85, -30),     ylim = c(-30, 15)   ) +   theme_minimal() +   guides(colour = guide_legend(title = \"Population\"))"},{"path":"https://evolecolgroup.github.io/tidypopgen/articles/interpolating.html","id":"pca","dir":"Articles","previous_headings":"","what":"PCA","title":"Interpolating genetic data","text":"previous vignette used PCA, DAPC, ADMIXTURE show sample Anolis punctatus lizards contains three main genetic clusters across range species. Suppose wanted interpolate first principal component across range species observe change genetic variation across space. Let’s run PCA augment gen_tibble principal component scores.","code":"anole_gt <- gt_impute_simple(anole_gt, method = \"mode\") anole_pca <- anole_gt %>% gt_pca_partialSVD(k = 30) anole_gt <- augment(anole_pca, data = anole_gt)"},{"path":"https://evolecolgroup.github.io/tidypopgen/articles/interpolating.html","id":"interpolating","dir":"Articles","previous_headings":"","what":"Interpolating","title":"Interpolating genetic data","text":"Now map genetic data PCA scores, can interpolate scores first principal component across landscape. begin , need load sf, terra, tidyterra packages. first prepare map unifying geometries single polygon casting “POLYGON” type. , need create grid points covering area map. converting grid sf object, can use st_filter() keep points fall within landmass. Now can use gstat package perform spatial interpolation heterozygosity. gstat implements several methods spatial interpolation, including inverse distance weighting (IDW) kriging. , use IDW interpolate heterozygosity across grid points. remove genotypes gen_tibble, gstat accept gen_tibble object, run interpolation: can rasterize interpolated values: publication-ready figure, can use ggplot2 tidyterra package plot: interpolated map, can see clear gradient first principal component scores across range Anolis punctatus, highest scores among Atlantic forest populations east, lowest scores clustered among Amazonian populations west.","code":"library(sf) library(terra) library(tidyterra) map <- st_union(map) %>% st_sf() map <- st_cast(map, \"POLYGON\") grid <- rast(map, nrows = 100, ncols = 100) xy <- xyFromCell(grid, 1:ncell(grid)) coop <- st_as_sf(as.data.frame(xy), coords = c(\"x\", \"y\"),                  crs = st_crs(map)) coop <- st_filter(coop, map) anole_sf_obj <- anole_gt %>% select(-\"genotypes\")  library(gstat) res <- gstat(formula = .fittedPC1 ~ 1, locations = anole_sf_obj,              nmax = nrow(anole_sf_obj),              set = list(idp = 1))  resp <- predict(res, coop) #> [inverse distance weighted interpolation] resp$x <- st_coordinates(resp)[,1] resp$y <- st_coordinates(resp)[,2] pred <- rasterize(resp, grid, field = \"var1.pred\", fun = \"mean\") ggplot()  +   geom_sf(data = map, fill = \"grey95\")  +   geom_spatraster(data = pred, aes(fill = mean))+   geom_sf(data = anole_gt$geometry, aes(fill = anole_gt$.fittedPC1),            shape = 21, colour = \"black\", size = 2, stroke = 0.3) +   coord_sf(     xlim = c(-85, -30),     ylim = c(-30, 15)   ) +   scale_fill_viridis_c(name = \"Interpolated PC1\", alpha= 0.8, na.value = NA) +   scale_color_viridis_c(name = \"Observed\", alpha= 0.8) +   theme_minimal()"},{"path":"https://evolecolgroup.github.io/tidypopgen/articles/interpolating_hgdp.html","id":"create-gen_tibble-object","dir":"Articles","previous_headings":"","what":"Create gen_tibble object","title":"Interpolating Heterozygosity","text":"first step load HGDP data gen_tibble object. add associated metadata Let’s confirm expected information:","code":"bed_path <- \"./data/hgdp/hgdp650.qc.hg19.bed\"  hgdp <- gen_tibble(bed_path,   quiet = TRUE,   backingfile = tempfile(\"test_\") ) meta_info <- read_tsv(\"./data/hgdp/hgdp650_id_pop_coords.txt\", col_names = TRUE) #> Rows: 1043 Columns: 6 #> ── Column specification ─────────────────────────────────────────────────────────────────────────────────── #> Delimiter: \"\\t\" #> chr (4): id, population, geographic_origin, region #> dbl (2): latitude, longitude #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.  hgdp <- hgdp %>% mutate(   population = meta_info$population[match(hgdp$id, meta_info$id)],   geographic_origin = meta_info$geographic_origin[match(hgdp$id, meta_info$id)],   region = meta_info$region[match(hgdp$id, meta_info$id)],   latitude = meta_info$latitude[match(hgdp$id, meta_info$id)],   longitude = meta_info$longitude[match(hgdp$id, meta_info$id)] ) hgdp #> # A gen_tibble: 643733 loci #> # A tibble:     1,043 × 8 #>    id        phenotype  genotypes population geographic_origin            region latitude longitude #>    <chr>     <fct>     <vctr_SNP> <chr>      <chr>                        <chr>     <dbl>     <dbl> #>  1 HGDP00448 control    [2,0,...] Biaka_HG   Central_African_Republic     Africa        4        17 #>  2 HGDP00479 control    [1,0,...] Biaka_HG   Central_African_Republic     Africa        4        17 #>  3 HGDP00985 control    [0,0,...] Biaka_HG   Central_African_Republic     Africa        4        17 #>  4 HGDP01094 control    [1,0,...] Biaka_HG   Central_African_Republic     Africa        4        17 #>  5 HGDP00982 control    [2,0,...] Mbuti_HG   Democratic_Republic_of_Congo Africa        1        29 #>  6 HGDP00911 control    [1,0,...] Mandenka   Senegal                      Africa       12       -12 #>  7 HGDP01202 control    [2,0,...] Mandenka   Senegal                      Africa       12       -12 #>  8 HGDP00927 control    [2,0,...] Yoruba     Nigeria                      Africa        8         5 #>  9 HGDP00461 control    [2,0,...] Biaka_HG   Central_African_Republic     Africa        4        17 #> 10 HGDP00451 control    [2,0,...] Biaka_HG   Central_African_Republic     Africa        4        17 #> # ℹ 1,033 more rows"},{"path":"https://evolecolgroup.github.io/tidypopgen/articles/interpolating_hgdp.html","id":"gen_tibble-with-sf","dir":"Articles","previous_headings":"","what":"Gen_tibble with sf","title":"Interpolating Heterozygosity","text":"Now latitudes longitudes tibble; can transform sf geometry function gt_add_sf(). done , gen_tibble act sf object, can plotted ggplot2.","code":"hgdp <- gt_add_sf(hgdp, c(\"longitude\", \"latitude\")) hgdp #> Simple feature collection with 1043 features and 8 fields #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: -108 ymin: -25.83333 xmax: 155 ymax: 63 #> Geodetic CRS:  WGS 84 #> # A gen_tibble: 643733 loci #> # A tibble:     1,043 × 9 #>    id        phenotype  genotypes population geographic_origin            region latitude longitude #>    <chr>     <fct>     <vctr_SNP> <chr>      <chr>                        <chr>     <dbl>     <dbl> #>  1 HGDP00448 control    [2,0,...] Biaka_HG   Central_African_Republic     Africa        4        17 #>  2 HGDP00479 control    [1,0,...] Biaka_HG   Central_African_Republic     Africa        4        17 #>  3 HGDP00985 control    [0,0,...] Biaka_HG   Central_African_Republic     Africa        4        17 #>  4 HGDP01094 control    [1,0,...] Biaka_HG   Central_African_Republic     Africa        4        17 #>  5 HGDP00982 control    [2,0,...] Mbuti_HG   Democratic_Republic_of_Congo Africa        1        29 #>  6 HGDP00911 control    [1,0,...] Mandenka   Senegal                      Africa       12       -12 #>  7 HGDP01202 control    [2,0,...] Mandenka   Senegal                      Africa       12       -12 #>  8 HGDP00927 control    [2,0,...] Yoruba     Nigeria                      Africa        8         5 #>  9 HGDP00461 control    [2,0,...] Biaka_HG   Central_African_Republic     Africa        4        17 #> 10 HGDP00451 control    [2,0,...] Biaka_HG   Central_African_Republic     Africa        4        17 #> # ℹ 1,033 more rows #> # ℹ 1 more variable: geometry <POINT [°]>"},{"path":"https://evolecolgroup.github.io/tidypopgen/articles/interpolating_hgdp.html","id":"interpolating-heterozygosity","dir":"Articles","previous_headings":"","what":"Interpolating heterozygosity","title":"Interpolating Heterozygosity","text":"Calculating heterozygosity simple tidypopgen. First, lets run basic filtering remove SNPs linkage: can store heterozygosity individual gen_tibble object creating column mutate() using function indiv_het_obs() calculate observed heterozygosity individual. can create new column mean heterozygosity population can begin creating global map using rnaturalearth. can check distribution samples across map using gen_tibble sf geometry: map shows distribution HGDP data, can see gaps sampling. know heterozygosity decreases distance Africa, can use spatial interpolation estimate heterozygosity unsampled areas. begin, create grid points covering map. converting grid sf object, can use st_filter() keep points fall within landmasses. can quickly visualise grid using qtm autoplotting function tmap package: Now can use gstat package perform spatial interpolation heterozygosity. gstat implements several methods spatial interpolation, including inverse distance weighting (IDW) kriging. , use IDW interpolate heterozygosity across grid points. remove genotypes gen_tibble, gstat accept gen_tibble object, run interpolation: can visualise interpolated values using tmap: , publication-ready figure, can use ggplot2 tidyterra package:","code":"library(spData) library(sf) library(terra) library(tmap) library(viridis) hgdp <- gt_impute_simple(hgdp) to_keep <- hgdp %>% loci_ld_clump(   thr_r2 = 0.2, size = 100,   return_id = TRUE, use_positions = TRUE ) hgdp <- hgdp %>% select_loci(all_of(to_keep)) hgdp <- hgdp %>% mutate(heterozygosity = indiv_het_obs(genotypes)) mean_het <- hgdp %>%   group_by(population) %>%   summarise(mean_het = mean(heterozygosity)) hgdp <-   hgdp %>%   mutate(mean_het = mean_het$mean_het[match(     hgdp$population,     mean_het$population   )]) library(rnaturalearth)  map <- ne_countries(scale = \"medium\") %>%   filter(sovereignt != \"Antarctica\") map <- st_union(map) %>% st_sf() map <- st_cast(map, \"POLYGON\") map <- st_wrap_dateline(map, options = c(\"WRAPDATELINE=YES\")) ggplot() +   geom_sf(data = hgdp$geometry) +   geom_sf(data = map, fill = NA) +   theme_minimal() grid <- rast(map, nrows = 200, ncols = 200) xy <- xyFromCell(grid, 1:ncell(grid)) coop <- st_as_sf(as.data.frame(xy),   coords = c(\"x\", \"y\"),   crs = st_crs(map) ) coop <- st_filter(coop, map) qtm(coop) hgdp_sf_obj <- hgdp %>% select(-\"genotypes\")  library(gstat) res <- gstat(   formula = mean_het ~ 1, locations = hgdp_sf_obj,   nmax = nrow(hgdp_sf_obj),   set = list(idp = 1) )  resp <- predict(res, coop) #> [inverse distance weighted interpolation] resp$x <- st_coordinates(resp)[, 1] resp$y <- st_coordinates(resp)[, 2] pred <- rasterize(resp, grid, field = \"var1.pred\", fun = \"mean\") tm_shape(pred) + tm_raster(alpha = 0.6, palette = \"viridis\") #>  #> ── tmap v3 code detected ────────────────────────────────────────────────────────────────────────────────── #> [v3->v4] `tm_tm_raster()`: migrate the argument(s) related to the scale of the visual variable `col` #> namely 'palette' (rename to 'values') to col.scale = tm_scale(<HERE>). #> [v3->v4] `tm_raster()`: use `col_alpha` instead of `alpha`. library(tidyterra)  ggplot() +   geom_sf(data = hgdp, aes(colour = mean_het)) +   geom_spatraster(data = pred, aes(fill = var1.pred)) +   scale_fill_viridis_c(     name = \"Interpolated Heterozygosity\",     alpha = 0.8,     na.value = NA   ) +   scale_color_viridis_c(name = \"Observed\", alpha = 0.8) +   theme_minimal() #> Error in `geom_spatraster()`: #> ! Problem while computing aesthetics. #> ℹ Error occurred in the 2nd layer. #> Caused by error: #> ! object 'var1.pred' not found"},{"path":"https://evolecolgroup.github.io/tidypopgen/articles/tidypopgen.html","id":"creating-a-gen_tibble","dir":"Articles","previous_headings":"","what":"Creating a gen_tibble","title":"tidypopgen","text":"tidypopgen, represent data gen_tibble, subclass tibble containing columns id genotypes individual. Genotypes stored compressed format File-Backed Matrix can easily accessed functions tidypopgen. genotypes column contains vector row indices individual File-Backed Matrix, printed, genotypes column shows first two genotypes individual. visual representation gen_tibble object structure full discussion manipulate gen_tibble objects, see vignette ‘grammar population genetics’. Additionally, data loaded .bed file information FID column, treated population information automatically added gen_tibble column population. normal tibble, information can changed, updated, removed gen_tibble needed. tidypopgen can also read data form packedancestry files vcf. Let’s start creating gen_tibble lobster.bed file. can see structure gen_tibble , expected columns. case, .bed file contains population information corresponding sampling site lobster dataset. want take look genotypes lobsters, can use show_genotypes function return matrix genotypes, rows individuals columns loci. big table, just look first ten loci first 5 individuals: , similarly, want see information loci can use show_loci function, returns tibble information locus. big table, use head() look first : Now gen_tibble work , can start clean data.","code":"lobsters <- gen_tibble(   x = system.file(\"extdata/lobster/lobster.bed\", package = \"tidypopgen\"),   quiet = TRUE, backingfile = tempfile() ) head(lobsters) ## # A gen_tibble: 79 loci ## # A tibble:     6 × 3 ##   id    population  genotypes ##   <chr> <chr>      <vctr_SNP> ## 1 Ale04 Ale         [0,.,...] ## 2 Ale05 Ale         [1,0,...] ## 3 Ale06 Ale         [.,0,...] ## 4 Ale08 Ale         [.,2,...] ## 5 Ale13 Ale         [0,.,...] ## 6 Ale15 Ale         [1,0,...] lobsters %>% show_genotypes(indiv_indices = 1:5, loci_indices = 1:10) ##      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] ## [1,]    0   NA   NA   NA    2   NA   NA   NA    0    NA ## [2,]    1    0    1    2    1    1    0    1    1     1 ## [3,]   NA    0    0   NA    2    2   NA   NA    0     2 ## [4,]   NA    2    0    2   NA   NA   NA   NA    1    NA ## [5,]    0   NA    0   NA    2   NA    0   NA   NA    NA head(lobsters %>% show_loci()) ## # A tibble: 6 × 7 ##   big_index name   chromosome position genetic_dist allele_ref allele_alt ##       <int> <chr>  <fct>         <int>        <dbl> <chr>      <chr>      ## 1         1 rs3441 1                 1            1 G          A          ## 2         2 rs4173 2                 2            2 C          T          ## 3         3 rs6157 3                 3            3 G          C          ## 4         4 rs7502 4                 4            4 C          T          ## 5         5 rs7892 5                 5            5 A          T          ## 6         6 rs9441 7                 7            7 A          G"},{"path":"https://evolecolgroup.github.io/tidypopgen/articles/tidypopgen.html","id":"quality-control","dir":"Articles","previous_headings":"","what":"Quality control","title":"tidypopgen","text":"Let’s start checking quality data individual lobster dataset. can use qc_report_indiv function generate report contains information missingness heterozygosity individual. can take look data using autoplot function:  can see individuals low missingness heterozygosity, individuals missing >20% genotypes. can remove individuals using filter function, specifying keep individuals missingness 20%. Now lets check loci. can use qc_report_loci function generate report loci quality. function return another qc_report object, contains information missingness, minor allele frequency, Hardy-Weinberg Equilibrium locus. , get message qc_report_loci function calculates Hardy-Weinberg equilibrium assuming individuals part single population. dataset contains multiple lobster populations, group data population first: ’s better. Now, lets take look minor allele frequency loci:  can see don’t monomorphic SNPs. Now let’s look missingness. data mostly low missingness, can see loci > 5% missingness across individuals, want remove individuals. tidypopgen, two functions subset loci gen_tibble object: select_loci select_loci_if. function select_loci operates information loci (e.g filtering chromosome rsID), select_loci_if operates genotypes loci (e.g filtering minor allele frequency missingness). case, want remove loci >5% missingness, can use select_loci_if loci_missingness function, operating genotypes column gen_tibble. filtering, removed individuals loci. now update file backing matrix reflect changes, using function gt_update_backingfile: Now data clean backingfile updated, ready create PCA.","code":"indiv_qc_lobsters <- lobsters %>% qc_report_indiv() autoplot(indiv_qc_lobsters, type = \"scatter\") lobsters <- lobsters %>% filter(indiv_missingness(genotypes) < 0.2) loci_qc_lobsters <- lobsters %>% qc_report_loci() ## This gen_tibble is not grouped. For Hardy-Weinberg equilibrium, `qc_report_loci()` will assume individuals are part of the same population and HWE test p-values will be calculated across all individuals. If you wish to calculate HWE p-values within populations or groups, please use`group_by()` before calling `qc_report_loci()`. lobsters <- lobsters %>% group_by(population) loci_qc_lobsters <- lobsters %>% qc_report_loci() autoplot(loci_qc_lobsters, type = \"maf\") autoplot(loci_qc_lobsters, type = \"missing\") lobsters <- lobsters %>% select_loci_if(loci_missingness(genotypes) < 0.05) lobsters <- gt_update_backingfile(lobsters, backingfile = tempfile()) ##  ## gen_backing files updated, now ## using FBM RDS: /tmp/RtmpI0SERW/file2e151f0e81cc.rds ## with FBM backing file: /tmp/RtmpI0SERW/file2e151f0e81cc.bk ## make sure that you do NOT delete those files!"},{"path":"https://evolecolgroup.github.io/tidypopgen/articles/tidypopgen.html","id":"impute","dir":"Articles","previous_headings":"","what":"Impute","title":"tidypopgen","text":"First, need impute remaining missing data using gt_impute_simple function.","code":"lobsters <- gt_impute_simple(lobsters, method = \"random\")"},{"path":"https://evolecolgroup.github.io/tidypopgen/articles/tidypopgen.html","id":"pca","dir":"Articles","previous_headings":"","what":"PCA","title":"tidypopgen","text":"can run PCA. number PCA algorithms, , use gt_pca_partialSVD function: can create simple plot using autoplot:  easy! autoplot gives us quick idea explained variance rough distribution samples, need see different populations within dataset. quick overview, add aesthetic plot:  However, want fully customise plot, can wrangle data directly use ggplot2.","code":"partial_pca <- gt_pca_partialSVD(lobsters) autoplot(partial_pca, type = \"scores\") autoplot(partial_pca, type = \"scores\") +   aes(color = lobsters$population) +   labs(color = \"population\")"},{"path":"https://evolecolgroup.github.io/tidypopgen/articles/tidypopgen.html","id":"plot-with-ggplot2","dir":"Articles","previous_headings":"","what":"Plot with ggplot2","title":"tidypopgen","text":"customised plot, can extract information scores individual using augment method gt_pca. can extract eigenvalues principal component tidy function, using “eigenvalues” argument: finally plot:  create labelled version PCA determining centre group place labels add labels plot:  ’s ! functions run different types analyses (DAPC, ADMIXTURE, f statistics admixtools2, etc.); resulting object autoplot, tidy, augment explore results integrated information gen_tibble.","code":"pcs <- augment(x = partial_pca, data = lobsters) eigenvalues <- tidy(partial_pca, \"eigenvalues\")  xlab <- paste(\"Axis 1 (\", round(eigenvalues[1, 3], 1), \" %)\",   sep = \"\" ) ylab <- paste(\"Axis 2 (\", round(eigenvalues[2, 3], 1), \" %)\",   sep = \"\" ) ggplot(data = pcs, aes(x = .fittedPC1, y = .fittedPC2)) +   geom_hline(yintercept = 0) +   geom_vline(xintercept = 0) +   geom_point(aes(fill = population),     shape = 21, size = 3, show.legend = FALSE   ) +   scale_fill_distruct() +   labs(x = xlab, y = ylab) +   ggtitle(\"Lobster PCA\") # Calculate centre for each population centroid <- aggregate(cbind(.fittedPC1, .fittedPC2, .fittedPC3) ~ population,   data = pcs, FUN = mean )  # Add these coordinates to our augmented pca object pcs <- left_join(pcs, centroid, by = \"population\", suffix = c(\"\", \".cen\")) ggplot(data = pcs, aes(x = .fittedPC1, y = .fittedPC2)) +   geom_hline(yintercept = 0) +   geom_vline(xintercept = 0) +   geom_segment(aes(xend = .fittedPC1.cen, yend = .fittedPC2.cen),     show.legend = FALSE   ) +   geom_point(aes(fill = population),     shape = 21, size = 3, show.legend = FALSE   ) +   geom_label(     data = centroid,     aes(label = population, fill = population),     size = 4, show.legend = FALSE   ) +   scale_fill_distruct() +   labs(x = xlab, y = ylab) +   ggtitle(\"Lobster PCA\")"},{"path":"https://evolecolgroup.github.io/tidypopgen/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Evie Carter. Author. Eirlys Tysall. Author. Andrea Manica. Author, maintainer, copyright holder. Chang Christopher. Contributor.           Author Hardy-Weinberg Equilibrium algorithm PLINK 1.90, used loci_hwe() Shaun Purcell. Contributor.           Author Hardy-Weinberg Equilibrium algorithm PLINK 1.90, used loci_hwe() Bengtsson Henrik. Contributor.           Author countLines R.utils, modified .vcf count_vcf_variants()","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Carter E, Tysall E, Manica (2025). tidypopgen: Tidy Population Genetics. R package version 0.4.0, https://github.com/EvolEcolGroup/tidypopgen.","code":"@Manual{,   title = {tidypopgen: Tidy Population Genetics},   author = {Evie Carter and Eirlys Tysall and Andrea Manica},   year = {2025},   note = {R package version 0.4.0},   url = {https://github.com/EvolEcolGroup/tidypopgen}, }"},{"path":"https://evolecolgroup.github.io/tidypopgen/index.html","id":"tidypopgen-","dir":"","previous_headings":"","what":"Tidy Population Genetics","title":"Tidy Population Genetics","text":"goal tidypopgen provide tidy grammar population genetics, facilitating manipulation analysis biallelic single nucleotide polymorphisms (SNPs). tidypopgen scales large genetic datasets storing genotypes disk, performing operations chunks, without ever loading data memory.","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Tidy Population Genetics","text":"can install release version tidypopgen CRAN: can install latest development version directly r-universe (recommended): Alternatively, can install tidypopgenusing devtools (might need set development environment, can bit complex):","code":"install.packages(\"tidypopgen\") install.packages('tidypopgen', repos = c('https://evolecolgroup.r-universe.dev',                  'https://cloud.r-project.org')) install.packages(\"devtools\") devtools::install_github(\"EvolEcolGroup/tidypopgen\")"},{"path":"https://evolecolgroup.github.io/tidypopgen/index.html","id":"examples","dir":"","previous_headings":"","what":"Examples","title":"Tidy Population Genetics","text":"several vignettes designed teach use tidypopgen. short introduction package available ‘introduction’ vignette. detailed technical description grammar population genetics, explaining manipulate individuals loci, available ‘grammar’ vignette. ‘quality control’ vignette illustrates tidypopgen functions help running full QC dataset analysis. ‘population genetic analysis’ vignette provides fully annotated example run various population genetics analyses tidypopgen. also provide ‘PLINK cheatsheet’ aimed translating common tasks performed PLINK tidypopgen commands. also article showing manage aDNA sample coded pseudohaploids, including project ancient DNA data onto PCA fitted modern data prepare data admixtools: ‘aDNA pseudohaploids’ article. Finally, tidypopgen fast can handle large datasets easily. See ‘benchmark’ article using HGDP, dataset 1000 individuals typed 650k SNPs. can load data, clean , run imputation, PCA pairwise Fst among 51 populations less 20 seconds powerful desktop (less minute laptop).","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/index.html","id":"when-something-does-not-work","dir":"","previous_headings":"","what":"When something does not work","title":"Tidy Population Genetics","text":"something work, check issues GitHub see whether problem already reported. , feel free create new issue. Please make sure updated latest version tidypopgen r-universe/Github, well updating packages system, provide reproducible example developers investigate problem. Ideally, try create minimalistic dataset reproduces error, much easier (thus faster!) developers track problem.","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/arrange.gen_tbl.html","id":null,"dir":"Reference","previous_headings":"","what":"An arrange method for gen_tibble objects — arrange.gen_tbl","title":"An arrange method for gen_tibble objects — arrange.gen_tbl","text":"arrange method gen_tibble objects","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/arrange.gen_tbl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"An arrange method for gen_tibble objects — arrange.gen_tbl","text":"","code":"# S3 method for class 'gen_tbl' arrange(..., deparse.level = 1)"},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/arrange.gen_tbl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"An arrange method for gen_tibble objects — arrange.gen_tbl","text":"... gen_tibble data.frame tibble deparse.level integer controlling construction column names.","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/arrange.gen_tbl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"An arrange method for gen_tibble objects — arrange.gen_tbl","text":"gen_tibble","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/arrange.gen_tbl.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"An arrange method for gen_tibble objects — arrange.gen_tbl","text":"","code":"test_gt <- load_example_gt(\"gen_tbl\") test_gt %>% arrange(id) #> # A gen_tibble: 6 loci #> # A tibble:     7 × 3 #>   id    population  genotypes #>   <chr> <chr>      <vctr_SNP> #> 1 a     pop1        [1,1,...] #> 2 b     pop1        [2,1,...] #> 3 c     pop2        [2,.,...] #> 4 d     pop2        [1,0,...] #> 5 e     pop1        [1,2,...] #> 6 f     pop3        [0,0,...] #> 7 g     pop3        [0,1,...]"},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/arrange.grouped_gen_tbl.html","id":null,"dir":"Reference","previous_headings":"","what":"An arrange method for grouped gen_tibble objects — arrange.grouped_gen_tbl","title":"An arrange method for grouped gen_tibble objects — arrange.grouped_gen_tbl","text":"arrange method grouped gen_tibble objects","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/arrange.grouped_gen_tbl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"An arrange method for grouped gen_tibble objects — arrange.grouped_gen_tbl","text":"","code":"# S3 method for class 'grouped_gen_tbl' arrange(..., deparse.level = 1)"},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/arrange.grouped_gen_tbl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"An arrange method for grouped gen_tibble objects — arrange.grouped_gen_tbl","text":"... gen_tibble data.frame tibble deparse.level integer controlling construction column names.","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/arrange.grouped_gen_tbl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"An arrange method for grouped gen_tibble objects — arrange.grouped_gen_tbl","text":"grouped gen_tibble","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/arrange.grouped_gen_tbl.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"An arrange method for grouped gen_tibble objects — arrange.grouped_gen_tbl","text":"","code":"test_gt <- load_example_gt(\"grouped_gen_tbl\") test_gt %>% arrange(id) #> # A gen_tibble: 6 loci #> # A tibble:     7 × 3 #> # Groups:       population [3] #>   id    population  genotypes #>   <chr> <chr>      <vctr_SNP> #> 1 a     pop1        [1,1,...] #> 2 b     pop1        [2,1,...] #> 3 c     pop2        [2,.,...] #> 4 d     pop2        [1,0,...] #> 5 e     pop1        [1,2,...] #> 6 f     pop3        [0,0,...] #> 7 g     pop3        [0,1,...] test_gt <- load_example_gt(\"grouped_gen_tbl_sf\") test_gt %>% arrange(id) #> Simple feature collection with 7 features and 5 fields #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: 0 ymin: 41 xmax: 2 ymax: 51 #> Geodetic CRS:  WGS 84 #> # A gen_tibble: 6 loci #> # A tibble:     7 × 6 #> # Groups:       population [3] #>   id    population longitude latitude  genotypes    geometry #>   <chr> <chr>          <dbl>    <dbl> <vctr_SNP> <POINT [°]> #> 1 a     pop1               0       51  [1,1,...]      (0 51) #> 2 b     pop1               0       51  [2,1,...]      (0 51) #> 3 c     pop2               2       49  [2,.,...]      (2 49) #> 4 d     pop2               2       49  [1,0,...]      (2 49) #> 5 e     pop1               0       51  [1,2,...]      (0 51) #> 6 f     pop3               2       41  [0,0,...]      (2 41) #> 7 g     pop3               2       41  [0,1,...]      (2 41)"},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/augment.gt_dapc.html","id":null,"dir":"Reference","previous_headings":"","what":"Augment data with information from a gt_dapc object — augment.gt_dapc","title":"Augment data with information from a gt_dapc object — augment.gt_dapc","text":"Augment gt_dapc accepts model object dataset adds scores observation dataset. Scores component stored separate column, given name pattern \".fittedLD1\", \".fittedLD2\", etc. consistency broom::augment.prcomp, column \".rownames\" also returned; copy 'id', ensures scripts written data augmented broom::augment.prcomp work box (especially helpful adapting plotting scripts).","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/augment.gt_dapc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Augment data with information from a gt_dapc object — augment.gt_dapc","text":"","code":"# S3 method for class 'gt_dapc' augment(x, data = NULL, k = NULL, ...)"},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/augment.gt_dapc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Augment data with information from a gt_dapc object — augment.gt_dapc","text":"x gt_dapc object returned gt_dapc(). data gen_tibble used run PCA. k number components add ... used. Needed match generic signature .","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/augment.gt_dapc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Augment data with information from a gt_dapc object — augment.gt_dapc","text":" gen_tibble containing original data along additional columns containing observation's projection PCA space.","code":""},{"path":[]},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/augment.gt_dapc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Augment data with information from a gt_dapc object — augment.gt_dapc","text":"","code":"# Create a gen_tibble of lobster genotypes bed_file <-   system.file(\"extdata\", \"lobster\", \"lobster.bed\", package = \"tidypopgen\") lobsters <- gen_tibble(bed_file,   backingfile = tempfile(\"lobsters\"),   quiet = TRUE )  # Remove monomorphic loci and impute lobsters <- lobsters %>% select_loci_if(loci_maf(genotypes) > 0) lobsters <- gt_impute_simple(lobsters, method = \"mode\")  # Create PCA and run DAPC pca <- gt_pca_partialSVD(lobsters) populations <- as.factor(lobsters$population) dapc_res <- gt_dapc(pca, n_pca = 6, n_da = 2, pop = populations)  # Augment the gen_tibble with the DAPC scores augment(dapc_res, data = lobsters, k = 2) #> # A gen_tibble: 79 loci #> # A tibble:     176 × 6 #>    id    population  genotypes .rownames .fittedLD1 .fittedLD2 #>    <chr> <chr>      <vctr_SNP> <chr>          <dbl>      <dbl> #>  1 Ale04 Ale         [0,.,...] Ale04           3.87      0.132 #>  2 Ale05 Ale         [1,0,...] Ale05           3.96     -0.402 #>  3 Ale06 Ale         [.,0,...] Ale06           3.25     -0.801 #>  4 Ale08 Ale         [.,2,...] Ale08           3.06      0.398 #>  5 Ale13 Ale         [0,.,...] Ale13           1.60      1.05  #>  6 Ale15 Ale         [1,0,...] Ale15           2.80     -0.499 #>  7 Ale16 Ale         [0,.,...] Ale16           4.85     -0.194 #>  8 Ale17 Ale         [1,.,...] Ale17           4.66      0.420 #>  9 Ale18 Ale         [0,0,...] Ale18           4.71      1.00  #> 10 Ale19 Ale         [2,.,...] Ale19           3.62     -1.37  #> # ℹ 166 more rows"},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/augment_gt_pca.html","id":null,"dir":"Reference","previous_headings":"","what":"Augment data with information from a gt_pca object — augment_gt_pca","title":"Augment data with information from a gt_pca object — augment_gt_pca","text":"Augment gt_pca accepts model object dataset adds scores observation dataset. Scores component stored separate column, given name pattern \".fittedPC1\", \".fittedPC2\", etc. consistency broom::augment.prcomp, column \".rownames\" also returned; copy 'id', ensures scripts written data augmented broom::augment.prcomp work box (especially helpful adapting plotting scripts).","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/augment_gt_pca.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Augment data with information from a gt_pca object — augment_gt_pca","text":"","code":"# S3 method for class 'gt_pca' augment(x, data = NULL, k = NULL, ...)"},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/augment_gt_pca.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Augment data with information from a gt_pca object — augment_gt_pca","text":"x gt_pca object returned one gt_pca_* functions. data gen_tibble used run PCA. k number components add ... used. Needed match generic signature .","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/augment_gt_pca.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Augment data with information from a gt_pca object — augment_gt_pca","text":" gen_tibble containing original data along additional columns containing observation's projection PCA space.","code":""},{"path":[]},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/augment_gt_pca.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Augment data with information from a gt_pca object — augment_gt_pca","text":"","code":"# Create a gen_tibble of lobster genotypes bed_file <-   system.file(\"extdata\", \"lobster\", \"lobster.bed\", package = \"tidypopgen\") lobsters <- gen_tibble(bed_file,   backingfile = tempfile(\"lobsters\"),   quiet = TRUE )  # Remove monomorphic loci and impute lobsters <- lobsters %>% select_loci_if(loci_maf(genotypes) > 0) lobsters <- gt_impute_simple(lobsters, method = \"mode\")  # Create PCA object pca <- gt_pca_partialSVD(lobsters)  # Augment the gen_tibble with PCA scores augment(pca, data = lobsters) #> # A gen_tibble: 79 loci #> # A tibble:     176 × 14 #>    id    population  genotypes .rownames .fittedPC1 .fittedPC2 .fittedPC3 #>    <chr> <chr>      <vctr_SNP> <chr>          <dbl>      <dbl>      <dbl> #>  1 Ale04 Ale         [0,.,...] Ale04          3.43      -2.93      1.96   #>  2 Ale05 Ale         [1,0,...] Ale05          4.50      -0.306    -2.47   #>  3 Ale06 Ale         [.,0,...] Ale06          3.26      -2.58      3.51   #>  4 Ale08 Ale         [.,2,...] Ale08          2.47      -2.58      1.23   #>  5 Ale13 Ale         [0,.,...] Ale13          0.183     -2.49      2.29   #>  6 Ale15 Ale         [1,0,...] Ale15          2.93      -2.06      2.69   #>  7 Ale16 Ale         [0,.,...] Ale16          4.59      -3.10      2.60   #>  8 Ale17 Ale         [1,.,...] Ale17          4.18      -3.34      0.0791 #>  9 Ale18 Ale         [0,0,...] Ale18          2.68      -4.09      0.987  #> 10 Ale19 Ale         [2,.,...] Ale19          4.83      -0.820     2.91   #> # ℹ 166 more rows #> # ℹ 7 more variables: .fittedPC4 <dbl>, .fittedPC5 <dbl>, .fittedPC6 <dbl>, #> #   .fittedPC7 <dbl>, .fittedPC8 <dbl>, .fittedPC9 <dbl>, .fittedPC10 <dbl>  # Adjust the number of components to add augment(pca, data = lobsters, k = 2) #> # A gen_tibble: 79 loci #> # A tibble:     176 × 6 #>    id    population  genotypes .rownames .fittedPC1 .fittedPC2 #>    <chr> <chr>      <vctr_SNP> <chr>          <dbl>      <dbl> #>  1 Ale04 Ale         [0,.,...] Ale04          3.43      -2.93  #>  2 Ale05 Ale         [1,0,...] Ale05          4.50      -0.306 #>  3 Ale06 Ale         [.,0,...] Ale06          3.26      -2.58  #>  4 Ale08 Ale         [.,2,...] Ale08          2.47      -2.58  #>  5 Ale13 Ale         [0,.,...] Ale13          0.183     -2.49  #>  6 Ale15 Ale         [1,0,...] Ale15          2.93      -2.06  #>  7 Ale16 Ale         [0,.,...] Ale16          4.59      -3.10  #>  8 Ale17 Ale         [1,.,...] Ale17          4.18      -3.34  #>  9 Ale18 Ale         [0,0,...] Ale18          2.68      -4.09  #> 10 Ale19 Ale         [2,.,...] Ale19          4.83      -0.820 #> # ℹ 166 more rows"},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/augment_loci.html","id":null,"dir":"Reference","previous_headings":"","what":"Augment the loci table with information from a analysis object — augment_loci","title":"Augment the loci table with information from a analysis object — augment_loci","text":"augment_loci add columns loci table gen_tibble related information given analysis.","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/augment_loci.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Augment the loci table with information from a analysis object — augment_loci","text":"","code":"augment_loci(x, data, ...)"},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/augment_loci.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Augment the loci table with information from a analysis object — augment_loci","text":"x object returned one gt_ functions (e.g. gt_pca()). data gen_tibble used run PCA. ... Additional parameters passed individual methods.","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/augment_loci.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Augment the loci table with information from a analysis object — augment_loci","text":"loci tibble additional columns. data missing, tibble information, column .rownames giving loci names.","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/augment_loci.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Augment the loci table with information from a analysis object — augment_loci","text":"","code":"# Create a gen_tibble of lobster genotypes bed_file <-   system.file(\"extdata\", \"lobster\", \"lobster.bed\", package = \"tidypopgen\") lobsters <- gen_tibble(bed_file,   backingfile = tempfile(\"lobsters\"),   quiet = TRUE )  # Remove monomorphic loci and impute lobsters <- lobsters %>% select_loci_if(loci_maf(genotypes) > 0) lobsters <- gt_impute_simple(lobsters, method = \"mode\")  # Create PCA pca <- gt_pca_partialSVD(lobsters)  # Augment the gen_tibble with the PCA scores augment_loci(pca, data = lobsters) #> # A tibble: 79 × 17 #>    big_index name    chromosome position genetic_dist allele_ref allele_alt #>        <int> <chr>   <fct>         <int>        <dbl> <chr>      <chr>      #>  1         1 rs3441  1                 1            1 G          A          #>  2         2 rs4173  2                 2            2 C          T          #>  3         3 rs6157  3                 3            3 G          C          #>  4         4 rs7502  4                 4            4 C          T          #>  5         5 rs7892  5                 5            5 A          T          #>  6         6 rs9441  7                 7            7 A          G          #>  7         7 rs11071 8                 8            8 G          A          #>  8         8 rs11183 9                 9            9 A          G          #>  9         9 rs11291 10               10           10 T          G          #> 10        10 rs12971 11               11           11 A          G          #> # ℹ 69 more rows #> # ℹ 10 more variables: .loadingPC1 <dbl>, .loadingPC2 <dbl>, .loadingPC3 <dbl>, #> #   .loadingPC4 <dbl>, .loadingPC5 <dbl>, .loadingPC6 <dbl>, .loadingPC7 <dbl>, #> #   .loadingPC8 <dbl>, .loadingPC9 <dbl>, .loadingPC10 <dbl>"},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/augment_loci_gt_pca.html","id":null,"dir":"Reference","previous_headings":"","what":"Augment the loci table with information from a gt_pca object — augment_loci_gt_pca","title":"Augment the loci table with information from a gt_pca object — augment_loci_gt_pca","text":"Augment gt_pca accepts model object gen_tibble adds loadings locus loci table. Loadings component stored separate column, given name pattern \".loadingPC1\", \".loadingPC2\", etc. data missing, tibble loadings returned.","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/augment_loci_gt_pca.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Augment the loci table with information from a gt_pca object — augment_loci_gt_pca","text":"","code":"# S3 method for class 'gt_pca' augment_loci(x, data = NULL, k = NULL, ...)"},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/augment_loci_gt_pca.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Augment the loci table with information from a gt_pca object — augment_loci_gt_pca","text":"x gt_pca object returned one gt_pca_* functions. data gen_tibble used run PCA. k number components add ... used. Needed match generic signature .","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/augment_loci_gt_pca.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Augment the loci table with information from a gt_pca object — augment_loci_gt_pca","text":"gen_tibble loadings added loci tibble (accessible show_loci(). data missing, tibble loadings.","code":""},{"path":[]},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/augment_loci_gt_pca.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Augment the loci table with information from a gt_pca object — augment_loci_gt_pca","text":"","code":"# Create a gen_tibble of lobster genotypes bed_file <-   system.file(\"extdata\", \"lobster\", \"lobster.bed\", package = \"tidypopgen\") lobsters <- gen_tibble(bed_file,   backingfile = tempfile(\"lobsters\"),   quiet = TRUE )  # Remove monomorphic loci and impute lobsters <- lobsters %>% select_loci_if(loci_maf(genotypes) > 0) lobsters <- gt_impute_simple(lobsters, method = \"mode\")  # Create PCA pca <- gt_pca_partialSVD(lobsters)  # Augment the gen_tibble with the PCA scores augment_loci(pca, data = lobsters) #> # A tibble: 79 × 17 #>    big_index name    chromosome position genetic_dist allele_ref allele_alt #>        <int> <chr>   <fct>         <int>        <dbl> <chr>      <chr>      #>  1         1 rs3441  1                 1            1 G          A          #>  2         2 rs4173  2                 2            2 C          T          #>  3         3 rs6157  3                 3            3 G          C          #>  4         4 rs7502  4                 4            4 C          T          #>  5         5 rs7892  5                 5            5 A          T          #>  6         6 rs9441  7                 7            7 A          G          #>  7         7 rs11071 8                 8            8 G          A          #>  8         8 rs11183 9                 9            9 A          G          #>  9         9 rs11291 10               10           10 T          G          #> 10        10 rs12971 11               11           11 A          G          #> # ℹ 69 more rows #> # ℹ 10 more variables: .loadingPC1 <dbl>, .loadingPC2 <dbl>, .loadingPC3 <dbl>, #> #   .loadingPC4 <dbl>, .loadingPC5 <dbl>, .loadingPC6 <dbl>, .loadingPC7 <dbl>, #> #   .loadingPC8 <dbl>, .loadingPC9 <dbl>, .loadingPC10 <dbl>"},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/augment_q_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Augment data with information from a q_matrix object — augment_q_matrix","title":"Augment data with information from a q_matrix object — augment_q_matrix","text":"Augment q_matrix accepts model object dataset adds Q values observation dataset. Q values  stored separate columns, given name pattern \".Q1\",\".Q2\", etc. consistency broom::augment.prcomp, column \".rownames\" also returned; copy 'id', ensures scripts written data augmented broom::augment.prcomp work box (especially helpful adapting plotting scripts).","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/augment_q_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Augment data with information from a q_matrix object — augment_q_matrix","text":"","code":"# S3 method for class 'q_matrix' augment(x, data = NULL, ...)"},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/augment_q_matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Augment data with information from a q_matrix object — augment_q_matrix","text":"x q_matrix object data gen_tibble used run clustering algorithm ... used. Needed match generic signature .","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/augment_q_matrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Augment data with information from a q_matrix object — augment_q_matrix","text":" gen_tibble containing original data along additional columns containing observation's Q values.","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/augment_q_matrix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Augment data with information from a q_matrix object — augment_q_matrix","text":"","code":"# run the example only if we have the package installed if (requireNamespace(\"LEA\", quietly = TRUE)) {   example_gt <- load_example_gt(\"gen_tbl\")    # Create a gt_admix object   admix_obj <- example_gt %>% gt_snmf(k = 1:3, project = \"force\")    # Extract a Q matrix   q_mat_k3 <- get_q_matrix(admix_obj, k = 3, run = 1)    # Augment the gen_tibble with Q values   augment(q_mat_k3, data = example_gt) } #> # A gen_tibble: 6 loci #> # A tibble:     7 × 7 #>   id    population  genotypes .rownames .Q1        .Q2        .Q3        #>   <chr> <chr>      <vctr_SNP> <chr>     <q_matrix> <q_matrix> <q_matrix> #> 1 a     pop1        [1,1,...] a         9.998e-01  9.999e-05  9.999e-05  #> 2 b     pop1        [2,1,...] b         9.999e-05  9.998e-01  9.999e-05  #> 3 c     pop2        [2,.,...] c         9.999e-05  9.999e-05  9.998e-01  #> 4 d     pop2        [1,0,...] d         9.998e-01  9.999e-05  9.999e-05  #> 5 e     pop1        [1,2,...] e         9.998e-01  9.999e-05  9.999e-05  #> 6 f     pop3        [0,0,...] f         9.999e-05  9.999e-05  9.998e-01  #> 7 g     pop3        [0,1,...] g         9.999e-05  9.999e-05  9.998e-01"},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/autoplot.qc_report_indiv.html","id":null,"dir":"Reference","previous_headings":"","what":"Autoplots for qc_report_indiv objects — autoplot.qc_report_indiv","title":"Autoplots for qc_report_indiv objects — autoplot.qc_report_indiv","text":"qc_report_indiv, following types plots available: scatter: plot missingness observed heterozygosity within individuals. relatedness: histogram paired kinship coefficients","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/autoplot.qc_report_indiv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Autoplots for qc_report_indiv objects — autoplot.qc_report_indiv","text":"","code":"# S3 method for class 'qc_report_indiv' autoplot(   object,   type = c(\"scatter\", \"relatedness\"),   miss_threshold = 0.05,   kings_threshold = NULL,   ... )"},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/autoplot.qc_report_indiv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Autoplots for qc_report_indiv objects — autoplot.qc_report_indiv","text":"object object class qc_report_indiv type type plot (scatter,relatedness) miss_threshold threshold accepted rate missingness within individuals kings_threshold optional numeric, threshold relatedness sample ... currently used.","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/autoplot.qc_report_indiv.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Autoplots for qc_report_indiv objects — autoplot.qc_report_indiv","text":"ggplot2 object","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/autoplot.qc_report_indiv.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Autoplots for qc_report_indiv objects — autoplot.qc_report_indiv","text":"autoplot produces simple plots quickly inspect object. customisable; recommend use ggplot2 produce publication ready plots.","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/autoplot.qc_report_indiv.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Autoplots for qc_report_indiv objects — autoplot.qc_report_indiv","text":"","code":"# Create a gen_tibble of lobster genotypes bed_file <-   system.file(\"extdata\", \"lobster\", \"lobster.bed\", package = \"tidypopgen\") example_gt <- gen_tibble(bed_file,   backingfile = tempfile(\"lobsters\"),   quiet = TRUE )  # Create QC report for individuals indiv_report <- example_gt %>% qc_report_indiv()  # Autoplot missingness and observed heterozygosity autoplot(indiv_report, type = \"scatter\", miss_threshold = 0.1)   # Create QC report with kinship filtering indiv_report_rel <-   example_gt %>% qc_report_indiv(kings_threshold = \"second\")  # Autoplot relatedness autoplot(indiv_report_rel, type = \"relatedness\", kings_threshold = \"second\") #> Warning: Removed 178 rows containing non-finite outside the scale range (`stat_bin()`)."},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/autoplot.qc_report_loci.html","id":null,"dir":"Reference","previous_headings":"","what":"Autoplots for qc_report_loci objects — autoplot.qc_report_loci","title":"Autoplots for qc_report_loci objects — autoplot.qc_report_loci","text":"qc_report_loci, following types plots available: overview: UpSet plot, giving counts snps threshold missingness, minor allele frequency, Hardy-Weinberg equilibrium P-value, visualising interaction : four panel plot, containing missing high maf, missing low maf, hwe, significant hwe plots missing: histogram proportion missing data missing low maf: histogram proportion missing data snps low minor allele frequency missing high maf:histogram proportion missing data snps high minor allele frequency maf: histogram minor allele frequency hwe: histogram HWE exact test p-values significant hwe: histogram significant HWE exact test p-values","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/autoplot.qc_report_loci.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Autoplots for qc_report_loci objects — autoplot.qc_report_loci","text":"","code":"# S3 method for class 'qc_report_loci' autoplot(   object,   type = c(\"overview\", \"all\", \"missing\", \"missing low maf\", \"missing high maf\", \"maf\",     \"hwe\", \"significant hwe\"),   maf_threshold = 0.05,   miss_threshold = 0.01,   hwe_p = 0.01,   ... )"},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/autoplot.qc_report_loci.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Autoplots for qc_report_loci objects — autoplot.qc_report_loci","text":"object object class qc_report_loci type type plot (one overview, , missing, missing low maf, missing high maf, maf, hwe, significant hwe) maf_threshold default 0.05, threshold accepted rate minor allele frequency loci miss_threshold default 0.01, threshold accepted rate missingness per loci hwe_p default 0.01, threshold significance Hardy-Weinberg exact p-values ... currently used.","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/autoplot.qc_report_loci.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Autoplots for qc_report_loci objects — autoplot.qc_report_loci","text":"ggplot2 object","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/autoplot.qc_report_loci.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Autoplots for qc_report_loci objects — autoplot.qc_report_loci","text":"autoplot produces simple plots quickly inspect object. customisable; recommend use ggplot2 produce publication ready plots.","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/autoplot.qc_report_loci.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Autoplots for qc_report_loci objects — autoplot.qc_report_loci","text":"","code":"# Create a gen_tibble bed_file <-   system.file(\"extdata\", \"related\", \"families.bed\", package = \"tidypopgen\") example_gt <- gen_tibble(bed_file,   backingfile = tempfile(\"families\"),   quiet = TRUE,   valid_alleles = c(\"1\", \"2\") )  loci_report <- example_gt %>% qc_report_loci() #> This gen_tibble is not grouped. For Hardy-Weinberg equilibrium, `qc_report_loci()` will assume individuals are part of the same population and HWE test p-values will be calculated across all individuals. If you wish to calculate HWE p-values within populations or groups, please use`group_by()` before calling `qc_report_loci()`.  # Plot the QC report overview autoplot(loci_report, type = \"overview\") #> Warning: `aes_string()` was deprecated in ggplot2 3.0.0. #> ℹ Please use tidy evaluation idioms with `aes()`. #> ℹ See also `vignette(\"ggplot2-in-packages\")` for more information. #> ℹ The deprecated feature was likely used in the UpSetR package. #>   Please report the issue to the authors. #> Warning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0. #> ℹ Please use `linewidth` instead. #> ℹ The deprecated feature was likely used in the UpSetR package. #>   Please report the issue to the authors. #> Warning: The `size` argument of `element_line()` is deprecated as of ggplot2 3.4.0. #> ℹ Please use the `linewidth` argument instead. #> ℹ The deprecated feature was likely used in the UpSetR package. #>   Please report the issue to the authors.   # Plot the QC report all autoplot(loci_report, type = \"all\")   # Plot missing data autoplot(loci_report, type = \"missing\")   # Plot missing with low maf autoplot(loci_report, type = \"missing low maf\", maf_threshold = 0.05)   # Plot missing with high maf autoplot(loci_report, type = \"missing high maf\", maf_threshold = 0.05)   # Plot maf autoplot(loci_report, type = \"maf\", maf_threshold = 0.05)   # Plot hwe autoplot(loci_report, type = \"hwe\", hwe_p = 0.01)   # Plot significant hwe autoplot(loci_report, type = \"significant hwe\", hwe_p = 0.01)"},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/autoplot_gt_admix.html","id":null,"dir":"Reference","previous_headings":"","what":"Autoplots for gt_admix objects — autoplot_gt_admix","title":"Autoplots for gt_admix objects — autoplot_gt_admix","text":"gt_admix, following types plots available: cv: cross-validation error value k barplot standard barplot admixture proportions","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/autoplot_gt_admix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Autoplots for gt_admix objects — autoplot_gt_admix","text":"","code":"# S3 method for class 'gt_admix' autoplot(object, type = c(\"cv\", \"barplot\"), k = NULL, run = NULL, ...)"},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/autoplot_gt_admix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Autoplots for gt_admix objects — autoplot_gt_admix","text":"object object class gt_admixture type type plot (one \"cv\", \"barplot\") k value k plot (barplot type ) param repeat repeat plot (barplot type ) run run plot (barplot type ) ... additional arguments passed autoplot method q_matrices autoplot_q_matrix(), used type barplot.","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/autoplot_gt_admix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Autoplots for gt_admix objects — autoplot_gt_admix","text":"ggplot2 object","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/autoplot_gt_admix.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Autoplots for gt_admix objects — autoplot_gt_admix","text":"autoplot produces simple plots quickly inspect object. customisable; recommend use ggplot2 produce publication ready plots. autoplot automatically rearrange individuals according id grouping variables associated 'data' gen_tibble provided. avoid automatic re-sorting individuals, set arrange_by_group arrange_by_indiv FALSE. See autoplot.q_matrix details.","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/autoplot_gt_admix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Autoplots for gt_admix objects — autoplot_gt_admix","text":"","code":"# Read example gt_admix object admix_obj <-   readRDS(system.file(\"extdata\", \"anolis\", \"anole_adm_k3.rds\",     package = \"tidypopgen\"   )) # Cross-validation plot autoplot(admix_obj, type = \"cv\")   # Basic barplot autoplot(admix_obj, k = 3, run = 1, type = \"barplot\")   # Barplot with individuals arranged by Q proportion # (using additional arguments, see `autoplot.q_matrix` for details) autoplot(admix_obj,   k = 3, run = 1, type = \"barplot\", annotate_group = TRUE,   arrange_by_group = TRUE, arrange_by_indiv = TRUE,   reorder_within_groups = TRUE )"},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/autoplot_gt_cluster_pca.html","id":null,"dir":"Reference","previous_headings":"","what":"Autoplots for gt_cluster_pca objects — autoplot.gt_cluster_pca","title":"Autoplots for gt_cluster_pca objects — autoplot.gt_cluster_pca","text":"gt_cluster_pca, autoplot produces plot metric choice ('BIC', 'AIC' 'WSS') number clusters (k). plot can used infer best value k, corresponds smallest value metric (minimum 'elbow' shaped curve). cases, 'elbow' metric keeps decreasing increasing k; cases, customary choose value k decrease metric reaches plateau. programmatic way choosing k, use gt_cluster_pca_best_k().","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/autoplot_gt_cluster_pca.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Autoplots for gt_cluster_pca objects — autoplot.gt_cluster_pca","text":"","code":"# S3 method for class 'gt_cluster_pca' autoplot(object, metric = c(\"BIC\", \"AIC\", \"WSS\"), ...)"},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/autoplot_gt_cluster_pca.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Autoplots for gt_cluster_pca objects — autoplot.gt_cluster_pca","text":"object object class gt_dapc metric metric plot y axis, one 'BIC', 'AIC', 'WSS' (sum squares) ... currently used.","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/autoplot_gt_cluster_pca.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Autoplots for gt_cluster_pca objects — autoplot.gt_cluster_pca","text":"ggplot2 object","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/autoplot_gt_cluster_pca.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Autoplots for gt_cluster_pca objects — autoplot.gt_cluster_pca","text":"autoplot produces simple plots quickly inspect object. customisable; recommend use ggplot2 produce publication ready plots.","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/autoplot_gt_cluster_pca.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Autoplots for gt_cluster_pca objects — autoplot.gt_cluster_pca","text":"","code":"# Create a gen_tibble of lobster genotypes bed_file <-   system.file(\"extdata\", \"lobster\", \"lobster.bed\", package = \"tidypopgen\") lobsters <- gen_tibble(bed_file,   backingfile = tempfile(\"lobsters\"),   quiet = TRUE )  # Remove monomorphic loci and impute lobsters <- lobsters %>% select_loci_if(loci_maf(genotypes) > 0) lobsters <- gt_impute_simple(lobsters, method = \"mode\")  # Create PCA object pca <- gt_pca_partialSVD(lobsters)  # Run clustering on the first 10 PCs cluster_pca <- gt_cluster_pca(   x = pca,   n_pca = 10,   k_clusters = c(1, 5),   method = \"kmeans\",   n_iter = 1e5,   n_start = 10,   quiet = FALSE )  # Autoplot BIC autoplot(cluster_pca, metric = \"BIC\")   # # Autoplot AIC autoplot(cluster_pca, metric = \"AIC\")   # # Autoplot WSS autoplot(cluster_pca, metric = \"WSS\")"},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/autoplot_gt_dapc.html","id":null,"dir":"Reference","previous_headings":"","what":"Autoplots for gt_dapc objects — autoplot.gt_dapc","title":"Autoplots for gt_dapc objects — autoplot.gt_dapc","text":"gt_dapc, following types plots available: screeplot: plot eigenvalues discriminant axes scores scatterplot scores individual two discriminant axes (defined ld) loadings plot loadings loci discriminant axis (chosen ld) components bar plot showing probability assignment cluster","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/autoplot_gt_dapc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Autoplots for gt_dapc objects — autoplot.gt_dapc","text":"","code":"# S3 method for class 'gt_dapc' autoplot(   object,   type = c(\"screeplot\", \"scores\", \"loadings\", \"components\"),   ld = NULL,   group = NULL,   n_col = 1,   ... )"},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/autoplot_gt_dapc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Autoplots for gt_dapc objects — autoplot.gt_dapc","text":"object object class gt_dapc type type plot (one \"screeplot\", \"scores\", \"loadings\", \"components\") ld principal components plotted: scores, pair values e.g. c(1,2); loadings either one values. group vector group memberships order individuals \"components\" plot. NULL, clusters used DAPC used. n_col loadings plots, multiple LD axis plotted, many columns used. ... currently used.","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/autoplot_gt_dapc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Autoplots for gt_dapc objects — autoplot.gt_dapc","text":"ggplot2 object","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/autoplot_gt_dapc.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Autoplots for gt_dapc objects — autoplot.gt_dapc","text":"autoplot produces simple plots quickly inspect object. customisable; recommend use ggplot2 produce publication ready plots.","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/autoplot_gt_dapc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Autoplots for gt_dapc objects — autoplot.gt_dapc","text":"","code":"# Create a gen_tibble of lobster genotypes bed_file <-   system.file(\"extdata\", \"lobster\", \"lobster.bed\", package = \"tidypopgen\") lobsters <- gen_tibble(bed_file,   backingfile = tempfile(\"lobsters\"),   quiet = TRUE )  # Remove monomorphic loci and impute lobsters <- lobsters %>% select_loci_if(loci_maf(genotypes) > 0) lobsters <- gt_impute_simple(lobsters, method = \"mode\")  # Create PCA and run DAPC pca <- gt_pca_partialSVD(lobsters) populations <- as.factor(lobsters$population) dapc_res <- gt_dapc(pca, n_pca = 6, n_da = 2, pop = populations)  # Screeplot autoplot(dapc_res, type = \"screeplot\")   # Scores plot autoplot(dapc_res, type = \"scores\", ld = c(1, 2))   # Loadings plot autoplot(dapc_res, type = \"loadings\", ld = 1)   # Components plot autoplot(dapc_res, type = \"components\", group = populations) #> Warning: Ignoring unknown parameters: `size`"},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/autoplot_gt_pca.html","id":null,"dir":"Reference","previous_headings":"","what":"Autoplots for gt_pca objects — autoplot_gt_pca","title":"Autoplots for gt_pca objects — autoplot_gt_pca","text":"gt_pca, following types plots available: screeplot: plot eigenvalues principal components (currently plots singular value) scores scatterplot scores individual two principal components (defined pc) loadings plot loadings loci given component (chosen pc)","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/autoplot_gt_pca.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Autoplots for gt_pca objects — autoplot_gt_pca","text":"","code":"# S3 method for class 'gt_pca' autoplot(object, type = c(\"screeplot\", \"scores\", \"loadings\"), k = NULL, ...)"},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/autoplot_gt_pca.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Autoplots for gt_pca objects — autoplot_gt_pca","text":"object object class gt_pca type type plot (one \"screeplot\", \"scores\" \"loadings\") k principal components plotted: scores, pair values e.g. c(1,2); loadings either one values. ... currently used.","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/autoplot_gt_pca.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Autoplots for gt_pca objects — autoplot_gt_pca","text":"ggplot2 object","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/autoplot_gt_pca.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Autoplots for gt_pca objects — autoplot_gt_pca","text":"autoplot produces simple plots quickly inspect object. customisable; recommend use ggplot2 produce publication ready plots.","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/autoplot_gt_pca.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Autoplots for gt_pca objects — autoplot_gt_pca","text":"","code":"library(ggplot2) # Create a gen_tibble of lobster genotypes bed_file <-   system.file(\"extdata\", \"lobster\", \"lobster.bed\", package = \"tidypopgen\") lobsters <- gen_tibble(bed_file,   backingfile = tempfile(\"lobsters\"),   quiet = TRUE )  # Remove monomorphic loci and impute lobsters <- lobsters %>% select_loci_if(loci_maf(genotypes) > 0) lobsters <- gt_impute_simple(lobsters, method = \"mode\")  # Create PCA object pca <- gt_pca_partialSVD(lobsters)  # Screeplot autoplot(pca, type = \"screeplot\")   # Scores plot autoplot(pca, type = \"scores\")   # Colour by population autoplot(pca, type = \"scores\") + aes(colour = lobsters$population)   # Scores plot of different components autoplot(pca, type = \"scores\", k = c(1, 3)) +   aes(colour = lobsters$population)"},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/autoplot_gt_pcadapt.html","id":null,"dir":"Reference","previous_headings":"","what":"Autoplots for gt_pcadapt objects — autoplot_gt_pcadapt","title":"Autoplots for gt_pcadapt objects — autoplot_gt_pcadapt","text":"gt_pcadapt, following types plots available: qq: quantile-quantile plot p-values pcadapt (wrapping bigsnpr::snp_qq()) manhattan manhattan plot p-values pcadapt (wrapping bigsnpr::snp_manhattan())","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/autoplot_gt_pcadapt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Autoplots for gt_pcadapt objects — autoplot_gt_pcadapt","text":"","code":"# S3 method for class 'gt_pcadapt' autoplot(object, type = c(\"qq\", \"manhattan\"), ...)"},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/autoplot_gt_pcadapt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Autoplots for gt_pcadapt objects — autoplot_gt_pcadapt","text":"object object class gt_pcadapt type type plot (one \"qq\", \"manhattan\") ... arguments passed bigsnpr::snp_qq() bigsnpr::snp_manhattan().","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/autoplot_gt_pcadapt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Autoplots for gt_pcadapt objects — autoplot_gt_pcadapt","text":"ggplot2 object","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/autoplot_gt_pcadapt.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Autoplots for gt_pcadapt objects — autoplot_gt_pcadapt","text":"autoplot produces simple plots quickly inspect object. customisable; recommend use ggplot2 produce publication ready plots.","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/autoplot_gt_pcadapt.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Autoplots for gt_pcadapt objects — autoplot_gt_pcadapt","text":"","code":"# Create a gen_tibble of lobster genotypes bed_file <-   system.file(\"extdata\", \"lobster\", \"lobster.bed\", package = \"tidypopgen\") lobsters <- gen_tibble(bed_file,   backingfile = tempfile(\"lobsters\"),   quiet = TRUE )  # Remove monomorphic loci and impute lobsters <- lobsters %>% select_loci_if(loci_maf(genotypes) > 0) lobsters <- gt_impute_simple(lobsters, method = \"mode\")  # Create PCA object pca <- gt_pca_partialSVD(lobsters)  # Create a gt_pcadapt object pcadapt_obj <- gt_pcadapt(lobsters, pca, k = 2)  # Plot the p-values from pcadapt autoplot(pcadapt_obj, type = \"qq\")   # Plot the manhattan plot of the p-values from pcadapt autoplot(pcadapt_obj, type = \"manhattan\")"},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/autoplot_q_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Autoplots for q_matrix objects — autoplot_q_matrix","title":"Autoplots for q_matrix objects — autoplot_q_matrix","text":"autoplot automatically rearrange individuals according id grouping variables associated 'data' gen_tibble provided. avoid automatic re-sorting individuals, set arrange_by_group arrange_by_indiv FALSE.","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/autoplot_q_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Autoplots for q_matrix objects — autoplot_q_matrix","text":"","code":"# S3 method for class 'q_matrix' autoplot(   object,   data = NULL,   annotate_group = TRUE,   arrange_by_group = TRUE,   arrange_by_indiv = TRUE,   reorder_within_groups = FALSE,   ... )"},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/autoplot_q_matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Autoplots for q_matrix objects — autoplot_q_matrix","text":"object Q matrix object (returned q_matrix()). data associated tibble (e.g. gen_tibble), individuals order data used generate Q matrix annotate_group Boolean determining whether annotate plot group information arrange_by_group Boolean determining whether arrange individuals group. grouping variable gen_tibble metadata gt_admixt object factor, data ordered levels factor; else ordered alphabetically. arrange_by_indiv Boolean determining whether arrange individuals individual id (arrange_by_group TRUE, arranged group first individual id, .e. within group). id get_tibble metadata gt_admix object factor, ordered levels factor; else ordered alphabetically. reorder_within_groups Boolean determining whether reorder individuals within group based ancestry proportion (note advised making multiple plots, get different order plot!). TRUE, annotate_group must also TRUE. ... currently used.","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/autoplot_q_matrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Autoplots for q_matrix objects — autoplot_q_matrix","text":"barplot individuals, coloured ancestry proportion","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/autoplot_q_matrix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Autoplots for q_matrix objects — autoplot_q_matrix","text":"","code":"# Read example gt_admix obejct admix_obj <-   readRDS(system.file(\"extdata\", \"anolis\", \"anole_adm_k3.rds\",     package = \"tidypopgen\"   ))  # Extract a Q matrix q_mat_k3 <- get_q_matrix(admix_obj, k = 3, run = 1)  # Basic autoplot autoplot(q_mat_k3, annotate_group = FALSE, arrange_by_group = FALSE)   # To arrange individuals by group and by Q proportion autoplot(q_mat_k3,   annotate_group = TRUE, arrange_by_group = TRUE,   arrange_by_indiv = TRUE, reorder_within_groups = TRUE )"},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/c.gt_admix.html","id":null,"dir":"Reference","previous_headings":"","what":"Combine method for gt_admix objects — c.gt_admix","title":"Combine method for gt_admix objects — c.gt_admix","text":"Combine method gt_admix objects","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/c.gt_admix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Combine method for gt_admix objects — c.gt_admix","text":"","code":"# S3 method for class 'gt_admix' c(..., match_attributes = TRUE)"},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/c.gt_admix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Combine method for gt_admix objects — c.gt_admix","text":"... list gt_admix objects match_attributes boolean, determining whether attributes (id, group algorithm) gt_admix objects combined must exact match (TRUE, default), whether non-matching attributes ignored (FALSE)","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/c.gt_admix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Combine method for gt_admix objects — c.gt_admix","text":"gt_admix object combined data","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/c.gt_admix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Combine method for gt_admix objects — c.gt_admix","text":"","code":"# run the example only if we have the package installed if (requireNamespace(\"LEA\", quietly = TRUE)) {   example_gt <- load_example_gt(\"gen_tbl\")    # Create a gt_admix object   admix_obj <- example_gt %>% gt_snmf(k = 1:3, project = \"force\")    # Create a second gt_admix object   admix_obj2 <- example_gt %>% gt_snmf(k = 2:4, project = \"force\")    # Combine the two gt_admix objects   new_admix_obj <- c(admix_obj, admix_obj2)   summary(new_admix_obj) } #> Admixture results for multiple runs:          #> k 1 2 3 4 #> n 1 2 2 1 #> with slots: #> $Q for Q matrices #> $P for  matrices #> $log for logs from the algorithm"},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/cash-set-.gen_tbl.html","id":null,"dir":"Reference","previous_headings":"","what":"A $ method for gen_tibble objects — $<-.gen_tbl","title":"A $ method for gen_tibble objects — $<-.gen_tbl","text":"$ method gen_tibble objects","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/cash-set-.gen_tbl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A $ method for gen_tibble objects — $<-.gen_tbl","text":"","code":"# S3 method for class 'gen_tbl' x$i <- value"},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/cash-set-.gen_tbl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A $ method for gen_tibble objects — $<-.gen_tbl","text":"x gen_tibble column name value value assign","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/cash-set-.gen_tbl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A $ method for gen_tibble objects — $<-.gen_tbl","text":"gen_tibble","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/cash-set-.gen_tbl.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A $ method for gen_tibble objects — $<-.gen_tbl","text":"","code":"example_gt <- load_example_gt(\"gen_tbl\")  # Add a new column example_gt$region <- \"East\"  example_gt #> # A gen_tibble: 6 loci #> # A tibble:     7 × 4 #>   id    population  genotypes region #>   <chr> <chr>      <vctr_SNP> <chr>  #> 1 a     pop1        [1,1,...] East   #> 2 b     pop1        [2,1,...] East   #> 3 c     pop2        [2,.,...] East   #> 4 d     pop2        [1,0,...] East   #> 5 e     pop1        [1,2,...] East   #> 6 f     pop3        [0,0,...] East   #> 7 g     pop3        [0,1,...] East"},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/cbind.gen_tbl.html","id":null,"dir":"Reference","previous_headings":"","what":"Combine a gen_tibble to a data.frame or tibble by column — cbind.gen_tbl","title":"Combine a gen_tibble to a data.frame or tibble by column — cbind.gen_tbl","text":"cbind() method merge gen_tibble objects data.frames normal tibbles. Whilst works, ideal check order tables, suggest use dplyr::left_join() instead. Note cbind combine two gen_tibbles (.e. combine markers individuals)","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/cbind.gen_tbl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Combine a gen_tibble to a data.frame or tibble by column — cbind.gen_tbl","text":"","code":"# S3 method for class 'gen_tbl' cbind(..., deparse.level = 1)"},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/cbind.gen_tbl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Combine a gen_tibble to a data.frame or tibble by column — cbind.gen_tbl","text":"... gen_tibble data.frame tibble deparse.level integer controlling construction column names. See cbind details.","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/cbind.gen_tbl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Combine a gen_tibble to a data.frame or tibble by column — cbind.gen_tbl","text":"gen_tibble","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/cbind.gen_tbl.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Combine a gen_tibble to a data.frame or tibble by column — cbind.gen_tbl","text":"","code":"example_gt <- load_example_gt(\"gen_tbl\")  # Create a dataframe to combine with the gen_tibble df <- data.frame(region = c(\"A\", \"A\", \"B\", \"B\", \"A\", \"B\", \"B\"))  # Combine the gen_tibble with the dataframe example_gt <- cbind(example_gt, df)"},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/count_loci.html","id":null,"dir":"Reference","previous_headings":"","what":"Count the number of loci in a gen_tibble — count_loci","title":"Count the number of loci in a gen_tibble — count_loci","text":"Count number loci gen_tibble (directly genotype column).","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/count_loci.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Count the number of loci in a gen_tibble — count_loci","text":"","code":"count_loci(.x, ...)  # S3 method for class 'tbl_df' count_loci(.x, ...)  # S3 method for class 'vctrs_bigSNP' count_loci(.x, ...)"},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/count_loci.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Count the number of loci in a gen_tibble — count_loci","text":".x gen_tibble, vector class vctrs_bigSNP (usually genotype column gen_tibble object). ... currently unused.","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/count_loci.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Count the number of loci in a gen_tibble — count_loci","text":"number loci","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/count_loci.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Count the number of loci in a gen_tibble — count_loci","text":"","code":"example_gt <- load_example_gt(\"gen_tbl\")  example_gt %>% count_loci() #> [1] 6"},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/distruct_colours.html","id":null,"dir":"Reference","previous_headings":"","what":"Distruct colours — distruct_colours","title":"Distruct colours — distruct_colours","text":"Colours palette used distruct","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/distruct_colours.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Distruct colours — distruct_colours","text":"","code":"distruct_colours"},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/distruct_colours.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Distruct colours — distruct_colours","text":"vector 60 hex colours","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/filter.gen_tbl.html","id":null,"dir":"Reference","previous_headings":"","what":"Tidyverse methods for gt objects — filter.gen_tbl","title":"Tidyverse methods for gt objects — filter.gen_tbl","text":"filter method gen_tibble objects","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/filter.gen_tbl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tidyverse methods for gt objects — filter.gen_tbl","text":"","code":"# S3 method for class 'gen_tbl' filter(..., deparse.level = 1)"},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/filter.gen_tbl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tidyverse methods for gt objects — filter.gen_tbl","text":"... gen_tibble data.frame tibble deparse.level integer controlling construction column names.","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/filter.gen_tbl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Tidyverse methods for gt objects — filter.gen_tbl","text":"gen_tibble","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/filter.gen_tbl.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Tidyverse methods for gt objects — filter.gen_tbl","text":"","code":"test_gt <- load_example_gt(\"gen_tbl\") test_gt %>% filter(id %in% c(\"a\", \"c\")) #> # A gen_tibble: 6 loci #> # A tibble:     2 × 3 #>   id    population  genotypes #>   <chr> <chr>      <vctr_SNP> #> 1 a     pop1        [1,1,...] #> 2 c     pop2        [2,.,...]"},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/filter.grouped_gen_tbl.html","id":null,"dir":"Reference","previous_headings":"","what":"A filter method for grouped gen_tibble objects — filter.grouped_gen_tbl","title":"A filter method for grouped gen_tibble objects — filter.grouped_gen_tbl","text":"filter method grouped gen_tibble objects","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/filter.grouped_gen_tbl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A filter method for grouped gen_tibble objects — filter.grouped_gen_tbl","text":"","code":"# S3 method for class 'grouped_gen_tbl' filter(..., deparse.level = 1)"},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/filter.grouped_gen_tbl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A filter method for grouped gen_tibble objects — filter.grouped_gen_tbl","text":"... gen_tibble data.frame tibble deparse.level integer controlling construction column names.","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/filter.grouped_gen_tbl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A filter method for grouped gen_tibble objects — filter.grouped_gen_tbl","text":"grouped gen_tibble","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/filter.grouped_gen_tbl.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A filter method for grouped gen_tibble objects — filter.grouped_gen_tbl","text":"","code":"test_gt <- load_example_gt(\"grouped_gen_tbl\") test_gt %>% filter(id %in% c(\"a\", \"c\")) #> # A gen_tibble: 6 loci #> # A tibble:     2 × 3 #> # Groups:       population [2] #>   id    population  genotypes #>   <chr> <chr>      <vctr_SNP> #> 1 a     pop1        [1,1,...] #> 2 c     pop2        [2,.,...] test_gt <- load_example_gt(\"grouped_gen_tbl_sf\") test_gt %>% filter(id %in% c(\"a\", \"c\")) #> Simple feature collection with 2 features and 5 fields #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: 0 ymin: 49 xmax: 2 ymax: 51 #> Geodetic CRS:  WGS 84 #> # A gen_tibble: 6 loci #> # A tibble:     2 × 6 #> # Groups:       population [2] #>   id    population longitude latitude  genotypes    geometry #> * <chr> <chr>          <dbl>    <dbl> <vctr_SNP> <POINT [°]> #> 1 a     pop1               0       51  [1,1,...]      (0 51) #> 2 c     pop2               2       49  [2,.,...]      (2 49)"},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/filter_high_relatedness.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter individuals based on a relationship threshold — filter_high_relatedness","title":"Filter individuals based on a relationship threshold — filter_high_relatedness","text":"function takes matrix x y individuals containing relatedness coefficients returns maximum set individuals contains relationships given threshold.","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/filter_high_relatedness.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter individuals based on a relationship threshold — filter_high_relatedness","text":"","code":"filter_high_relatedness(   matrix,   .x = NULL,   kings_threshold = NULL,   verbose = FALSE )"},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/filter_high_relatedness.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter individuals based on a relationship threshold — filter_high_relatedness","text":"matrix square symmetric matrix individuals containing relationship coefficients .x gen_tibble object kings_threshold threshold verbose boolean whether report screen","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/filter_high_relatedness.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filter individuals based on a relationship threshold — filter_high_relatedness","text":"list '1' individual ID's retain, '2' individual ID's remove, '3' boolean individuals keep TRUE individuals remove FALSE","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/filter_high_relatedness.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Filter individuals based on a relationship threshold — filter_high_relatedness","text":"","code":"example_gt <- load_example_gt(\"gen_tbl\")  # Calculate relationship matrix king_matrix <- example_gt %>% pairwise_king(as_matrix = TRUE)  # Filter individuals with threshold above 0.2 filter_high_relatedness(king_matrix, example_gt, kings_threshold = 0.2) #> [[1]] #> [1] \"c\" \"d\" #>  #> [[2]] #> [1] \"a\" \"b\" \"e\" \"f\" \"g\" #>  #> [[3]] #> [1] FALSE FALSE  TRUE  TRUE FALSE FALSE FALSE #>"},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/find_duplicated_loci.html","id":null,"dir":"Reference","previous_headings":"","what":"Find duplicates in the loci table — find_duplicated_loci","title":"Find duplicates in the loci table — find_duplicated_loci","text":"function finds duplicated SNPs checking positions within chromosome. can return list duplicated SNPs logical value indicating whether duplicated loci.","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/find_duplicated_loci.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find duplicates in the loci table — find_duplicated_loci","text":"","code":"find_duplicated_loci(.x, error_on_false = FALSE, list_duplicates = TRUE, ...)"},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/find_duplicated_loci.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find duplicates in the loci table — find_duplicated_loci","text":".x vector class vctrs_bigSNP (usually genotype column gen_tibble object), gen_tibble. error_on_false logical, TRUE error thrown duplicated loci found. list_duplicates logical, TRUE returns duplicated SNP names. ... arguments passed specific methods.","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/find_duplicated_loci.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find duplicates in the loci table — find_duplicated_loci","text":"list_duplicates TRUE, returns character vector duplicated loci names (character(0) none). list_duplicates FALSE, returns TRUE duplicates exist FALSE duplicates present. error_on_false TRUE duplicates exist, error thrown.","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/find_duplicated_loci.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find duplicates in the loci table — find_duplicated_loci","text":"","code":"example_gt <- load_example_gt(\"gen_tbl\") show_loci(example_gt) <- test_loci <- data.frame(   big_index = c(1:6),   name = paste0(\"rs\", 1:6),   chromosome = paste0(\"chr\", c(1, 1, 1, 1, 1, 1)),   position = as.integer(c(3, 3, 5, 65, 343, 46)),   genetic_dist = as.double(rep(0, 6)),   allele_ref = c(\"A\", \"T\", \"C\", \"G\", \"C\", \"T\"),   allele_alt = c(\"T\", \"C\", NA, \"C\", \"G\", \"A\") )  show_loci(example_gt) #> # A tibble: 6 × 7 #>   big_index name  chromosome position genetic_dist allele_ref allele_alt #>       <int> <chr> <fct>         <int>        <dbl> <chr>      <chr>      #> 1         1 rs1   chr1              3            0 A          T          #> 2         2 rs2   chr1              3            0 T          C          #> 3         3 rs3   chr1              5            0 C          NA         #> 4         4 rs4   chr1             65            0 G          C          #> 5         5 rs5   chr1            343            0 C          G          #> 6         6 rs6   chr1             46            0 T          A           # Find which loci are duplicated example_gt %>% find_duplicated_loci() #> [1] \"rs1\" \"rs2\""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/gen_tibble.html","id":null,"dir":"Reference","previous_headings":"","what":"Constructor for a gen_tibble — gen_tibble","title":"Constructor for a gen_tibble — gen_tibble","text":"gen_tibble stores genotypes individuals tidy format. DESCRIBE format","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/gen_tibble.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Constructor for a gen_tibble — gen_tibble","text":"","code":"gen_tibble(   x,   ...,   valid_alleles = c(\"A\", \"T\", \"C\", \"G\"),   missing_alleles = c(\"0\", \".\"),   backingfile = NULL,   allow_duplicates = FALSE,   quiet = FALSE )  # S3 method for class 'character' gen_tibble(   x,   ...,   parser = c(\"cpp\", \"vcfR\"),   n_cores = 1,   chunk_size = NULL,   valid_alleles = c(\"A\", \"T\", \"C\", \"G\"),   missing_alleles = c(\"0\", \".\"),   backingfile = NULL,   allow_duplicates = FALSE,   quiet = FALSE )  # S3 method for class 'matrix' gen_tibble(   x,   indiv_meta,   loci,   ...,   ploidy = 2,   valid_alleles = c(\"A\", \"T\", \"C\", \"G\"),   missing_alleles = c(\"0\", \".\"),   backingfile = NULL,   allow_duplicates = FALSE,   quiet = FALSE )"},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/gen_tibble.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Constructor for a gen_tibble — gen_tibble","text":"x can : string giving path PLINK BED PED file. associated BIM FAM files BED, MAP PED expected directory file name. string giving path RDS file storing bigSNP object bigsnpr package (usually created bigsnpr::snp_readBed()) string giving path vcf file. biallelic SNPs considered. string giving path packedancestry .geno file. associated .ind .snp files expected directory share file name prefix. genotype matrix dosages (0, 1, 2, NA) giving dosage alternate allele. ... x name vcf file, additional arguments passed vcfR::read.vcfR(). Otherwise, unused. valid_alleles vector valid allele values; defaults '','T', 'C' 'G'. missing_alleles vector values BIM file/loci dataframe indicate missing value allele value (e.g. monomorphic locus one allele). defaults '0' '.' (PLINK 1.9). backingfile path, including file name without extension, backing files used store data (given .bk .RDS automatically). needed x already .RDS file. x .BED VCF file backingfile left NULL, backing file saved directory bed vcf file, using file name different file type (.bk rather .bed .vcf). x genotype matrix backingfile NULL, temporary file created (note R delete end session!) allow_duplicates logical. TRUE, tibble allow duplicated loci (genomic coordinate (chromosome + position) locus name appearing ). FALSE, error thrown duplicated loci found. validations run backing files saved. Default FALSE. quiet provide information files used store data parser name parser used VCF, either \"cpp\" use fast C++ parser (default), \"vcfR\" use R package vcfR. latter slower robust; \"cpp\" gives error, try using \"vcfR\" case VCF unusual structure. n_cores number cores use parallel processing chunk_size number loci individuals (depending format) processed time (currently used x vcf parser \"vcfR\") indiv_meta list, data.frame tibble compulsory columns 'id' 'population', plus additional metadata interest. used x genotype matrix. Otherwise information extracted directly files. loci data.frame tibble, compulsory columns 'name', 'chromosome', 'position','genetic_dist', 'allele_ref' 'allele_alt'. used x genotype matrix. Otherwise information extracted directly files. ploidy ploidy samples (either single value, vector values mixed ploidy). used creating gen_tibble matrix data; otherwise, ploidy determined automatically data read.","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/gen_tibble.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Constructor for a gen_tibble — gen_tibble","text":"object class gen_tbl.","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/gen_tibble.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Constructor for a gen_tibble — gen_tibble","text":"VCF files: fast cpp parser used default. cpp vcfR parsers attempt establish ploidy first variant; variant found sex chromosome (mtDNA), parser fail 'Error: genotype max_ploidy alleles...'. successful import VCF, change order variants first chromosome autosome using tool vcftools. Currently, biallelic SNPs supported. haploid variants (e.g. sex chromosomes) included VCF, transformed homozygous calls. Instead, reference alleles coded 0 alternative alleles coded 1. packedancestry files: loading packedancestry files, missing alleles converted 'X' NA","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/gen_tibble.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Constructor for a gen_tibble — gen_tibble","text":"Helper functions accessing gen_tibble object attributes checking gen_tibble ploidy can found gt_helper_functions.R","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/gen_tibble.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Constructor for a gen_tibble — gen_tibble","text":"","code":"# Create a gen_tibble from a .bed file bed_file <-   system.file(\"extdata\", \"lobster\", \"lobster.bed\", package = \"tidypopgen\") gen_tibble(bed_file,   backingfile = tempfile(\"lobsters\"),   quiet = TRUE ) #> # A gen_tibble: 79 loci #> # A tibble:     176 × 3 #>    id    population  genotypes #>    <chr> <chr>      <vctr_SNP> #>  1 Ale04 Ale         [0,.,...] #>  2 Ale05 Ale         [1,0,...] #>  3 Ale06 Ale         [.,0,...] #>  4 Ale08 Ale         [.,2,...] #>  5 Ale13 Ale         [0,.,...] #>  6 Ale15 Ale         [1,0,...] #>  7 Ale16 Ale         [0,.,...] #>  8 Ale17 Ale         [1,.,...] #>  9 Ale18 Ale         [0,0,...] #> 10 Ale19 Ale         [2,.,...] #> # ℹ 166 more rows  # Create a gen_tibble from a .vcf file vcf_path <-   system.file(\"extdata\", \"anolis\",     \"punctatus_t70_s10_n46_filtered.recode.vcf.gz\",     package = \"tidypopgen\"   ) gen_tibble(vcf_path, quiet = TRUE, backingfile = tempfile(\"anolis_\")) #> # A gen_tibble: 3249 loci #> # A tibble:     46 × 2 #>    id                 genotypes #>    <chr>             <vctr_SNP> #>  1 punc_BM288         [0,0,...] #>  2 punc_GN71          [2,0,...] #>  3 punc_H1907         [0,2,...] #>  4 punc_H1911         [0,2,...] #>  5 punc_H2546         [0,1,...] #>  6 punc_IBSPCRIB0361  [0,0,...] #>  7 punc_ICST764       [0,0,...] #>  8 punc_JFT459        [0,0,...] #>  9 punc_JFT773        [0,0,...] #> 10 punc_LG1299        [0,0,...] #> # ℹ 36 more rows  # Create a gen_tibble from a matrix of genotypes: test_indiv_meta <- data.frame(   id = c(\"a\", \"b\", \"c\"),   population = c(\"pop1\", \"pop1\", \"pop2\") ) test_genotypes <- rbind(   c(1, 1, 0, 1, 1, 0),   c(2, 1, 0, 0, 0, 0),   c(2, 2, 0, 0, 1, 1) ) test_loci <- data.frame(   name = paste0(\"rs\", 1:6),   chromosome = paste0(\"chr\", c(1, 1, 1, 1, 2, 2)),   position = as.integer(c(3, 5, 65, 343, 23, 456)),   genetic_dist = as.double(rep(0, 6)),   allele_ref = c(\"A\", \"T\", \"C\", \"G\", \"C\", \"T\"),   allele_alt = c(\"T\", \"C\", NA, \"C\", \"G\", \"A\") )  gen_tibble(   x = test_genotypes,   loci = test_loci,   indiv_meta = test_indiv_meta,   valid_alleles = c(\"A\", \"T\", \"C\", \"G\"),   quiet = TRUE ) #> # A gen_tibble: 6 loci #> # A tibble:     3 × 3 #>   id    population  genotypes #>   <chr> <chr>      <vctr_SNP> #> 1 a     pop1        [1,1,...] #> 2 b     pop1        [2,1,...] #> 3 c     pop2        [2,2,...]"},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/get_p_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Return a single P matrix from a gt_admix object — get_p_matrix","title":"Return a single P matrix from a gt_admix object — get_p_matrix","text":"function retrieves single P matrix gt_admix object based specified k value run number.","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/get_p_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return a single P matrix from a gt_admix object — get_p_matrix","text":"","code":"get_p_matrix(x, ..., k, run)"},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/get_p_matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Return a single P matrix from a gt_admix object — get_p_matrix","text":"x gt_admix object containing P matrices ... used k k value desired P matrix run run number desired P matrix","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/get_p_matrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Return a single P matrix from a gt_admix object — get_p_matrix","text":"single P matrix gt_admix object","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/get_p_matrix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Return a single P matrix from a gt_admix object — get_p_matrix","text":"","code":"# Read example gt_admix object admix_obj <-   readRDS(system.file(\"extdata\", \"anolis\", \"anole_adm_k3.rds\",     package = \"tidypopgen\"   ))  # Extract a P matrix get_p_matrix(admix_obj, k = 3, run = 1) #>            V1       V2       V3 #> 1    0.048612 0.999990 0.999990 #> 2    0.999990 0.837451 0.770223 #> 3    0.033211 0.999990 0.999990 #> 4    0.999990 0.000010 0.476634 #> 5    0.999990 0.561647 0.999990 #> 6    0.999990 0.999990 0.717089 #> 7    0.999990 0.105753 0.909817 #> 8    0.999990 0.999990 0.718884 #> 9    0.999990 0.125073 0.691520 #> 10   0.999990 0.335245 0.970162 #> 11   0.999990 0.174710 0.999990 #> 12   0.999990 0.999990 0.678217 #> 13   0.999990 0.801682 0.459852 #> 14   0.999990 0.416884 0.999990 #> 15   0.999990 0.000010 0.485328 #> 16   0.999990 0.000010 0.999990 #> 17   0.999990 0.000010 0.346382 #> 18   0.999990 0.000010 0.685250 #> 19   0.999990 0.639632 0.999990 #> 20   0.999990 0.514032 0.999990 #> 21   0.000010 0.999990 0.827757 #> 22   0.999990 0.131971 0.852027 #> 23   0.999990 0.999990 0.668089 #> 24   0.900621 0.000010 0.999990 #> 25   0.900505 0.000010 0.999990 #> 26   0.900621 0.000010 0.999990 #> 27   0.900621 0.000010 0.999990 #> 28   0.999990 0.068642 0.999990 #> 29   0.275223 0.999990 0.958552 #> 30   0.347394 0.999990 0.999990 #> 31   0.967079 0.000010 0.999990 #> 32   0.999990 0.999990 0.132778 #> 33   0.999990 0.000010 0.837993 #> 34   0.999990 0.328316 0.999990 #> 35   0.999990 0.375847 0.999990 #> 36   0.999990 0.000010 0.602393 #> 37   0.999990 0.999990 0.610375 #> 38   0.999990 0.288723 0.999990 #> 39   0.999990 0.000010 0.854501 #> 40   0.999990 0.335313 0.999990 #> 41   0.999990 0.999990 0.182406 #> 42   0.999990 0.000010 0.604867 #> 43   0.999990 0.000010 0.999990 #> 44   0.999990 0.000010 0.999990 #> 45   0.999990 0.596966 0.999990 #> 46   0.999990 0.000010 0.999990 #> 47   0.999990 0.000010 0.999990 #> 48   0.999990 0.596966 0.999990 #> 49   0.999990 0.000010 0.999990 #> 50   0.999990 0.049367 0.999990 #> 51   0.999990 0.999990 0.523934 #> 52   0.999990 0.344617 0.655521 #> 53   0.999990 0.746841 0.625154 #> 54   0.999990 0.000010 0.999990 #> 55   0.000010 0.999990 0.999990 #> 56   0.000010 0.999990 0.999990 #> 57   0.999990 0.000010 0.943597 #> 58   0.969131 0.386538 0.999990 #> 59   0.000010 0.999990 0.999990 #> 60   0.999990 0.000010 0.999990 #> 61   0.999990 0.419175 0.999990 #> 62   0.999990 0.076907 0.999990 #> 63   0.999990 0.162072 0.999990 #> 64   0.999990 0.999990 0.608016 #> 65   0.999990 0.169368 0.831542 #> 66   0.999990 0.165248 0.999990 #> 67   0.999990 0.000010 0.668063 #> 68   0.999990 0.515023 0.999990 #> 69   0.999990 0.000010 0.668063 #> 70   0.999990 0.000010 0.999990 #> 71   0.999990 0.071412 0.999990 #> 72   0.999990 0.999990 0.678757 #> 73   0.999990 0.000010 0.999990 #> 74   0.999990 0.999990 0.698978 #> 75   0.999990 0.469798 0.259533 #> 76   0.999990 0.375847 0.999990 #> 77   0.999990 0.000010 0.456997 #> 78   0.999990 0.144160 0.999990 #> 79   0.999990 0.535940 0.931303 #> 80   0.688474 0.515613 0.999990 #> 81   0.999990 0.000010 0.999990 #> 82   0.999990 0.380531 0.999990 #> 83   0.999990 0.256660 0.999990 #> 84   0.999990 0.099258 0.876406 #> 85   0.616057 0.999990 0.284705 #> 86   0.999990 0.294474 0.999990 #> 87   0.999990 0.469108 0.999990 #> 88   0.999990 0.260576 0.999990 #> 89   0.999990 0.521198 0.756456 #> 90   0.999990 0.000010 0.703064 #> 91   0.999990 0.000010 0.625649 #> 92   0.000010 0.999990 0.810944 #> 93   0.000010 0.999990 0.810944 #> 94   0.999990 0.295801 0.999990 #> 95   0.999990 0.050093 0.857528 #> 96   0.999990 0.679943 0.939650 #> 97   0.999990 0.561020 0.999990 #> 98   0.051939 0.999990 0.999990 #> 99   0.854262 0.957593 0.446715 #> 100  0.000010 0.999990 0.999990 #> 101  0.999990 0.000010 0.814765 #> 102  0.999990 0.559501 0.909287 #> 103  0.999990 0.721156 0.909239 #> 104  0.999990 0.514032 0.999990 #> 105  0.999990 0.183151 0.867017 #> 106  0.031782 0.999990 0.999990 #> 107  0.999990 0.074969 0.376982 #> 108  0.999990 0.162070 0.999990 #> 109  0.999990 0.999990 0.711043 #> 110  0.410293 0.957570 0.835815 #> 111  0.999990 0.000010 0.999990 #> 112  0.999990 0.000010 0.999990 #> 113  0.999990 0.000010 0.999990 #> 114  0.999990 0.466753 0.999990 #> 115  0.999990 0.415766 0.999990 #> 116  0.999990 0.999990 0.270395 #> 117  0.999990 0.515023 0.999990 #> 118  0.999990 0.959415 0.370706 #> 119  0.000010 0.999990 0.999990 #> 120  0.999990 0.302514 0.999990 #> 121  0.999990 0.517676 0.999990 #> 122  0.999990 0.000010 0.999990 #> 123  0.999990 0.000010 0.999990 #> 124  0.999990 0.560105 0.765791 #> 125  0.999990 0.000010 0.915067 #> 126  0.999990 0.344403 0.999990 #> 127  0.999990 0.344403 0.999990 #> 128  0.999990 0.038438 0.999990 #> 129  0.999990 0.000010 0.999990 #> 130  0.999990 0.000010 0.999990 #> 131  0.999990 0.000010 0.850175 #> 132  0.999990 0.182190 0.939709 #> 133  0.999990 0.953767 0.464839 #> 134  0.999990 0.605699 0.999990 #> 135  0.999990 0.000010 0.787129 #> 136  0.866669 0.999990 0.468969 #> 137  0.999990 0.000010 0.643417 #> 138  0.000010 0.999990 0.904410 #> 139  0.999990 0.000010 0.708804 #> 140  0.999990 0.000010 0.999990 #> 141  0.999990 0.440726 0.745239 #> 142  0.999990 0.999990 0.399495 #> 143  0.999990 0.999990 0.430931 #> 144  0.100547 0.999990 0.999990 #> 145  0.999990 0.917354 0.244776 #> 146  0.999990 0.000010 0.510772 #> 147  0.999990 0.957766 0.730184 #> 148  0.409860 0.999990 0.999990 #> 149  0.999990 0.000010 0.396582 #> 150  0.000010 0.999990 0.999990 #> 151  0.999990 0.999990 0.570089 #> 152  0.652832 0.999990 0.999990 #> 153  0.999990 0.550824 0.999990 #> 154  0.999990 0.843455 0.709648 #> 155  0.999990 0.843455 0.709648 #> 156  0.166674 0.999990 0.514208 #> 157  0.167157 0.999990 0.486349 #> 158  0.167179 0.999990 0.485315 #> 159  0.999990 0.208222 0.850440 #> 160  0.999990 0.999990 0.658225 #> 161  0.861593 0.694844 0.294181 #> 162  0.999990 0.000010 0.808827 #> 163  0.999990 0.000010 0.999990 #> 164  0.000010 0.999990 0.955633 #> 165  0.000010 0.999990 0.971158 #> 166  0.999990 0.567760 0.999990 #> 167  0.999990 0.417002 0.999990 #> 168  0.000010 0.827580 0.944318 #> 169  0.999990 0.558151 0.854535 #> 170  0.091985 0.999990 0.831712 #> 171  0.849785 0.999990 0.469028 #> 172  0.999990 0.999990 0.526063 #> 173  0.999990 0.000010 0.999990 #> 174  0.037335 0.999990 0.868742 #> 175  0.037276 0.999990 0.876849 #> 176  0.999990 0.000010 0.999990 #> 177  0.999990 0.105940 0.999990 #> 178  0.999990 0.105940 0.999990 #> 179  0.999990 0.000010 0.999990 #> 180  0.999990 0.999990 0.000010 #> 181  0.999990 0.000010 0.999990 #> 182  0.999990 0.000010 0.999990 #> 183  0.999990 0.000010 0.999990 #> 184  0.999990 0.999990 0.729027 #> 185  0.999990 0.038218 0.868367 #> 186  0.999990 0.472302 0.999990 #> 187  0.000010 0.999990 0.999990 #> 188  0.072803 0.999990 0.925630 #> 189  0.999990 0.000010 0.999990 #> 190  0.999990 0.000010 0.907002 #> 191  0.999990 0.500142 0.817751 #> 192  0.000010 0.999990 0.778672 #> 193  0.000010 0.999990 0.999990 #> 194  0.000010 0.999990 0.999990 #> 195  0.000010 0.999990 0.999990 #> 196  0.000010 0.999990 0.999990 #> 197  0.999990 0.516536 0.999990 #> 198  0.000010 0.999990 0.816185 #> 199  0.000010 0.873207 0.853425 #> 200  0.999990 0.279973 0.999990 #> 201  0.999990 0.999990 0.634823 #> 202  0.999990 0.000010 0.999990 #> 203  0.999990 0.102728 0.999990 #> 204  0.999990 0.602253 0.999990 #> 205  0.000010 0.999990 0.969391 #> 206  0.999990 0.957700 0.751467 #> 207  0.000010 0.999990 0.969391 #> 208  0.999990 0.279975 0.999990 #> 209  0.956135 0.999990 0.560701 #> 210  0.968495 0.515021 0.999990 #> 211  0.999990 0.328318 0.999990 #> 212  0.999990 0.000010 0.999990 #> 213  0.999990 0.145199 0.999990 #> 214  0.999990 0.000010 0.999990 #> 215  0.999990 0.000010 0.999990 #> 216  0.999990 0.000010 0.999990 #> 217  0.999990 0.576409 0.999990 #> 218  0.999990 0.000010 0.473852 #> 219  0.965902 0.999990 0.421242 #> 220  0.968990 0.210476 0.999990 #> 221  0.999990 0.210478 0.999990 #> 222  0.999990 0.210478 0.999990 #> 223  0.999990 0.000010 0.999990 #> 224  0.999990 0.577048 0.969313 #> 225  0.999990 0.183827 0.940519 #> 226  0.999990 0.000010 0.999990 #> 227  0.999990 0.000010 0.377578 #> 228  0.999990 0.129412 0.999990 #> 229  0.999990 0.000010 0.999990 #> 230  0.725502 0.999990 0.125618 #> 231  0.725502 0.999990 0.125618 #> 232  0.000010 0.741713 0.851621 #> 233  0.999990 0.999990 0.177166 #> 234  0.999990 0.562745 0.999990 #> 235  0.999990 0.513764 0.999990 #> 236  0.999990 0.000010 0.753858 #> 237  0.999990 0.000010 0.413284 #> 238  0.999990 0.861305 0.680848 #> 239  0.999990 0.174711 0.999990 #> 240  0.999990 0.000010 0.409729 #> 241  0.999990 0.000010 0.999990 #> 242  0.999990 0.000010 0.999990 #> 243  0.999990 0.315301 0.999990 #> 244  0.999990 0.585722 0.999990 #> 245  0.999990 0.633506 0.999990 #> 246  0.999990 0.633506 0.999990 #> 247  0.999990 0.220862 0.999990 #> 248  0.999990 0.220862 0.999990 #> 249  0.999990 0.000010 0.694164 #> 250  0.999990 0.999990 0.613571 #> 251  0.999990 0.000010 0.709210 #> 252  0.999990 0.000010 0.709210 #> 253  0.662827 0.714058 0.999990 #> 254  0.999990 0.147170 0.942996 #> 255  0.999990 0.878999 0.696670 #> 256  0.682662 0.881307 0.958581 #> 257  0.000010 0.914677 0.846852 #> 258  0.999990 0.999990 0.644819 #> 259  0.999990 0.000010 0.665301 #> 260  0.999990 0.151795 0.307907 #> 261  0.999990 0.999990 0.701810 #> 262  0.999990 0.561543 0.971157 #> 263  0.000010 0.935048 0.754686 #> 264  0.999990 0.999990 0.153325 #> 265  0.944716 0.999990 0.160456 #> 266  0.952943 0.234144 0.866339 #> 267  0.999990 0.000010 0.964612 #> 268  0.999990 0.000010 0.674912 #> 269  0.000010 0.999990 0.972211 #> 270  0.999990 0.375848 0.999990 #> 271  0.999990 0.119746 0.659259 #> 272  0.999990 0.269366 0.434778 #> 273  0.999990 0.344402 0.999990 #> 274  0.999990 0.285364 0.999990 #> 275  0.999990 0.878541 0.999990 #> 276  0.999990 0.448037 0.961685 #> 277  0.887529 0.000010 0.824114 #> 278  0.999990 0.999990 0.448567 #> 279  0.999990 0.328317 0.999990 #> 280  0.999990 0.040652 0.616039 #> 281  0.000010 0.999990 0.700512 #> 282  0.652236 0.999990 0.999990 #> 283  0.999990 0.999990 0.594896 #> 284  0.999990 0.000010 0.544303 #> 285  0.999990 0.000010 0.927907 #> 286  0.999990 0.000010 0.879535 #> 287  0.999990 0.999990 0.694498 #> 288  0.999990 0.000010 0.415671 #> 289  0.999990 0.999990 0.412560 #> 290  0.999990 0.044949 0.999990 #> 291  0.999990 0.000010 0.999990 #> 292  0.999796 0.688972 0.810406 #> 293  0.999990 0.250358 0.999990 #> 294  0.154877 0.999990 0.810580 #> 295  0.845316 0.999990 0.179597 #> 296  0.999990 0.000010 0.999990 #> 297  0.610618 0.999990 0.410662 #> 298  0.999990 0.999990 0.405206 #> 299  0.999990 0.999990 0.292376 #> 300  0.999990 0.158372 0.999990 #> 301  0.999990 0.158372 0.999990 #> 302  0.000010 0.999990 0.652525 #> 303  0.999990 0.000010 0.999990 #> 304  0.999990 0.000010 0.999990 #> 305  0.999990 0.480747 0.825883 #> 306  0.999990 0.000010 0.999990 #> 307  0.999990 0.999990 0.000010 #> 308  0.000010 0.999990 0.873057 #> 309  0.999990 0.000010 0.999990 #> 310  0.999990 0.000010 0.409204 #> 311  0.948547 0.054950 0.962441 #> 312  0.948547 0.054950 0.962441 #> 313  0.999990 0.959717 0.577117 #> 314  0.999990 0.879161 0.579619 #> 315  0.999990 0.000010 0.966023 #> 316  0.999990 0.000010 0.999990 #> 317  0.999990 0.000010 0.674103 #> 318  0.000010 0.999990 0.999990 #> 319  0.999990 0.000010 0.999990 #> 320  0.999990 0.000010 0.999990 #> 321  0.247475 0.999990 0.717168 #> 322  0.885765 0.265639 0.694652 #> 323  0.000010 0.999990 0.999990 #> 324  0.999990 0.000010 0.838312 #> 325  0.999990 0.519435 0.999990 #> 326  0.999990 0.520055 0.999990 #> 327  0.999990 0.688110 0.813214 #> 328  0.999990 0.300847 0.999990 #> 329  0.999990 0.000010 0.341661 #> 330  0.810455 0.999990 0.173903 #> 331  0.182748 0.961137 0.923945 #> 332  0.999990 0.281639 0.999990 #> 333  0.999990 0.000010 0.866871 #> 334  0.999990 0.000010 0.926996 #> 335  0.999990 0.999990 0.596592 #> 336  0.875677 0.000010 0.999990 #> 337  0.999990 0.597343 0.999990 #> 338  0.999990 0.000010 0.603204 #> 339  0.836057 0.999990 0.000010 #> 340  0.999990 0.541416 0.694746 #> 341  0.999990 0.555955 0.999990 #> 342  0.153924 0.999990 0.999990 #> 343  0.000010 0.999990 0.794270 #> 344  0.999990 0.165249 0.999990 #> 345  0.999990 0.000010 0.999990 #> 346  0.999990 0.000010 0.999990 #> 347  0.999990 0.999990 0.691514 #> 348  0.999990 0.907418 0.032656 #> 349  0.000010 0.999990 0.965916 #> 350  0.999990 0.661675 0.908887 #> 351  0.999990 0.661675 0.908887 #> 352  0.999990 0.621166 0.122805 #> 353  0.999990 0.000010 0.999990 #> 354  0.999990 0.079614 0.999990 #> 355  0.999990 0.079614 0.999990 #> 356  0.366615 0.279997 0.999990 #> 357  0.999990 0.514299 0.999990 #> 358  0.999990 0.999990 0.476416 #> 359  0.999990 0.282245 0.939952 #> 360  0.999990 0.999990 0.717036 #> 361  0.999990 0.375848 0.999990 #> 362  0.999990 0.321805 0.788220 #> 363  0.999990 0.469526 0.999990 #> 364  0.999990 0.999990 0.645347 #> 365  0.999990 0.555504 0.999990 #> 366  0.999990 0.557570 0.999990 #> 367  0.999990 0.999990 0.698978 #> 368  0.999990 0.000010 0.999990 #> 369  0.000010 0.960524 0.978221 #> 370  0.057848 0.999990 0.751192 #> 371  0.069728 0.999990 0.774352 #> 372  0.999990 0.313320 0.912608 #> 373  0.999990 0.087477 0.814344 #> 374  0.977132 0.000010 0.970631 #> 375  0.123159 0.999990 0.971702 #> 376  0.999990 0.469109 0.999990 #> 377  0.999990 0.287169 0.999990 #> 378  0.999990 0.000010 0.933508 #> 379  0.999990 0.513764 0.999990 #> 380  0.000010 0.999990 0.999990 #> 381  0.999990 0.283958 0.295232 #> 382  0.991697 0.039638 0.999065 #> 383  0.999990 0.815501 0.834539 #> 384  0.999990 0.815501 0.834539 #> 385  0.999990 0.000010 0.838074 #> 386  0.999990 0.182360 0.999990 #> 387  0.999990 0.000010 0.862814 #> 388  0.999990 0.000010 0.686923 #> 389  0.712052 0.999990 0.999990 #> 390  0.999990 0.000010 0.999990 #> 391  0.999990 0.422742 0.999990 #> 392  0.999990 0.000010 0.999990 #> 393  0.000010 0.999990 0.826755 #> 394  0.999990 0.649099 0.224162 #> 395  0.999990 0.999990 0.641208 #> 396  0.598257 0.999990 0.929189 #> 397  0.999990 0.000010 0.999990 #> 398  0.000010 0.999990 0.999990 #> 399  0.999990 0.000010 0.999990 #> 400  0.000010 0.951996 0.941433 #> 401  0.999990 0.246176 0.802543 #> 402  0.999990 0.655718 0.860045 #> 403  0.999990 0.999990 0.586661 #> 404  0.487520 0.263501 0.561569 #> 405  0.999990 0.597102 0.550741 #> 406  0.191081 0.999990 0.939236 #> 407  0.892302 0.999990 0.466366 #> 408  0.646959 0.999990 0.897852 #> 409  0.999990 0.261309 0.968741 #> 410  0.999990 0.213371 0.937262 #> 411  0.975323 0.416781 0.412016 #> 412  0.999990 0.000010 0.771590 #> 413  0.999990 0.088216 0.876248 #> 414  0.999990 0.281639 0.999990 #> 415  0.999990 0.999990 0.443691 #> 416  0.999990 0.999990 0.471669 #> 417  0.999990 0.000010 0.914737 #> 418  0.999990 0.999990 0.443691 #> 419  0.751706 0.945848 0.922072 #> 420  0.999990 0.422742 0.999990 #> 421  0.999990 0.000010 0.590259 #> 422  0.999990 0.647140 0.609412 #> 423  0.999990 0.357000 0.968023 #> 424  0.460303 0.999990 0.914788 #> 425  0.999990 0.201551 0.999990 #> 426  0.999990 0.473173 0.999990 #> 427  0.999990 0.000010 0.891198 #> 428  0.999990 0.117980 0.999990 #> 429  0.999990 0.079614 0.999990 #> 430  0.999990 0.000010 0.999990 #> 431  0.999990 0.518272 0.969680 #> 432  0.999990 0.000010 0.763431 #> 433  0.999990 0.000010 0.782583 #> 434  0.999990 0.000010 0.553887 #> 435  0.000010 0.999990 0.999990 #> 436  0.999990 0.000010 0.999990 #> 437  0.000010 0.999990 0.796848 #> 438  0.579842 0.999990 0.999990 #> 439  0.999990 0.381149 0.407582 #> 440  0.999990 0.288723 0.999990 #> 441  0.999990 0.166535 0.943568 #> 442  0.000010 0.999990 0.724145 #> 443  0.029540 0.999990 0.999990 #> 444  0.968335 0.999990 0.634422 #> 445  0.999990 0.414790 0.999990 #> 446  0.999990 0.000010 0.999990 #> 447  0.727441 0.519826 0.335840 #> 448  0.000010 0.999990 0.999990 #> 449  0.788447 0.596970 0.999990 #> 450  0.999990 0.000010 0.999990 #> 451  0.999990 0.000010 0.999990 #> 452  0.000010 0.999990 0.936424 #> 453  0.999990 0.000010 0.999990 #> 454  0.999990 0.000010 0.999990 #> 455  0.999990 0.000010 0.999990 #> 456  0.999990 0.044949 0.999990 #> 457  0.999990 0.999990 0.697908 #> 458  0.999990 0.000010 0.999990 #> 459  0.999990 0.213481 0.999990 #> 460  0.000010 0.999990 0.960352 #> 461  0.999990 0.358507 0.800680 #> 462  0.000010 0.999990 0.732984 #> 463  0.999990 0.507362 0.999990 #> 464  0.999990 0.787326 0.310508 #> 465  0.999990 0.742737 0.323214 #> 466  0.000010 0.999990 0.953046 #> 467  0.999990 0.177426 0.999990 #> 468  0.999990 0.999990 0.138253 #> 469  0.999990 0.000010 0.859693 #> 470  0.999990 0.472301 0.999990 #> 471  0.999990 0.999990 0.693390 #> 472  0.999990 0.000010 0.807384 #> 473  0.999990 0.623586 0.935488 #> 474  0.999990 0.713723 0.824993 #> 475  0.555065 0.999990 0.819041 #> 476  0.999990 0.999990 0.262370 #> 477  0.999990 0.000010 0.769680 #> 478  0.999990 0.258107 0.999990 #> 479  0.999990 0.000010 0.445722 #> 480  0.999990 0.195235 0.937181 #> 481  0.999990 0.194352 0.999990 #> 482  0.000010 0.999990 0.952696 #> 483  0.000010 0.999990 0.952696 #> 484  0.087721 0.999990 0.999990 #> 485  0.999990 0.386539 0.999990 #> 486  0.999990 0.375848 0.999990 #> 487  0.999990 0.469109 0.999990 #> 488  0.999990 0.000010 0.841984 #> 489  0.999990 0.000010 0.999990 #> 490  0.999990 0.000010 0.999990 #> 491  0.119121 0.999990 0.659241 #> 492  0.999990 0.502329 0.999990 #> 493  0.999990 0.999990 0.578356 #> 494  0.385838 0.999990 0.999990 #> 495  0.889423 0.843113 0.478583 #> 496  0.999990 0.115738 0.602063 #> 497  0.999990 0.000010 0.599949 #> 498  0.000010 0.999990 0.865717 #> 499  0.899600 0.999990 0.731773 #> 500  0.999990 0.520055 0.999990 #> 501  0.999990 0.999990 0.399441 #> 502  0.999990 0.514299 0.999990 #> 503  0.000010 0.999990 0.999990 #> 504  0.999990 0.259060 0.999990 #> 505  0.000010 0.999990 0.811886 #> 506  0.999990 0.471717 0.999990 #> 507  0.999990 0.060255 0.999990 #> 508  0.999990 0.227241 0.698126 #> 509  0.999990 0.335314 0.999990 #> 510  0.999990 0.335314 0.999990 #> 511  0.999990 0.033315 0.999990 #> 512  0.999990 0.174258 0.999990 #> 513  0.114414 0.999990 0.549711 #> 514  0.114414 0.999990 0.549711 #> 515  0.114414 0.999990 0.549711 #> 516  0.886434 0.559696 0.438981 #> 517  0.178655 0.999990 0.937037 #> 518  0.999990 0.999990 0.691370 #> 519  0.999990 0.000010 0.999990 #> 520  0.860571 0.056690 0.733846 #> 521  0.999990 0.049368 0.999990 #> 522  0.999990 0.559963 0.378026 #> 523  0.999990 0.590172 0.976284 #> 524  0.999990 0.000010 0.724327 #> 525  0.999990 0.601164 0.999990 #> 526  0.999990 0.095269 0.375615 #> 527  0.999990 0.000010 0.752206 #> 528  0.999990 0.518621 0.999990 #> 529  0.999990 0.000010 0.414847 #> 530  0.000010 0.999990 0.855769 #> 531  0.999990 0.515361 0.913370 #> 532  0.999990 0.089490 0.999990 #> 533  0.999990 0.000010 0.921949 #> 534  0.999990 0.000010 0.999990 #> 535  0.999990 0.000010 0.999990 #> 536  0.999990 0.999990 0.228634 #> 537  0.295210 0.999990 0.738029 #> 538  0.999990 0.420116 0.999990 #> 539  0.999990 0.172817 0.951508 #> 540  0.999990 0.196688 0.999990 #> 541  0.999990 0.232708 0.999990 #> 542  0.999990 0.232708 0.999990 #> 543  0.902594 0.999990 0.311719 #> 544  0.000010 0.999990 0.968091 #> 545  0.999990 0.275617 0.339990 #> 546  0.999990 0.268341 0.441702 #> 547  0.999990 0.999990 0.541090 #> 548  0.999990 0.999990 0.548198 #> 549  0.999990 0.349077 0.797363 #> 550  0.999990 0.264489 0.999990 #> 551  0.999990 0.395606 0.657427 #> 552  0.999990 0.961044 0.737214 #> 553  0.999990 0.000010 0.597645 #> 554  0.999990 0.390638 0.999990 #> 555  0.861138 0.958781 0.479027 #> 556  0.137427 0.999990 0.572835 #> 557  0.985619 0.000010 0.948692 #> 558  0.985619 0.000010 0.948692 #> 559  0.260006 0.999990 0.667368 #> 560  0.999990 0.176081 0.999990 #> 561  0.999990 0.557570 0.999990 #> 562  0.999990 0.000010 0.999990 #> 563  0.999990 0.000010 0.602398 #> 564  0.999990 0.999990 0.610375 #> 565  0.999990 0.000010 0.633956 #> 566  0.000010 0.741475 0.918487 #> 567  0.999990 0.399011 0.415735 #> 568  0.038835 0.999990 0.698576 #> 569  0.999990 0.999990 0.146449 #> 570  0.999990 0.200047 0.999990 #> 571  0.999990 0.200047 0.999990 #> 572  0.999990 0.330969 0.939734 #> 573  0.999990 0.330969 0.939734 #> 574  0.452802 0.999990 0.999990 #> 575  0.000010 0.999990 0.999990 #> 576  0.999990 0.000010 0.968158 #> 577  0.999990 0.000010 0.999990 #> 578  0.999990 0.000010 0.999990 #> 579  0.999990 0.472035 0.999990 #> 580  0.999990 0.000010 0.905487 #> 581  0.999990 0.000010 0.445702 #> 582  0.999990 0.134319 0.932396 #> 583  0.999990 0.000010 0.999990 #> 584  0.999990 0.000010 0.999990 #> 585  0.999990 0.999990 0.654306 #> 586  0.999990 0.000010 0.528582 #> 587  0.999990 0.999990 0.633684 #> 588  0.999990 0.000010 0.655499 #> 589  0.193870 0.999990 0.936862 #> 590  0.000010 0.999990 0.936952 #> 591  0.999990 0.999990 0.568423 #> 592  0.999990 0.051209 0.999990 #> 593  0.999990 0.000010 0.999990 #> 594  0.999990 0.000010 0.999990 #> 595  0.582099 0.999990 0.000010 #> 596  0.999990 0.999990 0.698957 #> 597  0.065912 0.999990 0.999990 #> 598  0.000010 0.999990 0.999990 #> 599  0.999990 0.000010 0.431619 #> 600  0.999990 0.279974 0.999990 #> 601  0.999990 0.000010 0.923479 #> 602  0.000010 0.999990 0.999990 #> 603  0.240705 0.999990 0.601846 #> 604  0.999990 0.652091 0.902057 #> 605  0.966566 0.999990 0.438907 #> 606  0.999990 0.000010 0.999990 #> 607  0.999990 0.000010 0.502637 #> 608  0.999990 0.000010 0.999990 #> 609  0.999990 0.120686 0.999990 #> 610  0.598915 0.999990 0.670033 #> 611  0.999990 0.049367 0.999990 #> 612  0.999990 0.000010 0.740541 #> 613  0.680297 0.488819 0.219818 #> 614  0.999990 0.165249 0.999990 #> 615  0.837463 0.999990 0.301122 #> 616  0.999990 0.426595 0.999990 #> 617  0.999990 0.000010 0.873137 #> 618  0.999990 0.999990 0.524765 #> 619  0.999990 0.000010 0.718375 #> 620  0.310989 0.999990 0.999990 #> 621  0.999990 0.558012 0.999990 #> 622  0.999990 0.000010 0.999990 #> 623  0.999990 0.000010 0.999990 #> 624  0.999990 0.999990 0.311926 #> 625  0.000010 0.999990 0.999990 #> 626  0.999990 0.999990 0.322580 #> 627  0.999990 0.999990 0.311926 #> 628  0.000010 0.999990 0.999990 #> 629  0.999990 0.452485 0.999990 #> 630  0.999990 0.570306 0.999990 #> 631  0.999990 0.462116 0.999990 #> 632  0.999990 0.000010 0.999990 #> 633  0.999990 0.279974 0.999990 #> 634  0.999990 0.000010 0.800774 #> 635  0.999990 0.068642 0.999990 #> 636  0.999990 0.605698 0.999990 #> 637  0.000010 0.999990 0.841928 #> 638  0.000010 0.999990 0.999990 #> 639  0.999990 0.101580 0.999990 #> 640  0.999990 0.000010 0.999990 #> 641  0.999990 0.124497 0.999990 #> 642  0.999990 0.040558 0.557351 #> 643  0.999990 0.081546 0.999990 #> 644  0.000010 0.999990 0.828407 #> 645  0.680000 0.999990 0.999990 #> 646  0.000010 0.999990 0.775561 #> 647  0.999990 0.074477 0.851361 #> 648  0.999990 0.000010 0.389508 #> 649  0.174261 0.999990 0.999990 #> 650  0.298924 0.999990 0.999990 #> 651  0.130451 0.999990 0.951567 #> 652  0.999990 0.556541 0.999990 #> 653  0.000010 0.999990 0.771753 #> 654  0.999990 0.287168 0.999990 #> 655  0.999990 0.254922 0.999990 #> 656  0.999990 0.000010 0.502437 #> 657  0.965491 0.999990 0.075345 #> 658  0.034531 0.957265 0.920834 #> 659  0.965477 0.616900 0.077423 #> 660  0.034532 0.953394 0.920660 #> 661  0.965498 0.836493 0.097809 #> 662  0.999990 0.897483 0.555872 #> 663  0.999990 0.316957 0.999990 #> 664  0.999990 0.000010 0.864098 #> 665  0.999990 0.508960 0.933105 #> 666  0.999990 0.569441 0.999990 #> 667  0.999990 0.108751 0.999990 #> 668  0.999990 0.000010 0.837992 #> 669  0.999990 0.516735 0.999990 #> 670  0.999990 0.000010 0.868458 #> 671  0.999990 0.000010 0.814015 #> 672  0.999990 0.182360 0.999990 #> 673  0.999990 0.182360 0.999990 #> 674  0.000010 0.999990 0.999990 #> 675  0.000010 0.812384 0.929035 #> 676  0.999990 0.000010 0.901693 #> 677  0.999990 0.129148 0.862095 #> 678  0.999990 0.511361 0.999990 #> 679  0.884065 0.000010 0.830740 #> 680  0.228851 0.999990 0.999990 #> 681  0.999990 0.000010 0.940219 #> 682  0.999990 0.186693 0.238681 #> 683  0.999990 0.999990 0.432893 #> 684  0.999990 0.000010 0.533048 #> 685  0.999990 0.000010 0.570206 #> 686  0.642047 0.999990 0.944120 #> 687  0.999990 0.430086 0.999990 #> 688  0.999990 0.560540 0.999990 #> 689  0.999990 0.000010 0.526796 #> 690  0.999990 0.000010 0.528814 #> 691  0.000010 0.999990 0.639988 #> 692  0.999990 0.842439 0.812347 #> 693  0.000010 0.999990 0.965916 #> 694  0.999990 0.146514 0.999990 #> 695  0.999990 0.000010 0.509688 #> 696  0.999990 0.999990 0.638529 #> 697  0.999990 0.000010 0.999990 #> 698  0.903333 0.000010 0.570478 #> 699  0.999990 0.357250 0.989143 #> 700  0.999990 0.638173 0.999990 #> 701  0.000010 0.999990 0.655692 #> 702  0.999990 0.384283 0.999990 #> 703  0.999990 0.999990 0.637404 #> 704  0.668675 0.999990 0.524197 #> 705  0.999990 0.515604 0.999990 #> 706  0.999990 0.000010 0.939553 #> 707  0.000010 0.999990 0.933859 #> 708  0.999990 0.000010 0.798655 #> 709  0.554195 0.999990 0.999990 #> 710  0.999990 0.000010 0.886850 #> 711  0.999990 0.999990 0.557583 #> 712  0.999990 0.471062 0.908484 #> 713  0.999990 0.234226 0.936113 #> 714  0.999990 0.234226 0.936113 #> 715  0.999990 0.091539 0.634259 #> 716  0.931285 0.610710 0.999979 #> 717  0.999990 0.000010 0.999990 #> 718  0.999990 0.083315 0.999990 #> 719  0.999990 0.083315 0.999990 #> 720  0.999990 0.999990 0.630011 #> 721  0.999990 0.511304 0.999990 #> 722  0.999990 0.999990 0.175518 #> 723  0.999990 0.999990 0.000010 #> 724  0.999990 0.431066 0.914169 #> 725  0.999990 0.077186 0.999990 #> 726  0.245868 0.999984 0.548946 #> 727  0.999990 0.423597 0.999990 #> 728  0.999990 0.697928 0.214931 #> 729  0.999990 0.272147 0.310589 #> 730  0.999990 0.560540 0.999990 #> 731  0.999990 0.999990 0.451873 #> 732  0.999990 0.429325 0.999990 #> 733  0.999990 0.000010 0.883599 #> 734  0.999990 0.294912 0.681942 #> 735  0.443896 0.999990 0.643455 #> 736  0.999990 0.555955 0.999990 #> 737  0.999990 0.999990 0.576382 #> 738  0.999990 0.000010 0.517681 #> 739  0.999990 0.466754 0.999990 #> 740  0.999990 0.999990 0.700196 #> 741  0.000010 0.999990 0.999990 #> 742  0.999990 0.999990 0.700196 #> 743  0.888531 0.683340 0.469753 #> 744  0.878911 0.773991 0.786426 #> 745  0.999990 0.000010 0.999990 #> 746  0.491091 0.999990 0.209142 #> 747  0.038950 0.955836 0.623186 #> 748  0.999990 0.999990 0.022177 #> 749  0.999990 0.999990 0.022177 #> 750  0.999990 0.129809 0.999990 #> 751  0.999990 0.999990 0.711434 #> 752  0.999990 0.999990 0.711434 #> 753  0.999990 0.212591 0.905506 #> 754  0.999990 0.165249 0.999990 #> 755  0.206006 0.999990 0.999990 #> 756  0.999990 0.457270 0.999990 #> 757  0.999990 0.041542 0.839000 #> 758  0.999990 0.000010 0.999990 #> 759  0.999990 0.000010 0.999990 #> 760  0.999990 0.000010 0.999990 #> 761  0.999990 0.044944 0.999990 #> 762  0.999990 0.000010 0.999990 #> 763  0.999990 0.000010 0.999990 #> 764  0.000010 0.999990 0.787580 #> 765  0.000010 0.999990 0.787580 #> 766  0.999990 0.396491 0.325784 #> 767  0.999990 0.999990 0.297985 #> 768  0.999990 0.999990 0.297985 #> 769  0.999990 0.617456 0.627385 #> 770  0.999990 0.423427 0.967942 #> 771  0.999990 0.145198 0.999990 #> 772  0.999990 0.404990 0.999990 #> 773  0.999990 0.917716 0.110995 #> 774  0.208522 0.913966 0.999990 #> 775  0.999990 0.420117 0.999990 #> 776  0.999990 0.999990 0.432280 #> 777  0.000010 0.999990 0.626910 #> 778  0.999990 0.665241 0.569919 #> 779  0.999990 0.857066 0.259653 #> 780  0.999990 0.182361 0.999990 #> 781  0.761611 0.999990 0.861278 #> 782  0.999990 0.000010 0.999990 #> 783  0.999990 0.131483 0.967713 #> 784  0.999990 0.605698 0.999990 #> 785  0.999990 0.044944 0.999990 #> 786  0.999990 0.000010 0.999990 #> 787  0.000010 0.999990 0.816942 #> 788  0.999990 0.472301 0.999990 #> 789  0.999990 0.517677 0.999990 #> 790  0.679938 0.999990 0.999990 #> 791  0.999990 0.999990 0.277696 #> 792  0.999990 0.254922 0.999990 #> 793  0.999990 0.000010 0.999990 #> 794  0.999990 0.608659 0.942182 #> 795  0.999990 0.524818 0.433357 #> 796  0.999990 0.664605 0.442732 #> 797  0.999990 0.343290 0.999990 #> 798  0.999990 0.112788 0.509518 #> 799  0.999990 0.050368 0.999990 #> 800  0.999990 0.999990 0.439474 #> 801  0.999990 0.085806 0.999990 #> 802  0.999990 0.098973 0.911287 #> 803  0.999990 0.999990 0.689192 #> 804  0.999990 0.613197 0.848267 #> 805  0.999990 0.000010 0.663959 #> 806  0.999990 0.243215 0.910543 #> 807  0.999990 0.605699 0.999990 #> 808  0.999990 0.000010 0.999990 #> 809  0.999990 0.000010 0.999990 #> 810  0.999990 0.044949 0.999990 #> 811  0.999990 0.302514 0.999990 #> 812  0.068826 0.826862 0.851885 #> 813  0.903321 0.999990 0.165210 #> 814  0.000010 0.999990 0.999990 #> 815  0.000010 0.999990 0.999990 #> 816  0.999990 0.239826 0.999990 #> 817  0.999990 0.297630 0.999990 #> 818  0.999990 0.000010 0.373777 #> 819  0.999990 0.000010 0.402876 #> 820  0.616842 0.999990 0.077025 #> 821  0.999990 0.595728 0.999990 #> 822  0.999990 0.568937 0.999990 #> 823  0.999990 0.000010 0.999990 #> 824  0.999990 0.473921 0.177862 #> 825  0.000010 0.999990 0.967394 #> 826  0.999990 0.567761 0.999990 #> 827  0.000010 0.999990 0.967394 #> 828  0.999990 0.000010 0.999990 #> 829  0.999990 0.666742 0.897124 #> 830  0.032033 0.999990 0.999990 #> 831  0.999990 0.000010 0.999990 #> 832  0.999990 0.299474 0.999990 #> 833  0.999990 0.000010 0.999990 #> 834  0.590868 0.999990 0.999990 #> 835  0.999990 0.000010 0.999990 #> 836  0.999990 0.000010 0.943533 #> 837  0.999990 0.000010 0.943533 #> 838  0.999990 0.000010 0.999990 #> 839  0.999990 0.299474 0.999990 #> 840  0.324643 0.999990 0.999990 #> 841  0.728518 0.999990 0.514995 #> 842  0.999990 0.999990 0.712624 #> 843  0.999990 0.132352 0.830072 #> 844  0.999990 0.999990 0.706240 #> 845  0.999990 0.000010 0.999990 #> 846  0.999990 0.209814 0.999990 #> 847  0.999990 0.000010 0.999990 #> 848  0.999990 0.000010 0.999990 #> 849  0.860819 0.175059 0.844178 #> 850  0.885410 0.176697 0.652843 #> 851  0.999990 0.872878 0.999990 #> 852  0.999990 0.872878 0.999990 #> 853  0.999990 0.872878 0.999990 #> 854  0.999990 0.475234 0.999990 #> 855  0.999990 0.000010 0.999990 #> 856  0.999990 0.000010 0.999990 #> 857  0.999990 0.068642 0.999990 #> 858  0.999990 0.068642 0.999990 #> 859  0.999990 0.000010 0.999990 #> 860  0.000010 0.999990 0.623339 #> 861  0.000010 0.686411 0.642386 #> 862  0.000010 0.999990 0.623339 #> 863  0.520750 0.999990 0.999990 #> 864  0.999990 0.038438 0.999990 #> 865  0.999990 0.000010 0.999990 #> 866  0.999990 0.349283 0.999990 #> 867  0.999990 0.037326 0.924284 #> 868  0.999990 0.184536 0.913267 #> 869  0.999990 0.000010 0.782102 #> 870  0.274749 0.999990 0.972613 #> 871  0.999990 0.000010 0.999990 #> 872  0.000010 0.870647 0.999990 #> 873  0.999990 0.999990 0.000010 #> 874  0.999990 0.999990 0.000010 #> 875  0.999990 0.999990 0.000010 #> 876  0.000010 0.999990 0.802492 #> 877  0.999990 0.002448 0.593284 #> 878  0.999990 0.757757 0.549636 #> 879  0.999990 0.000010 0.559251 #> 880  0.999990 0.049368 0.999990 #> 881  0.999990 0.827790 0.691532 #> 882  0.999990 0.999990 0.667636 #> 883  0.999990 0.000010 0.741439 #> 884  0.161429 0.999990 0.999990 #> 885  0.999990 0.564255 0.089244 #> 886  0.999990 0.999990 0.392881 #> 887  0.999990 0.000010 0.937640 #> 888  0.999990 0.549287 0.999990 #> 889  0.777692 0.999990 0.764499 #> 890  0.999990 0.000010 0.999990 #> 891  0.999990 0.000010 0.999990 #> 892  0.999990 0.999990 0.640196 #> 893  0.999990 0.999990 0.640196 #> 894  0.999990 0.999990 0.531017 #> 895  0.999990 0.999990 0.164858 #> 896  0.999990 0.000010 0.410434 #> 897  0.999990 0.000010 0.410434 #> 898  0.999990 0.000010 0.999990 #> 899  0.999990 0.000010 0.834326 #> 900  0.999990 0.999990 0.273975 #> 901  0.000010 0.924028 0.833459 #> 902  0.999990 0.194738 0.971479 #> 903  0.999990 0.999990 0.732057 #> 904  0.335543 0.999990 0.999990 #> 905  0.999990 0.000010 0.999990 #> 906  0.999990 0.999990 0.041605 #> 907  0.999990 0.318440 0.999990 #> 908  0.999990 0.391521 0.999990 #> 909  0.999990 0.132929 0.504888 #> 910  0.999990 0.132929 0.504888 #> 911  0.999990 0.496665 0.797831 #> 912  0.999990 0.000010 0.721627 #> 913  0.957704 0.275625 0.786608 #> 914  0.954318 0.011197 0.852582 #> 915  0.999990 0.000010 0.999990 #> 916  0.309075 0.999990 0.513512 #> 917  0.000010 0.999990 0.883822 #> 918  0.000010 0.999990 0.677819 #> 919  0.999990 0.955116 0.575096 #> 920  0.918594 0.000010 0.745349 #> 921  0.999990 0.018038 0.999990 #> 922  0.999990 0.626344 0.999990 #> 923  0.897084 0.999990 0.588469 #> 924  0.999990 0.515023 0.999990 #> 925  0.999990 0.474612 0.999990 #> 926  0.999990 0.000010 0.999990 #> 927  0.000010 0.999990 0.646176 #> 928  0.999990 0.999990 0.705466 #> 929  0.999990 0.044949 0.999990 #> 930  0.744118 0.999990 0.682965 #> 931  0.999990 0.044949 0.999990 #> 932  0.999990 0.000010 0.720820 #> 933  0.999990 0.606095 0.999990 #> 934  0.954335 0.341087 0.796022 #> 935  0.999990 0.206421 0.510562 #> 936  0.999990 0.194277 0.558217 #> 937  0.999990 0.999990 0.692622 #> 938  0.999990 0.874981 0.999990 #> 939  0.999990 0.000010 0.999990 #> 940  0.999990 0.000010 0.999990 #> 941  0.999990 0.088894 0.668053 #> 942  0.999990 0.480269 0.764833 #> 943  0.999990 0.102728 0.999990 #> 944  0.999990 0.469109 0.999990 #> 945  0.999990 0.605699 0.999990 #> 946  0.868823 0.999990 0.366007 #> 947  0.418199 0.999990 0.999990 #> 948  0.936900 0.317699 0.999990 #> 949  0.999990 0.322946 0.449410 #> 950  0.059572 0.999990 0.827578 #> 951  0.521515 0.999990 0.999990 #> 952  0.000010 0.999990 0.796812 #> 953  0.999990 0.999990 0.667447 #> 954  0.029194 0.999990 0.697248 #> 955  0.969231 0.999990 0.651259 #> 956  0.970056 0.000010 0.488812 #> 957  0.999990 0.000010 0.999990 #> 958  0.999990 0.999990 0.626752 #> 959  0.999990 0.000010 0.929846 #> 960  0.999990 0.415539 0.968485 #> 961  0.081318 0.999990 0.999990 #> 962  0.999990 0.000010 0.952346 #> 963  0.999990 0.000010 0.952346 #> 964  0.999990 0.072391 0.558030 #> 965  0.999990 0.999990 0.679055 #> 966  0.999990 0.999990 0.305677 #> 967  0.999990 0.937654 0.721886 #> 968  0.000010 0.999990 0.999990 #> 969  0.000010 0.872242 0.859212 #> 970  0.000010 0.999990 0.658526 #> 971  0.000010 0.999990 0.652298 #> 972  0.999990 0.999990 0.574423 #> 973  0.999990 0.972125 0.568888 #> 974  0.999990 0.000010 0.999990 #> 975  0.109379 0.999990 0.999990 #> 976  0.902285 0.999990 0.714059 #> 977  0.999990 0.166116 0.238259 #> 978  0.555026 0.619365 0.396030 #> 979  0.788026 0.999990 0.393636 #> 980  0.213649 0.999990 0.557118 #> 981  0.519312 0.999990 0.013414 #> 982  0.999990 0.000010 0.999990 #> 983  0.999990 0.200047 0.999990 #> 984  0.999990 0.000010 0.999990 #> 985  0.967285 0.999990 0.663723 #> 986  0.967285 0.999990 0.663723 #> 987  0.966923 0.999990 0.678997 #> 988  0.000010 0.999990 0.698562 #> 989  0.999990 0.000010 0.999990 #> 990  0.999990 0.098198 0.999990 #> 991  0.999990 0.000010 0.749835 #> 992  0.999990 0.387454 0.999990 #> 993  0.999990 0.314892 0.999990 #> 994  0.000010 0.999990 0.963422 #> 995  0.999990 0.000010 0.999990 #> 996  0.999990 0.000010 0.999990 #> 997  0.999990 0.000010 0.999990 #> 998  0.999990 0.000010 0.999990 #> 999  0.999990 0.232707 0.999990 #> 1000 0.999990 0.182360 0.999990 #> 1001 0.999990 0.000010 0.604992 #> 1002 0.999990 0.000010 0.915171 #> 1003 0.999990 0.000010 0.915171 #> 1004 0.000010 0.999990 0.690879 #> 1005 0.999990 0.102728 0.999990 #> 1006 0.937315 0.999990 0.740304 #> 1007 0.999990 0.497739 0.080486 #> 1008 0.999990 0.586925 0.759349 #> 1009 0.999990 0.999990 0.518208 #> 1010 0.000010 0.999990 0.806271 #> 1011 0.999990 0.999990 0.668402 #> 1012 0.999990 0.000010 0.999990 #> 1013 0.999990 0.142738 0.999990 #> 1014 0.000010 0.999990 0.950304 #> 1015 0.999990 0.560540 0.999990 #> 1016 0.999990 0.000010 0.999990 #> 1017 0.189472 0.778452 0.745689 #> 1018 0.999990 0.000010 0.721627 #> 1019 0.999990 0.000010 0.999990 #> 1020 0.969136 0.000010 0.999990 #> 1021 0.999990 0.000010 0.999990 #> 1022 0.999990 0.000010 0.999990 #> 1023 0.999990 0.000010 0.999990 #> 1024 0.999990 0.000010 0.999990 #> 1025 0.234736 0.920942 0.963536 #> 1026 0.999990 0.081962 0.940874 #> 1027 0.999990 0.000010 0.999990 #> 1028 0.999990 0.000010 0.999990 #> 1029 0.999990 0.000010 0.999990 #> 1030 0.503834 0.345406 0.543156 #> 1031 0.999990 0.068642 0.999990 #> 1032 0.999990 0.999990 0.540337 #> 1033 0.186894 0.999990 0.799447 #> 1034 0.999990 0.713269 0.546763 #> 1035 0.999990 0.550362 0.999990 #> 1036 0.032128 0.806179 0.999990 #> 1037 0.999990 0.999990 0.304541 #> 1038 0.000010 0.953121 0.971204 #> 1039 0.999990 0.651014 0.968089 #> 1040 0.000010 0.999990 0.740014 #> 1041 0.999990 0.562745 0.999990 #> 1042 0.333118 0.999990 0.792432 #> 1043 0.999990 0.044949 0.999990 #> 1044 0.999990 0.343290 0.999990 #> 1045 0.999990 0.999990 0.559822 #> 1046 0.999990 0.999990 0.504972 #> 1047 0.999990 0.288723 0.999990 #> 1048 0.999990 0.000010 0.999990 #> 1049 0.999990 0.999990 0.643349 #> 1050 0.999990 0.000010 0.923089 #> 1051 0.999990 0.999990 0.606022 #> 1052 0.296001 0.795789 0.999990 #> 1053 0.999990 0.999990 0.621351 #> 1054 0.999990 0.000010 0.999990 #> 1055 0.999990 0.555504 0.999990 #> 1056 0.921770 0.671161 0.562632 #> 1057 0.072578 0.999990 0.667627 #> 1058 0.925711 0.999990 0.417148 #> 1059 0.999990 0.672043 0.683856 #> 1060 0.999990 0.388817 0.650540 #> 1061 0.548575 0.999990 0.849834 #> 1062 0.999990 0.951588 0.588686 #> 1063 0.933880 0.999990 0.757512 #> 1064 0.999990 0.999592 0.999990 #> 1065 0.999990 0.999990 0.437948 #> 1066 0.999990 0.999990 0.437948 #> 1067 0.000010 0.999990 0.870133 #> 1068 0.999990 0.999990 0.437948 #> 1069 0.999990 0.038438 0.999990 #> 1070 0.999990 0.038438 0.999990 #> 1071 0.999990 0.555505 0.999990 #> 1072 0.999990 0.000010 0.999990 #> 1073 0.999990 0.000010 0.999990 #> 1074 0.999990 0.999990 0.543116 #> 1075 0.999990 0.000010 0.999990 #> 1076 0.999990 0.501769 0.307524 #> 1077 0.000010 0.333332 0.999990 #> 1078 0.999990 0.498395 0.697072 #> 1079 0.999990 0.581510 0.875460 #> 1080 0.999990 0.944010 0.598332 #> 1081 0.059293 0.999990 0.999990 #> 1082 0.999990 0.200047 0.999990 #> 1083 0.000010 0.999990 0.845428 #> 1084 0.999990 0.049368 0.999990 #> 1085 0.999990 0.423597 0.999990 #> 1086 0.999990 0.000010 0.999990 #> 1087 0.999990 0.566573 0.999990 #> 1088 0.999990 0.000010 0.999990 #> 1089 0.999990 0.381679 0.942380 #> 1090 0.999990 0.381679 0.942380 #> 1091 0.999990 0.381679 0.942380 #> 1092 0.999990 0.369597 0.942417 #> 1093 0.967655 0.999990 0.382037 #> 1094 0.999990 0.462359 0.999990 #> 1095 0.999990 0.462359 0.999990 #> 1096 0.999990 0.191696 0.999990 #> 1097 0.000010 0.999990 0.959266 #> 1098 0.999990 0.351076 0.999990 #> 1099 0.999990 0.053140 0.904281 #> 1100 0.999990 0.999990 0.329024 #> 1101 0.000010 0.999990 0.917410 #> 1102 0.999990 0.000010 0.819662 #> 1103 0.999990 0.000010 0.999990 #> 1104 0.999990 0.999990 0.713006 #> 1105 0.999990 0.999990 0.624730 #> 1106 0.999990 0.000010 0.999990 #> 1107 0.272503 0.999990 0.999990 #> 1108 0.999990 0.000010 0.999990 #> 1109 0.999990 0.000010 0.381030 #> 1110 0.999990 0.446664 0.999990 #> 1111 0.999990 0.000010 0.772540 #> 1112 0.999990 0.999990 0.254004 #> 1113 0.999990 0.999990 0.365722 #> 1114 0.824158 0.999990 0.126732 #> 1115 0.999990 0.555950 0.999990 #> 1116 0.999990 0.000010 0.999990 #> 1117 0.999990 0.936699 0.399870 #> 1118 0.999990 0.000010 0.800519 #> 1119 0.409170 0.999990 0.999990 #> 1120 0.999990 0.190009 0.943978 #> 1121 0.999990 0.000010 0.999990 #> 1122 0.999990 0.000010 0.999990 #> 1123 0.999990 0.673776 0.736878 #> 1124 0.999990 0.362884 0.999990 #> 1125 0.999990 0.000010 0.999990 #> 1126 0.999990 0.000010 0.999990 #> 1127 0.999990 0.491335 0.869311 #> 1128 0.999990 0.000010 0.672471 #> 1129 0.000010 0.999990 0.742615 #> 1130 0.999990 0.362883 0.999990 #> 1131 0.964602 0.000010 0.690161 #> 1132 0.999990 0.362883 0.999990 #> 1133 0.999990 0.000010 0.887126 #> 1134 0.000010 0.999990 0.999990 #> 1135 0.052497 0.999990 0.913487 #> 1136 0.898062 0.999990 0.733584 #> 1137 0.999990 0.999990 0.434103 #> 1138 0.999990 0.776035 0.713206 #> 1139 0.999990 0.999990 0.697908 #> 1140 0.999990 0.343291 0.999990 #> 1141 0.999990 0.000010 0.886208 #> 1142 0.253511 0.999990 0.693575 #> 1143 0.999990 0.000010 0.999990 #> 1144 0.999990 0.000010 0.769674 #> 1145 0.999990 0.000010 0.769674 #> 1146 0.999990 0.000010 0.999990 #> 1147 0.999990 0.000010 0.450297 #> 1148 0.999990 0.000010 0.914436 #> 1149 0.999990 0.000010 0.999990 #> 1150 0.999990 0.917429 0.701237 #> 1151 0.999990 0.279974 0.999990 #> 1152 0.999990 0.158372 0.999990 #> 1153 0.304235 0.999990 0.999990 #> 1154 0.657161 0.999990 0.972624 #> 1155 0.895119 0.711118 0.297429 #> 1156 0.999990 0.279975 0.999990 #> 1157 0.999990 0.999990 0.694005 #> 1158 0.999990 0.000010 0.550598 #> 1159 0.999990 0.063626 0.999990 #> 1160 0.999990 0.898908 0.656558 #> 1161 0.999990 0.000010 0.539327 #> 1162 0.999990 0.625677 0.720879 #> 1163 0.744310 0.000010 0.999990 #> 1164 0.000010 0.999990 0.999990 #> 1165 0.000010 0.999990 0.999990 #> 1166 0.999990 0.372521 0.855218 #> 1167 0.980346 0.971158 0.595753 #> 1168 0.320715 0.999990 0.999990 #> 1169 0.999990 0.999990 0.535923 #> 1170 0.999990 0.471255 0.930538 #> 1171 0.355023 0.999990 0.848177 #> 1172 0.000010 0.999990 0.643740 #> 1173 0.000010 0.999990 0.999990 #> 1174 0.999990 0.000010 0.999990 #> 1175 0.999990 0.999990 0.669343 #> 1176 0.038427 0.999990 0.737133 #> 1177 0.235372 0.999990 0.999990 #> 1178 0.999990 0.000010 0.999990 #> 1179 0.000010 0.999990 0.677853 #> 1180 0.999990 0.680858 0.162306 #> 1181 0.283209 0.961167 0.696232 #> 1182 0.273721 0.999990 0.999990 #> 1183 0.000010 0.999990 0.999990 #> 1184 0.999990 0.000010 0.563539 #> 1185 0.999990 0.000010 0.513429 #> 1186 0.999990 0.742722 0.563843 #> 1187 0.955959 0.793900 0.895518 #> 1188 0.000010 0.999990 0.968091 #> 1189 0.999990 0.000010 0.970088 #> 1190 0.999990 0.108746 0.999990 #> 1191 0.999990 0.083315 0.999990 #> 1192 0.000010 0.999990 0.999990 #> 1193 0.999990 0.000010 0.790100 #> 1194 0.999990 0.254922 0.999990 #> 1195 0.999990 0.999990 0.643349 #> 1196 0.999990 0.254922 0.999990 #> 1197 0.999990 0.092089 0.999990 #> 1198 0.999990 0.092089 0.999990 #> 1199 0.858426 0.999990 0.831002 #> 1200 0.999990 0.299474 0.999990 #> 1201 0.999990 0.999990 0.468084 #> 1202 0.037590 0.999990 0.999990 #> 1203 0.999990 0.967248 0.705962 #> 1204 0.442679 0.799318 0.562166 #> 1205 0.556978 0.836565 0.442669 #> 1206 0.548288 0.830855 0.591913 #> 1207 0.999990 0.241744 0.999990 #> 1208 0.999990 0.999990 0.700574 #> 1209 0.999990 0.000010 0.999990 #> 1210 0.999990 0.000010 0.999990 #> 1211 0.000010 0.999990 0.833520 #> 1212 0.999990 0.266005 0.730149 #> 1213 0.999990 0.999990 0.681956 #> 1214 0.999990 0.000010 0.999990 #> 1215 0.999990 0.214762 0.999990 #> 1216 0.999990 0.083315 0.999990 #> 1217 0.999990 0.999990 0.535545 #> 1218 0.106961 0.471817 0.986257 #> 1219 0.999990 0.724809 0.398308 #> 1220 0.000010 0.999990 0.999990 #> 1221 0.999990 0.772412 0.999990 #> 1222 0.968850 0.496540 0.716293 #> 1223 0.999990 0.473801 0.999990 #> 1224 0.999990 0.743369 0.553455 #> 1225 0.999990 0.999990 0.609006 #> 1226 0.999990 0.000010 0.999990 #> 1227 0.999990 0.256659 0.999990 #> 1228 0.999990 0.044944 0.999990 #> 1229 0.999990 0.999990 0.696510 #> 1230 0.000010 0.957147 0.999990 #> 1231 0.999990 0.999990 0.620433 #> 1232 0.999990 0.000010 0.297868 #> 1233 0.999990 0.999990 0.544002 #> 1234 0.999990 0.999990 0.508234 #> 1235 0.999990 0.138509 0.999990 #> 1236 0.043306 0.523858 0.471590 #> 1237 0.061250 0.589832 0.330508 #> 1238 0.062063 0.486865 0.550906 #> 1239 0.999990 0.597344 0.999990 #> 1240 0.999990 0.472269 0.970193 #> 1241 0.377829 0.999990 0.274740 #> 1242 0.000048 0.010887 0.999990 #> 1243 0.999990 0.568936 0.999990 #> 1244 0.999990 0.000010 0.837994 #> 1245 0.999990 0.999990 0.615240 #> 1246 0.999990 0.000010 0.968934 #> 1247 0.999990 0.102618 0.501573 #> 1248 0.999990 0.368337 0.999990 #> 1249 0.999990 0.563217 0.999990 #> 1250 0.744605 0.999990 0.899212 #> 1251 0.999990 0.375848 0.999990 #> 1252 0.211734 0.999990 0.972833 #> 1253 0.999990 0.000010 0.757460 #> 1254 0.668753 0.874973 0.331247 #> 1255 0.347410 0.957083 0.999990 #> 1256 0.274403 0.999990 0.903844 #> 1257 0.999990 0.999990 0.390546 #> 1258 0.999990 0.098198 0.999990 #> 1259 0.937312 0.999990 0.681682 #> 1260 0.999990 0.000010 0.999990 #> 1261 0.000010 0.999990 0.699323 #> 1262 0.999990 0.422741 0.999990 #> 1263 0.999990 0.999990 0.604655 #> 1264 0.927911 0.677434 0.891524 #> 1265 0.031663 0.999990 0.999990 #> 1266 0.999990 0.454313 0.777453 #> 1267 0.176424 0.999990 0.999990 #> 1268 0.999990 0.038546 0.393077 #> 1269 0.999990 0.038546 0.393077 #> 1270 0.000010 0.999990 0.999990 #> 1271 0.999990 0.080387 0.950665 #> 1272 0.999990 0.013441 0.999990 #> 1273 0.000010 0.999990 0.682644 #> 1274 0.999990 0.999990 0.252673 #> 1275 0.999990 0.999990 0.290774 #> 1276 0.999990 0.000010 0.456575 #> 1277 0.896008 0.185322 0.838060 #> 1278 0.999990 0.000010 0.999990 #> 1279 0.999990 0.343291 0.999990 #> 1280 0.999990 0.343291 0.999990 #> 1281 0.999990 0.343291 0.999990 #> 1282 0.999990 0.343291 0.999990 #> 1283 0.999990 0.000010 0.555221 #> 1284 0.999990 0.999990 0.540352 #> 1285 0.999990 0.917359 0.193774 #> 1286 0.881813 0.999990 0.563428 #> 1287 0.881813 0.999990 0.563428 #> 1288 0.999990 0.999990 0.687228 #> 1289 0.999990 0.000010 0.999990 #> 1290 0.999990 0.516735 0.999990 #> 1291 0.999990 0.187829 0.768728 #> 1292 0.999990 0.000010 0.999990 #> 1293 0.000010 0.999990 0.999990 #> 1294 0.999990 0.059597 0.999990 #> 1295 0.999990 0.000010 0.948116 #> 1296 0.999990 0.999990 0.648485 #> 1297 0.999990 0.349284 0.999990 #> 1298 0.103298 0.859317 0.981351 #> 1299 0.999990 0.560540 0.999990 #> 1300 0.290612 0.999990 0.491068 #> 1301 0.999990 0.168434 0.328417 #> 1302 0.000010 0.999990 0.910385 #> 1303 0.999990 0.000010 0.926162 #> 1304 0.999990 0.142736 0.999990 #> 1305 0.695964 0.999990 0.937732 #> 1306 0.911940 0.475459 0.835790 #> 1307 0.402814 0.999990 0.357828 #> 1308 0.000010 0.999990 0.999990 #> 1309 0.999990 0.114343 0.695263 #> 1310 0.999990 0.259254 0.971564 #> 1311 0.037558 0.999990 0.813605 #> 1312 0.037747 0.999990 0.815011 #> 1313 0.953044 0.999990 0.431464 #> 1314 0.041983 0.999990 0.706837 #> 1315 0.746401 0.999990 0.837892 #> 1316 0.999990 0.355312 0.845774 #> 1317 0.000010 0.999990 0.803831 #> 1318 0.930287 0.999990 0.775461 #> 1319 0.000010 0.999990 0.648905 #> 1320 0.999990 0.000010 0.999990 #> 1321 0.000010 0.999990 0.896605 #> 1322 0.999990 0.999990 0.198099 #> 1323 0.999990 0.563217 0.999990 #> 1324 0.999990 0.148317 0.857055 #> 1325 0.999990 0.000010 0.744744 #> 1326 0.999990 0.148397 0.851648 #> 1327 0.000010 0.999990 0.708459 #> 1328 0.999990 0.515604 0.999990 #> 1329 0.999990 0.515604 0.999990 #> 1330 0.999990 0.000010 0.972057 #> 1331 0.132474 0.999990 0.999990 #> 1332 0.999990 0.000010 0.397480 #> 1333 0.999990 0.607526 0.999990 #> 1334 0.999990 0.999990 0.245096 #> 1335 0.000010 0.999990 0.943817 #> 1336 0.999990 0.999990 0.713078 #> 1337 0.077031 0.999990 0.999990 #> 1338 0.999990 0.098448 0.968820 #> 1339 0.043708 0.999990 0.835625 #> 1340 0.999990 0.000010 0.999990 #> 1341 0.999990 0.469109 0.999990 #> 1342 0.999990 0.000010 0.675038 #> 1343 0.999990 0.012029 0.834094 #> 1344 0.999990 0.309632 0.912132 #> 1345 0.999990 0.999990 0.580427 #> 1346 0.937366 0.895855 0.313153 #> 1347 0.060478 0.999990 0.725169 #> 1348 0.999990 0.999990 0.138744 #> 1349 0.000010 0.999990 0.864796 #> 1350 0.999990 0.905628 0.746301 #> 1351 0.999990 0.000010 0.870463 #> 1352 0.000010 0.999990 0.999990 #> 1353 0.999990 0.999990 0.254416 #> 1354 0.999990 0.049143 0.337218 #> 1355 0.042887 0.999990 0.664720 #> 1356 0.490834 0.728926 0.511738 #> 1357 0.999990 0.999990 0.642388 #> 1358 0.999990 0.422742 0.999990 #> 1359 0.999990 0.219821 0.936007 #> 1360 0.999990 0.000010 0.999990 #> 1361 0.000065 0.991682 0.995603 #> 1362 0.999990 0.000010 0.999990 #> 1363 0.999990 0.468148 0.999990 #> 1364 0.999990 0.381540 0.999990 #> 1365 0.999990 0.000010 0.373702 #> 1366 0.999990 0.000010 0.944020 #> 1367 0.999990 0.560540 0.999990 #> 1368 0.999990 0.000010 0.944020 #> 1369 0.999990 0.318185 0.810403 #> 1370 0.999990 0.999990 0.582177 #> 1371 0.999990 0.999990 0.616049 #> 1372 0.133633 0.999990 0.742475 #> 1373 0.999990 0.074703 0.999990 #> 1374 0.999990 0.000010 0.999990 #> 1375 0.999990 0.000010 0.515041 #> 1376 0.999990 0.617479 0.528974 #> 1377 0.999990 0.340572 0.727946 #> 1378 0.030264 0.948888 0.832640 #> 1379 0.517093 0.271305 0.733470 #> 1380 0.934618 0.249087 0.426336 #> 1381 0.999990 0.941495 0.765543 #> 1382 0.999990 0.956711 0.757594 #> 1383 0.000010 0.999990 0.798453 #> 1384 0.999990 0.209235 0.879479 #> 1385 0.999990 0.492689 0.767097 #> 1386 0.999990 0.000010 0.702154 #> 1387 0.999990 0.999990 0.645280 #> 1388 0.000010 0.999990 0.944915 #> 1389 0.999990 0.000010 0.576138 #> 1390 0.999990 0.000010 0.714593 #> 1391 0.999990 0.000010 0.697957 #> 1392 0.999990 0.499995 0.999990 #> 1393 0.999990 0.000010 0.760050 #> 1394 0.999990 0.295626 0.878991 #> 1395 0.999990 0.000010 0.799770 #> 1396 0.999990 0.402703 0.950779 #> 1397 0.999990 0.405465 0.482652 #> 1398 0.999990 0.519465 0.913433 #> 1399 0.999990 0.077395 0.375384 #> 1400 0.999990 0.429324 0.999990 #> 1401 0.999990 0.555954 0.999990 #> 1402 0.999990 0.999990 0.539651 #> 1403 0.999990 0.515604 0.999990 #> 1404 0.999990 0.515604 0.999990 #> 1405 0.999990 0.000010 0.999990 #> 1406 0.999990 0.605698 0.999990 #> 1407 0.999990 0.999990 0.710554 #> 1408 0.999990 0.098198 0.999990 #> 1409 0.409620 0.999990 0.999990 #> 1410 0.999990 0.473501 0.908462 #> 1411 0.999990 0.174711 0.999990 #> 1412 0.999990 0.000010 0.999990 #> 1413 0.999990 0.047996 0.999990 #> 1414 0.999990 0.355996 0.939649 #> 1415 0.999990 0.061815 0.940584 #> 1416 0.999990 0.061815 0.940584 #> 1417 0.999990 0.999990 0.547360 #> 1418 0.999990 0.331231 0.999990 #> 1419 0.671041 0.960509 0.692016 #> 1420 0.999990 0.043935 0.815723 #> 1421 0.999990 0.000010 0.814417 #> 1422 0.999990 0.343849 0.999990 #> 1423 0.999990 0.999990 0.499984 #> 1424 0.999990 0.000010 0.999990 #> 1425 0.999990 0.470289 0.999990 #> 1426 0.999990 0.276546 0.455315 #> 1427 0.999990 0.470289 0.999990 #> 1428 0.999990 0.999990 0.552605 #> 1429 0.999990 0.049631 0.943305 #> 1430 0.999990 0.560540 0.999990 #> 1431 0.999990 0.311643 0.999990 #> 1432 0.999990 0.266869 0.999990 #> 1433 0.999990 0.000010 0.690884 #> 1434 0.999990 0.999990 0.714150 #> 1435 0.999990 0.142738 0.999990 #> 1436 0.999990 0.287169 0.999990 #> 1437 0.999990 0.049821 0.906238 #> 1438 0.999990 0.049659 0.937583 #> 1439 0.000010 0.999990 0.856660 #> 1440 0.999990 0.999990 0.667450 #> 1441 0.999990 0.999990 0.682280 #> 1442 0.000010 0.999990 0.821699 #> 1443 0.999990 0.913192 0.766401 #> 1444 0.999990 0.913192 0.766401 #> 1445 0.337015 0.999990 0.999990 #> 1446 0.337015 0.999990 0.999990 #> 1447 0.999990 0.000010 0.662482 #> 1448 0.999990 0.000010 0.835684 #> 1449 0.999990 0.596967 0.999990 #> 1450 0.999990 0.000010 0.666017 #> 1451 0.999990 0.803922 0.705266 #> 1452 0.999990 0.000010 0.710633 #> 1453 0.999990 0.999990 0.639100 #> 1454 0.999990 0.555505 0.999990 #> 1455 0.176642 0.999990 0.955360 #> 1456 0.999990 0.000010 0.874376 #> 1457 0.999990 0.070274 0.902890 #> 1458 0.884420 0.999990 0.715655 #> 1459 0.999990 0.000010 0.999990 #> 1460 0.000010 0.999990 0.999990 #> 1461 0.999990 0.000010 0.571852 #> 1462 0.999990 0.000010 0.571852 #> 1463 0.000010 0.999990 0.999990 #> 1464 0.999990 0.575979 0.908851 #> 1465 0.999990 0.886726 0.379380 #> 1466 0.999990 0.555504 0.999990 #> 1467 0.999990 0.000010 0.444055 #> 1468 0.999990 0.433501 0.999990 #> 1469 0.832500 0.000010 0.928777 #> 1470 0.847067 0.000010 0.838461 #> 1471 0.999990 0.000010 0.999990 #> 1472 0.999990 0.999990 0.694005 #> 1473 0.999990 0.000010 0.999990 #> 1474 0.999990 0.000010 0.759364 #> 1475 0.999990 0.106740 0.772772 #> 1476 0.999990 0.000010 0.568734 #> 1477 0.310989 0.999990 0.999990 #> 1478 0.000010 0.999990 0.999990 #> 1479 0.999990 0.000010 0.723999 #> 1480 0.999990 0.000010 0.723999 #> 1481 0.390505 0.703302 0.921023 #> 1482 0.999990 0.000010 0.898081 #> 1483 0.000010 0.999990 0.999990 #> 1484 0.999990 0.000010 0.783844 #> 1485 0.029955 0.999990 0.642602 #> 1486 0.999990 0.999990 0.124633 #> 1487 0.999990 0.929549 0.216924 #> 1488 0.794617 0.999990 0.788390 #> 1489 0.999990 0.000010 0.999990 #> 1490 0.999990 0.000010 0.999990 #> 1491 0.452801 0.999990 0.999990 #> 1492 0.999990 0.759615 0.621951 #> 1493 0.999990 0.098198 0.999990 #> 1494 0.999990 0.999990 0.565971 #> 1495 0.999990 0.000010 0.770176 #> 1496 0.999990 0.279974 0.999990 #> 1497 0.913595 0.000010 0.609275 #> 1498 0.999990 0.000010 0.999990 #> 1499 0.000010 0.999990 0.866466 #> 1500 0.999990 0.999990 0.648217"},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/get_q_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Return a single Q matrix from a gt_admix object — get_q_matrix","title":"Return a single Q matrix from a gt_admix object — get_q_matrix","text":"function retrieves single Q matrix gt_admix object based specified k value run number.","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/get_q_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return a single Q matrix from a gt_admix object — get_q_matrix","text":"","code":"get_q_matrix(x, ..., k, run)"},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/get_q_matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Return a single Q matrix from a gt_admix object — get_q_matrix","text":"x gt_admix object containing multiple Q matrices ... used k k value desired Q matrix run run number desired Q matrix","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/get_q_matrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Return a single Q matrix from a gt_admix object — get_q_matrix","text":"single Q matrix gt_admix object","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/get_q_matrix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Return a single Q matrix from a gt_admix object — get_q_matrix","text":"","code":"# Read example gt_admix obejct admix_obj <-   readRDS(system.file(\"extdata\", \"anolis\", \"anole_adm_k3.rds\",     package = \"tidypopgen\"   ))  # Extract a Q matrix get_q_matrix(admix_obj, k = 3, run = 1) #>            .Q1      .Q2      .Q3 #>  [1,] 0.000010 0.000010 0.999980 #>  [2,] 0.000010 0.000010 0.999980 #>  [3,] 0.000010 0.999980 0.000010 #>  [4,] 0.000010 0.999980 0.000010 #>  [5,] 0.000010 0.999980 0.000010 #>  [6,] 0.999980 0.000010 0.000010 #>  [7,] 0.754153 0.000010 0.245837 #>  [8,] 0.999980 0.000010 0.000010 #>  [9,] 0.999980 0.000010 0.000010 #> [10,] 0.999980 0.000010 0.000010 #> [11,] 0.000010 0.999980 0.000010 #> [12,] 0.000010 0.967888 0.032102 #> [13,] 0.000010 0.224456 0.775534 #> [14,] 0.000010 0.999980 0.000010 #> [15,] 0.000010 0.000010 0.999980 #> [16,] 0.000010 0.999980 0.000010 #> [17,] 0.000247 0.000010 0.999743 #> [18,] 0.000010 0.999980 0.000010 #> [19,] 0.076782 0.000010 0.923208 #> [20,] 0.000010 0.000010 0.999980 #> [21,] 0.332415 0.000010 0.667575 #> [22,] 0.000010 0.000010 0.999980 #> [23,] 0.000010 0.000010 0.999980 #> [24,] 0.000010 0.000010 0.999980 #> [25,] 0.999980 0.000010 0.000010 #> [26,] 0.999980 0.000010 0.000010 #> [27,] 0.999980 0.000010 0.000010 #> [28,] 0.999980 0.000010 0.000010 #> [29,] 0.999980 0.000010 0.000010 #> [30,] 0.000016 0.999974 0.000010 #> [31,] 0.000010 0.000010 0.999980 #> [32,] 0.039869 0.000010 0.960121 #> [33,] 0.999980 0.000010 0.000010 #> [34,] 0.000010 0.999980 0.000010 #> [35,] 0.000010 0.000010 0.999980 #> [36,] 0.000010 0.221311 0.778679 #> [37,] 0.003767 0.265606 0.730627 #> [38,] 0.999980 0.000010 0.000010 #> [39,] 0.999980 0.000010 0.000010 #> [40,] 0.000010 0.000010 0.999980 #> [41,] 0.271323 0.000010 0.728667 #> [42,] 0.999980 0.000010 0.000010 #> [43,] 0.999980 0.000010 0.000010 #> [44,] 0.743485 0.000010 0.256505 #> [45,] 0.000010 0.993175 0.006815 #> [46,] 0.000010 0.999980 0.000010 #> attr(,\"class\") #> [1] \"q_matrix\" \"q_matrix\" \"matrix\"   \"array\"    #> attr(,\"id\") #>  [1] \"punc_BM288\"        \"punc_GN71\"         \"punc_H1907\"        #>  [4] \"punc_H1911\"        \"punc_H2546\"        \"punc_IBSPCRIB0361\" #>  [7] \"punc_ICST764\"      \"punc_JFT459\"       \"punc_JFT773\"       #> [10] \"punc_LG1299\"       \"punc_LSUMZH12577\"  \"punc_LSUMZH12751\"  #> [13] \"punc_LSUMZH13910\"  \"punc_LSUMZH14100\"  \"punc_LSUMZH14336\"  #> [16] \"punc_LSUMZH15476\"  \"punc_MPEG20846\"    \"punc_MPEG21348\"    #> [19] \"punc_MPEG22415\"    \"punc_MPEG24758\"    \"punc_MPEG26102\"    #> [22] \"punc_MPEG28489\"    \"punc_MPEG29314\"    \"punc_MPEG29943\"    #> [25] \"punc_MTR05978\"     \"punc_MTR12338\"     \"punc_MTR12511\"     #> [28] \"punc_MTR15267\"     \"punc_MTR17744\"     \"punc_MTR18550\"     #> [31] \"punc_MTR20798\"     \"punc_MTR21474\"     \"punc_MTR21545\"     #> [34] \"punc_MTR25584\"     \"punc_MTR28048\"     \"punc_MTR28401\"     #> [37] \"punc_MTR28593\"     \"punc_MTR34227\"     \"punc_MTR34414\"     #> [40] \"punc_MTR976723\"    \"punc_MTR978312\"    \"punc_MTRX1468\"     #> [43] \"punc_MTRX1478\"     \"punc_MUFAL9635\"    \"punc_PJD409\"       #> [46] \"punc_UNIBAN1670\"   #> attr(,\"group\") #>  [1] \"Amazonian_Forest\" \"Amazonian_Forest\" \"Amazonian_Forest\" \"Amazonian_Forest\" #>  [5] \"Amazonian_Forest\" \"Atlantic_Forest\"  \"Atlantic_Forest\"  \"Atlantic_Forest\"  #>  [9] \"Atlantic_Forest\"  \"Atlantic_Forest\"  \"Amazonian_Forest\" \"Amazonian_Forest\" #> [13] \"Amazonian_Forest\" \"Amazonian_Forest\" \"Amazonian_Forest\" \"Amazonian_Forest\" #> [17] \"Amazonian_Forest\" \"Amazonian_Forest\" \"Amazonian_Forest\" \"Amazonian_Forest\" #> [21] \"Amazonian_Forest\" \"Amazonian_Forest\" \"Amazonian_Forest\" \"Amazonian_Forest\" #> [25] \"Atlantic_Forest\"  \"Atlantic_Forest\"  \"Atlantic_Forest\"  \"Atlantic_Forest\"  #> [29] \"Atlantic_Forest\"  \"Amazonian_Forest\" \"Amazonian_Forest\" \"Amazonian_Forest\" #> [33] \"Atlantic_Forest\"  \"Amazonian_Forest\" \"Amazonian_Forest\" \"Amazonian_Forest\" #> [37] \"Amazonian_Forest\" \"Atlantic_Forest\"  \"Atlantic_Forest\"  \"Amazonian_Forest\" #> [41] \"Amazonian_Forest\" \"Atlantic_Forest\"  \"Atlantic_Forest\"  \"Atlantic_Forest\"  #> [45] \"Amazonian_Forest\" \"Amazonian_Forest\""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/gt_add_sf.html","id":null,"dir":"Reference","previous_headings":"","what":"Add an simple feature geometry to a gen_tibble — gt_add_sf","title":"Add an simple feature geometry to a gen_tibble — gt_add_sf","text":"gt_add_sf adds active sf geometry column gen_tibble object.  resulting gen_tbl inherits sf can used functions sf package. possible either create sf::sfc geometry column coordinates, provide existing geometry column (become active geometry sf).","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/gt_add_sf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add an simple feature geometry to a gen_tibble — gt_add_sf","text":"","code":"gt_add_sf(x, coords = NULL, crs = NULL, sfc_column = NULL)"},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/gt_add_sf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add an simple feature geometry to a gen_tibble — gt_add_sf","text":"x gen_tibble object coords vector length 2, giving names x y columns x (.e. coordinates, e.g. longitude latitude). coords provided, geometry column must provided. crs coordinate reference system coordinates. set, set default value sf::st_crs(4326). sfc_column name sf::sfc column used geometry","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/gt_add_sf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add an simple feature geometry to a gen_tibble — gt_add_sf","text":"gen_tibble object additional geometry column (thus belonging also sf class).","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/gt_add_sf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add an simple feature geometry to a gen_tibble — gt_add_sf","text":"","code":"example_gt <- load_example_gt(\"gen_tbl\")  # Add some coordinates example_gt <- example_gt %>% mutate(   longitude = c(0, 0, 2, 2, 0, 2, 2),   latitude = c(51, 51, 49, 49, 51, 41, 41) )  # Convert lat and long to sf: example_gt <- gt_add_sf(x = example_gt, coords = c(\"longitude\", \"latitude\"))  # Check class class(example_gt) #> [1] \"gen_tbl\"    \"sf\"         \"tbl_df\"     \"tbl\"        \"data.frame\""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/gt_admix_reorder_q.html","id":null,"dir":"Reference","previous_headings":"","what":"Reorder the q matrices based on the grouping variable — gt_admix_reorder_q","title":"Reorder the q matrices based on the grouping variable — gt_admix_reorder_q","text":"function reorders q matrices gt_admix object based grouping variable. useful plotting samples group adjacent q matrix.","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/gt_admix_reorder_q.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reorder the q matrices based on the grouping variable — gt_admix_reorder_q","text":"","code":"gt_admix_reorder_q(x, group = NULL)"},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/gt_admix_reorder_q.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reorder the q matrices based on the grouping variable — gt_admix_reorder_q","text":"x gt_admix object, possibly grouping variable group character vector grouping variable (grouping variable info x)","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/gt_admix_reorder_q.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reorder the q matrices based on the grouping variable — gt_admix_reorder_q","text":"gt_admix object q matrices reordered","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/gt_admix_reorder_q.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Reorder the q matrices based on the grouping variable — gt_admix_reorder_q","text":"","code":"# run the example only if we have the package installed if (requireNamespace(\"LEA\", quietly = TRUE)) {   example_gt <- load_example_gt(\"gen_tbl\")    # Create a gt_admix object   admix_obj <- example_gt %>% gt_snmf(k = 1:3, project = \"force\")    # The $id in admix_obj is the same as in the gen_tibble   admix_obj$id    # Reorder the q matrices based on the grouping variable   admix_obj <- gt_admix_reorder_q(admix_obj,     group = example_gt$population   )    # The $id in admix_obj is now reordered according to the population   admix_obj$id } #> [1] \"a\" \"b\" \"e\" \"c\" \"d\" \"f\" \"g\""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/gt_admixture.html","id":null,"dir":"Reference","previous_headings":"","what":"Run ADMIXTURE from R — gt_admixture","title":"Run ADMIXTURE from R — gt_admixture","text":"function runs ADMIXTURE, taking either gen_tibble file input. wrapper runs ADMIXTURE command line, reads output R. can run multiple values k multiple repeats k.","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/gt_admixture.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run ADMIXTURE from R — gt_admixture","text":"","code":"gt_admixture(   x,   k,   n_runs = 1,   crossval = FALSE,   n_cores = 1,   seed = NULL,   conda_env = \"auto\" )"},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/gt_admixture.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run ADMIXTURE from R — gt_admixture","text":"x gen_tibble character giving path input PLINK bed file k integer giving number clusters n_runs number runs k value (defaults 1) crossval boolean, cross validation used assess fit (defaults FALSE) n_cores number cores (defaults 1) seed seed random number generator (defaults NULL) conda_env name conda environment use. \"none\" forces use local copy, whilst string direct function use custom conda environment.","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/gt_admixture.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run ADMIXTURE from R — gt_admixture","text":"object class gt_admix consisting list following elements: k number clusters Q matrix admixture proportions P matrix allele frequencies log log output generated ADMIXTURE (usually printed screen running command line) cv cross validation error (crossval TRUE) loglik log likelihood model id id column input gen_tibble (applicable) group group column input gen_tibble (applicable)","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/gt_admixture.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Run ADMIXTURE from R — gt_admixture","text":"wrapper command line program ADMIXTURE. can either use binary present main environment, use copy installed conda environment.","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/gt_admixture.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Run ADMIXTURE from R — gt_admixture","text":"Alexander, D.H., Novembre, J. Lange, K. (2009) ‘Fast model-based estimation ancestry unrelated individuals’, Genome Research, 19(9), pp. 1655–1664. Available : https://doi.org/10.1101/gr.094052.109.","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/gt_admixture.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run ADMIXTURE from R — gt_admixture","text":"","code":"# run the example only if we have the package installed if (FALSE) { # \\dontrun{ bed_file <-   system.file(\"extdata\", \"lobster\", \"lobster.bed\", package = \"tidypopgen\") lobsters <- gen_tibble(bed_file,   backingfile = tempfile(\"lobsters\"),   quiet = TRUE ) lobsters <- lobsters %>% group_by(population) gt_admixture(lobsters,   k = 2:3, seed = c(1, 2),   n_runs = 2, crossval = TRUE ) } # }"},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/gt_as_genind.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a gen_tibble to a genind object from adegenet — gt_as_genind","title":"Convert a gen_tibble to a genind object from adegenet — gt_as_genind","text":"function converts gen_tibble genind object adegenet","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/gt_as_genind.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a gen_tibble to a genind object from adegenet — gt_as_genind","text":"","code":"gt_as_genind(x)"},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/gt_as_genind.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a gen_tibble to a genind object from adegenet — gt_as_genind","text":"x gen_tibble, population coded 'population'","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/gt_as_genind.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert a gen_tibble to a genind object from adegenet — gt_as_genind","text":"genind object","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/gt_as_genind.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert a gen_tibble to a genind object from adegenet — gt_as_genind","text":"","code":"example_gt <- load_example_gt(\"gen_tbl\")  # Convert to genind gt_genind <- example_gt %>% gt_as_genind()  # Check object class class(gt_genind) #> [1] \"genind\" #> attr(,\"package\") #> [1] \"adegenet\""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/gt_as_genlight.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a gen_tibble to a genlight object from adegenet — gt_as_genlight","title":"Convert a gen_tibble to a genlight object from adegenet — gt_as_genlight","text":"function converts gen_tibble genlight object adegenet","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/gt_as_genlight.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a gen_tibble to a genlight object from adegenet — gt_as_genlight","text":"","code":"gt_as_genlight(x)"},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/gt_as_genlight.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a gen_tibble to a genlight object from adegenet — gt_as_genlight","text":"x gen_tibble, population coded 'population'","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/gt_as_genlight.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert a gen_tibble to a genlight object from adegenet — gt_as_genlight","text":"genlight object","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/gt_as_genlight.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert a gen_tibble to a genlight object from adegenet — gt_as_genlight","text":"","code":"example_gt <- load_example_gt(\"gen_tbl\")  # Convert to genlight gt_genlight <- example_gt %>% gt_as_genlight()  # Check object class class(gt_genlight) #> [1] \"genlight\" #> attr(,\"package\") #> [1] \"adegenet\""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/gt_as_geno_lea.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a gentibble to a .geno file for sNMF from the LEA package — gt_as_geno_lea","title":"Convert a gentibble to a .geno file for sNMF from the LEA package — gt_as_geno_lea","text":"function writes .geno file gen_tibble. Unless file path given, file suffix .geno written location .rds .bk files underpin gen_tibble.","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/gt_as_geno_lea.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a gentibble to a .geno file for sNMF from the LEA package — gt_as_geno_lea","text":"","code":"gt_as_geno_lea(x, file = NULL)"},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/gt_as_geno_lea.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a gentibble to a .geno file for sNMF from the LEA package — gt_as_geno_lea","text":"x gen_tibble file .geno filename path, NULL (default) use location backing files.","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/gt_as_geno_lea.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert a gentibble to a .geno file for sNMF from the LEA package — gt_as_geno_lea","text":"path .geno file","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/gt_as_geno_lea.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert a gentibble to a .geno file for sNMF from the LEA package — gt_as_geno_lea","text":"NOTE currently read data memory write file, function suitable large datasets.","code":""},{"path":[]},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/gt_as_geno_lea.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert a gentibble to a .geno file for sNMF from the LEA package — gt_as_geno_lea","text":"","code":"example_gt <- load_example_gt(\"gen_tbl\")  # Write a geno file gt_as_geno_lea(example_gt, file = paste0(tempfile(), \"_example.geno\")) #> [1] \"/tmp/RtmpblzTyA/file239744ef52a_example.geno\""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/gt_as_hierfstat.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a gen_tibble to a data.frame compatible with hierfstat — gt_as_hierfstat","title":"Convert a gen_tibble to a data.frame compatible with hierfstat — gt_as_hierfstat","text":"function converts gen_tibble data.frame formatted used hierfstat functions.","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/gt_as_hierfstat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a gen_tibble to a data.frame compatible with hierfstat — gt_as_hierfstat","text":"","code":"gt_as_hierfstat(x)"},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/gt_as_hierfstat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a gen_tibble to a data.frame compatible with hierfstat — gt_as_hierfstat","text":"x gen_tibble, population coded 'population'","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/gt_as_hierfstat.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert a gen_tibble to a data.frame compatible with hierfstat — gt_as_hierfstat","text":"data.frame column 'pop' column representing genotypes (alleles recoded 1 2)","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/gt_as_hierfstat.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert a gen_tibble to a data.frame compatible with hierfstat — gt_as_hierfstat","text":"","code":"example_gt <- load_example_gt(\"gen_tbl\")  # Convert to hierfstat format gt_hierfstat <- example_gt %>% gt_as_hierfstat()  # Check object class class(gt_hierfstat) #> [1] \"data.frame\""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/gt_as_plink.html","id":null,"dir":"Reference","previous_headings":"","what":"Export a gen_tibble object to PLINK bed format — gt_as_plink","title":"Export a gen_tibble object to PLINK bed format — gt_as_plink","text":"function exports information gen_tibble object PLINK bed, ped raw file (associated files, .e. .bim .fam .bed; .fam .ped).","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/gt_as_plink.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Export a gen_tibble object to PLINK bed format — gt_as_plink","text":"","code":"gt_as_plink(   x,   file = NULL,   type = c(\"bed\", \"ped\", \"raw\"),   overwrite = TRUE,   chromosomes_as_int = FALSE )"},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/gt_as_plink.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Export a gen_tibble object to PLINK bed format — gt_as_plink","text":"x gen_tibble object file character string giving path output file. left NULL, output file path prefix backingfile. type one \"bed\", \"ped\" \"raw\" overwrite boolean whether overwrite file. chromosomes_as_int boolean whether use integer representation chromosomes","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/gt_as_plink.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Export a gen_tibble object to PLINK bed format — gt_as_plink","text":"path saved file","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/gt_as_plink.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Export a gen_tibble object to PLINK bed format — gt_as_plink","text":"gen_tibble read vcf format, family.ID resulting plink files sample.ID. gen_tibble grouping variable, used family.ID resulting plink files. NOTE writing bed optimised speed, writing ped raw slower, especially large datasets.","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/gt_as_plink.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Export a gen_tibble object to PLINK bed format — gt_as_plink","text":"","code":"example_gt <- load_example_gt(\"gen_tbl\")  # Write a bed file example_gt %>% gt_as_plink(type = \"bed\", file = paste0(tempfile(), \"_plink\")) #> [1] \"/tmp/RtmpblzTyA/file23974d87485e_plink.bed\"  # Write a ped file example_gt %>% gt_as_plink(type = \"ped\", file = paste0(tempfile(), \"_plink\")) #> [1] \"/tmp/RtmpblzTyA/file239733eac005_plink.ped\"  # Write a raw file example_gt %>% gt_as_plink(type = \"raw\", file = paste0(tempfile(), \"_plink\")) #> [1] \"/tmp/RtmpblzTyA/file23974741bb57_plink.raw\""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/gt_as_vcf.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a gen_tibble to a VCF — gt_as_vcf","title":"Convert a gen_tibble to a VCF — gt_as_vcf","text":"function write VCF gen_tibble.","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/gt_as_vcf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a gen_tibble to a VCF — gt_as_vcf","text":"","code":"gt_as_vcf(x, file = NULL, chunk_size = NULL, overwrite = FALSE)"},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/gt_as_vcf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a gen_tibble to a VCF — gt_as_vcf","text":"x gen_tibble, population coded 'population' file .vcf file name path, NULL (default) use location backing files. chunk_size number loci processed time. Automatically set left NULL overwrite logical, file overwritten already exists?","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/gt_as_vcf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert a gen_tibble to a VCF — gt_as_vcf","text":"path .vcf file","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/gt_as_vcf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert a gen_tibble to a VCF — gt_as_vcf","text":"","code":"example_gt <- load_example_gt(\"gen_tbl\")  # Write a vcf file example_gt %>% gt_as_vcf() #> [1] \"/tmp/RtmpblzTyA/file239729e4ab0.vcf\""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/gt_cluster_pca.html","id":null,"dir":"Reference","previous_headings":"","what":"Run K-clustering on principal components — gt_cluster_pca","title":"Run K-clustering on principal components — gt_cluster_pca","text":"function implements clustering procedure used Discriminant Analysis Principal Components (DAPC, Jombart et al. 2010). procedure consists running successive K-means increasing number clusters (k), transforming data using principal component analysis (PCA). model, several statistical measures goodness fit computed, allows choose optimal k using function gt_cluster_pca_best_k(). See details description select optimal k vignette(\"adegenet-dapc\") tutorial.","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/gt_cluster_pca.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run K-clustering on principal components — gt_cluster_pca","text":"","code":"gt_cluster_pca(   x = NULL,   n_pca = NULL,   k_clusters = c(1, round(nrow(x$u)/10)),   method = c(\"kmeans\", \"ward\"),   n_iter = 1e+05,   n_start = 10,   quiet = FALSE )"},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/gt_cluster_pca.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run K-clustering on principal components — gt_cluster_pca","text":"x gt_pca object returned one gt_pca_* functions. n_pca number principal components fed LDA. k_clusters number clusters explore, either single value, vector length 2 giving minimum maximum (e.g. 1:5). left NULL, use 1 number pca components divided 10 (reasonable guess). method either 'kmeans' 'ward' n_iter number iterations kmeans (used method=\"kmeans\") n_start number starting points kmeans (used method=\"kmeans\") quiet boolean whether silence outputting information screen (defaults FALSE)","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/gt_cluster_pca.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run K-clustering on principal components — gt_cluster_pca","text":"gt_cluster_pca object, subclass gt_pca additional element 'cluster', list elements: 'method' clustering method (either kmeans ward) 'n_pca' number principal components used clustering 'k' k values explored function 'WSS' within sum squares k 'AIC' AIC k 'BIC' BIC k 'groups' list, element giving group assignments given k","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/gt_cluster_pca.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Run K-clustering on principal components — gt_cluster_pca","text":"Jombart T, Devillard S Balloux F (2010) Discriminant analysis principal components: new method analysis genetically structured populations. BMC Genetics 11:94. doi:10.1186/1471-2156-11-94","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/gt_cluster_pca.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run K-clustering on principal components — gt_cluster_pca","text":"","code":"# Create a gen_tibble of lobster genotypes bed_file <-   system.file(\"extdata\", \"lobster\", \"lobster.bed\", package = \"tidypopgen\") lobsters <- gen_tibble(bed_file,   backingfile = tempfile(\"lobsters\"),   quiet = TRUE )  # Remove monomorphic loci and impute lobsters <- lobsters %>% select_loci_if(loci_maf(genotypes) > 0) lobsters <- gt_impute_simple(lobsters, method = \"mode\")  # Create PCA object pca <- gt_pca_partialSVD(lobsters)  # Run clustering on the first 10 PCs gt_cluster_pca(   x = pca,   n_pca = 10,   k_clusters = c(1, 5),   method = \"kmeans\",   n_iter = 1e5,   n_start = 10,   quiet = FALSE ) #>  === Clustering of PCs of gen_tibble object === #> Method ($clusters$method):  kmeans #>  #> N of PCs ($clusters$n_pca):  10 #>  #> K for clustering ($clusters$k): 1 5 #>  #> The clustering information is in the slot $clusters; #> other slots are the same as in a gt_pca object used for clustering #>   # Alternatively, use method \"ward\" gt_cluster_pca(   x = pca,   n_pca = 10,   k_clusters = c(1, 5),   method = \"ward\",   quiet = FALSE ) #>  === Clustering of PCs of gen_tibble object === #> Method ($clusters$method):  ward #>  #> N of PCs ($clusters$n_pca):  10 #>  #> K for clustering ($clusters$k): 1 5 #>  #> The clustering information is in the slot $clusters; #> other slots are the same as in a gt_pca object used for clustering #>"},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/gt_cluster_pca_best_k.html","id":null,"dir":"Reference","previous_headings":"","what":"Find the best number of clusters based on principal components — gt_cluster_pca_best_k","title":"Find the best number of clusters based on principal components — gt_cluster_pca_best_k","text":"function selects best k value based chosen metric criterion. equivalent plotting metric k values, selecting k fulfills given criterion (see details explanation criterion). function simply adds element 'best_k' gt_cluster_pca returned gt_cluster_pca(). choice can -ridden simply assigning different value element (e.g. object x desired k 8, simply use x$best_k <- 8)","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/gt_cluster_pca_best_k.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find the best number of clusters based on principal components — gt_cluster_pca_best_k","text":"","code":"gt_cluster_pca_best_k(   x,   stat = c(\"BIC\", \"AIC\", \"WSS\"),   criterion = c(\"diffNgroup\", \"min\", \"goesup\", \"smoothNgoesup\", \"goodfit\"),   quiet = FALSE )"},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/gt_cluster_pca_best_k.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find the best number of clusters based on principal components — gt_cluster_pca_best_k","text":"x gt_cluster_pca object obtained gt_cluster_pca() stat statistics, one \"BIC\", \"AIC\" \"WSS\" criterion one \"diffNgroup\", \"min\", \"goesup\", \"smoothNgoesup\", \"goodfit\", see details discussion approach. quiet boolean whether silence outputting information screen (defaults FALSE)","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/gt_cluster_pca_best_k.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find the best number of clusters based on principal components — gt_cluster_pca_best_k","text":"'gt_cluster_pca' object added element 'best_k'","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/gt_cluster_pca_best_k.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Find the best number of clusters based on principal components — gt_cluster_pca_best_k","text":"analysis data simulated various population genetics models (see reference) suggested ad-hoc rule selection optimal number clusters. First important result BIC seems efficient AIC WSS select appropriate number clusters (see example). rule thumb consists increasing K longer leads appreciable improvement fit (.e., decrease BIC). simple models (island models), BIC decreases reaches optimal K, increases. cases, best rule amounts choosing lowest K. models stepping stones, decrease BIC often continues optimal K, much less steep, change slope can taken indication best k lies. function provides programmatic way select k. Note highly recommended look graph BIC versus numbers clusters, understand validate programmatic selection. criteria available function : \"diffNgroup\": differences successive values summary statistics (default, BIC) split two groups using Ward's clustering method (see ?hclust), differentiate sharp decrease mild decreases increases. retained K one first group switch. criterion appears work well island/hierarchical models, decently isolation distance models, albeit instability. can confounded initial, sharp decrease test statistics. UNSURE CRITERION USE, USE ONE. \"min\": model minimum summary statistics (specified stat argument, BIC default) retained. likely work simple island model, using BIC. likely fail models relating stepping stones, BIC always decreases (albeit small amount) K increases. general, approach tends -estimate number clusters. \"goesup\": selected model K increasing number clusters leads increasing summary statistics. Suffers inaccuracy, since ) steep decrease might follow small 'bump' increase statistics, ii) increase might never happen, happen negligible decreases. likely work clear-cut island models. \"smoothNgoesup\": variant \"goesup\", summary statistics first smoothed using lowess approach. meant accurate \"goesup\" less prone stopping small 'bumps' decrease statistics. \"goodfit\": another criterion seeking good fit minimum number clusters. approach rely differences successive statistics, absolute fit. selects model smallest K overall fit given threshold.","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/gt_cluster_pca_best_k.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Find the best number of clusters based on principal components — gt_cluster_pca_best_k","text":"Jombart T, Devillard S Balloux F (2010) Discriminant analysis principal components: new method analysis genetically structured populations. BMC Genetics 11:94. doi:10.1186/1471-2156-11-94","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/gt_cluster_pca_best_k.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find the best number of clusters based on principal components — gt_cluster_pca_best_k","text":"","code":"# Create a gen_tibble of lobster genotypes bed_file <-   system.file(\"extdata\", \"lobster\", \"lobster.bed\", package = \"tidypopgen\") lobsters <- gen_tibble(bed_file,   backingfile = tempfile(\"lobsters\"),   quiet = TRUE )  # Remove monomorphic loci and impute lobsters <- lobsters %>% select_loci_if(loci_maf(genotypes) > 0) lobsters <- gt_impute_simple(lobsters, method = \"mode\")  # Create PCA object pca <- gt_pca_partialSVD(lobsters)  # Run clustering on the first 10 PCs cluster_pca <- gt_cluster_pca(   x = pca,   n_pca = 10,   k_clusters = c(1, 5),   method = \"kmeans\",   n_iter = 1e5,   n_start = 10,   quiet = FALSE )  # Find best K through minimum BIC cluster_pca <- gt_cluster_pca_best_k(cluster_pca,   stat = \"BIC\",   criterion = \"min\",   quiet = FALSE ) #> Using BIC with criterion min: 5 clusters # Best K is stored in the object cluster_pca$best_k #> [1] 5"},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/gt_dapc.html","id":null,"dir":"Reference","previous_headings":"","what":"Discriminant Analysis of Principal Components for gen_tibble — gt_dapc","title":"Discriminant Analysis of Principal Components for gen_tibble — gt_dapc","text":"function implements Discriminant Analysis Principal Components (DAPC, Jombart et al. 2010). method describes diversity pre-defined groups. groups unknown, use gt_cluster_pca() infer genetic clusters. See 'details' section succinct description method, vignette package adegenet (\"adegenet-dapc\") tutorial.","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/gt_dapc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Discriminant Analysis of Principal Components for gen_tibble — gt_dapc","text":"","code":"gt_dapc(x, pop = NULL, n_pca = NULL, n_da = NULL, loadings_by_locus = TRUE)"},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/gt_dapc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Discriminant Analysis of Principal Components for gen_tibble — gt_dapc","text":"x object class gt_pca, subclass gt_cluster_pca pop either factor indicating group membership individuals; integer defining desired k x gt_cluster_pca; NULL, 'x' gt_cluster_pca contain element 'best_k', usually generated gt_cluster_pca_best_k(), used select clustering level. n_pca number principal components used Discriminant Analysis. NULL, k-1 used. n_da integer indicating number axes retained Discriminant Analysis step. loadings_by_locus logical indicating whether loadings contribution locus stored (TRUE, default) (FALSE). output can useful, can also create large matrices lot loci many dimensions.","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/gt_dapc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Discriminant Analysis of Principal Components for gen_tibble — gt_dapc","text":"object class adegenet::dapc","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/gt_dapc.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Discriminant Analysis of Principal Components for gen_tibble — gt_dapc","text":"Discriminant Analysis Principal Components (DAPC) designed investigate genetic structure biological populations. multivariate method consists two-steps procedure. First, genetic data transformed (centred, possibly scaled) submitted Principal Component Analysis (PCA). Second, principal components PCA submitted Linear Discriminant Analysis (LDA). trivial matrix operation allows express discriminant functions linear combination alleles, therefore allowing one compute allele contributions. details computation DAPC found indicated reference. Results can visualised autoplot.gt_dapc(), see help method available plots. also gt_dapc_tidiers manipulating results. moment, function returns objects class adegenet::dapc compatible methods adegenet; graphical methods DAPC documented adegenet::scatter.dapc (see ?scatter.dapc). likely change future, make sure rely objects remaining compatible. function aligns guidelines proposed Thia (2023) standardized application DAPC genotype data. default settings designed follow recommendations, number principal components (n_pca) defaults smaller k-1 number available principal components (k number populations clusters), number discriminant functions (n_da) set minimum k-1 n_pca. user can override defaults specifying n_pca n_da arguments, caution advised adjusting n_pca avoid potential overfitting. recommend users consult guidelines consider individual dataset ensure best practices. Note current method predict scores individuals included original analysis. currently mechanism store pca information object, needed prediction.","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/gt_dapc.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Discriminant Analysis of Principal Components for gen_tibble — gt_dapc","text":"Jombart T, Devillard S Balloux F (2010) Discriminant analysis principal components: new method analysis genetically structured populations. BMC Genetics 11:94. doi:10.1186/1471-2156-11-94 Thia, J. . (2023). Guidelines standardizing application discriminant analysis principal components genotype data. Molecular Ecology Resources, 23, 523–538. https://doi.org/10.1111/1755-0998.13706","code":""},{"path":[]},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/gt_dapc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Discriminant Analysis of Principal Components for gen_tibble — gt_dapc","text":"","code":"# Create a gen_tibble of lobster genotypes bed_file <-   system.file(\"extdata\", \"lobster\", \"lobster.bed\", package = \"tidypopgen\") lobsters <- gen_tibble(bed_file,   backingfile = tempfile(\"lobsters\"),   quiet = TRUE )  # Remove monomorphic loci and impute lobsters <- lobsters %>% select_loci_if(loci_maf(genotypes) > 0) lobsters <- gt_impute_simple(lobsters, method = \"mode\")  # Create PCA object pca <- gt_pca_partialSVD(lobsters)  # Run DAPC on the `gt_pca` object, providing `pop` as factor populations <- as.factor(lobsters$population) gt_dapc(pca, n_pca = 6, n_da = 2, pop = populations) #>  === DAPC of gen_tibble object === #> Call ($call):gt_dapc(x = pca, pop = populations, n_pca = 6, n_da = 2) #>  #> Eigenvalues ($eig): #>  225.2 33.397 2.285 0.283  #>  #> LD scores ($ind.coord): #>  matrix with 176 rows (individuals) and 2 columns (LD axes)  #>  #> Loadings by PC ($loadings): #>  matrix with 6 rows (PC axes) and 2 columns (LD axes)  #>  #> Loadings by locus($var.load): #>  matrix with 79 rows (loci) and 2 columns (LD axes)  #>   # Run clustering on the first 10 PCs cluster_pca <- gt_cluster_pca(   x = pca,   n_pca = 10,   k_clusters = c(1, 5),   method = \"kmeans\",   n_iter = 1e5,   n_start = 10,   quiet = FALSE )  # Find best k cluster_pca <- gt_cluster_pca_best_k(cluster_pca,   stat = \"BIC\",   criterion = \"min\" ) #> Using BIC with criterion min: 5 clusters  # Run DAPC on the `gt_cluster_pca` object gt_dapc(cluster_pca, n_pca = 10, n_da = 2) #>  === DAPC of gen_tibble object === #> Call ($call):gt_dapc(x = cluster_pca, n_pca = 10, n_da = 2) #>  #> Eigenvalues ($eig): #>  223.924 153.292 52.397 1.574  #>  #> LD scores ($ind.coord): #>  matrix with 176 rows (individuals) and 2 columns (LD axes)  #>  #> Loadings by PC ($loadings): #>  matrix with 10 rows (PC axes) and 2 columns (LD axes)  #>  #> Loadings by locus($var.load): #>  matrix with 79 rows (loci) and 2 columns (LD axes)  #>   #  should be stored (TRUE, default) or not (FALSE). This information is #  required to predict group membership of new individuals using predict, but #  makes the object slightly bigger."},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/gt_extract_f2.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute and store blocked f2 statistics for ADMIXTOOLS 2 — gt_extract_f2","title":"Compute and store blocked f2 statistics for ADMIXTOOLS 2 — gt_extract_f2","text":"Compute store blocked f2 statistics ADMIXTOOLS 2","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/gt_extract_f2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute and store blocked f2 statistics for ADMIXTOOLS 2 — gt_extract_f2","text":"","code":"gt_extract_f2(   .x,   outdir = NULL,   blgsize = 0.05,   maxmem = 8000,   maxmiss = 0,   minmaf = 0,   maxmaf = 0.5,   minac2 = FALSE,   outpop = NULL,   outpop_scale = TRUE,   transitions = TRUE,   transversions = TRUE,   overwrite = FALSE,   adjust_pseudohaploid = NULL,   fst = TRUE,   afprod = TRUE,   poly_only = c(\"f2\"),   apply_corr = TRUE,   n_cores = 1,   quiet = FALSE )"},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/gt_extract_f2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute and store blocked f2 statistics for ADMIXTOOLS 2 — gt_extract_f2","text":".x gen_tibble outdir Directory data stored. blgsize SNP block size Morgan. Default 0.05 (5 cM). blgsize 100 greater, interpreted base pair distance rather centimorgan distance. maxmem Maximum amount memory used. required amount memory exceeds maxmem, allele frequency data split blocks, computation performed separately block pair. put precise cap amount memory used (used point). Set parameter lower values run memory running function. Set higher values function slow lots memory. maxmiss Discard SNPs missing fraction populations higher maxmiss minmaf Discard SNPs minor allele frequency less minmaf maxmaf Discard SNPs minor allele frequency greater maxmaf minac2 Discard SNPs allele count lower 2 population (default FALSE). option set TRUE computing f3-statistics one population consists mostly pseudohaploid samples. Otherwise heterozygosity estimates thus f3-estimates can biased. minac2 == 2 discard SNPs allele count lower 2 non-singleton population (option experimental based hypothesis using SNPs allele count lower 2 leads biases non-singleton populations). Note minac2 option discards SNPs allele count lower 2 population, qp3pop function discard SNPs allele count lower 2 first (target) population (first argument prefix genotype file; .e. applied directly genotype file, via precomputing f2 gen_tibble). outpop Keep SNPs heterozygous population outpop_scale Scale f2-statistics inverse outpop heterozygosity (1/(p*(1-p))). Providing outpop setting outpop_scale TRUE give results original qpGraph outpop parameter set, disadvantage treating one population different others. may limit use f2-statistics models. transitions Set FALSE exclude transition SNPs transversions Set FALSE exclude transversion SNPs overwrite Overwrite existing files outdir adjust_pseudohaploid Genotypes pseudohaploid samples usually coded 0 2, even though one allele observed. adjust_pseudohaploid ensures observed allele count increases 1 pseudohaploid sample. TRUE (default), samples genotypes coded 1 among first 1000 SNPs automatically identified pseudohaploid. leads slightly accurate estimates f-statistics. Setting parameter FALSE treats samples diploid equivalent ADMIXTOOLS  inbreed: option. Setting adjust_pseudohaploid integer n check first n SNPs instead first 1000 SNPs. NOW DEPRECATED, set ploidy gen_tibble gt_pseudohaploid(). fst Write files pairwise FST every population pair. Setting FALSE can make extract_f2 faster require less memory. afprod Write files allele frequency products every population pair. Setting FALSE can make extract_f2 faster require less memory. poly_only Specify whether SNPs identical allele frequencies every population discarded (poly_only = TRUE), whether used (poly_only = FALSE). default (poly_only = c(\"f2\")), SNPs used compute FST allele frequency products, compute f2 (default option original ADMIXTOOLS). apply_corr Apply small-sample-size correction computing f2-statistics (default TRUE) n_cores Parallelize computation across n_cores cores. quiet Suppress printing progress updates","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/gt_extract_f2.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute and store blocked f2 statistics for ADMIXTOOLS 2 — gt_extract_f2","text":"SNP metadata (invisibly)","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/gt_extract_f2.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Compute and store blocked f2 statistics for ADMIXTOOLS 2 — gt_extract_f2","text":"Maier R, Patterson N (2024). admixtools: Inferring demographic history genetic data. R package version 2.0.4, https://github.com/uqrmaie1/admixtools. function prepares data various ADMIXTOOLS 2 functions package ADMIXTOOLS 2. takes gen_tibble, computes allele frequencies blocked f2-statistics, writes results outdir. equivalent admixtools::extract_f2().","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/gt_extract_f2.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute and store blocked f2 statistics for ADMIXTOOLS 2 — gt_extract_f2","text":"","code":"bed_file <-   system.file(\"extdata\", \"lobster\", \"lobster.bed\", package = \"tidypopgen\") lobsters <- gen_tibble(bed_file,   backingfile = tempfile(\"lobsters\"),   quiet = TRUE ) lobsters <- lobsters %>% group_by(population) f2_path <- tempfile() gt_extract_f2(lobsters, outdir = f2_path, quiet = TRUE) admixtools::f2_from_precomp(f2_path, verbose = FALSE) #> , , l1 #>  #>               Ale          Ber          Brd           Pad           Vig #> Ale  0.0000000000 -0.004676132 -0.003174486  0.0006209184 -0.0002105745 #> Ber -0.0046761319  0.000000000 -0.006029964 -0.0046855398  0.0095602103 #> Brd -0.0031744859 -0.006029964  0.000000000 -0.0050879612  0.0129270996 #> Pad  0.0006209184 -0.004685540 -0.005087961  0.0000000000  0.0211478853 #> Vig -0.0002105745  0.009560210  0.012927100  0.0211478853  0.0000000000 #>  #> , , l1 #>  #>              Ale           Ber          Brd          Pad           Vig #> Ale  0.000000000 -0.0079886215 -0.005352975 -0.007641707 -0.0014050602 #> Ber -0.007988622  0.0000000000 -0.004522473 -0.007189993 -0.0002895655 #> Brd -0.005352975 -0.0045224728  0.000000000 -0.005129543 -0.0057888393 #> Pad -0.007641707 -0.0071899931 -0.005129543  0.000000000 -0.0015299527 #> Vig -0.001405060 -0.0002895655 -0.005788839 -0.001529953  0.0000000000 #>  #> , , l1 #>  #>             Ale         Ber         Brd         Pad         Vig #> Ale 0.000000000 0.104258242 0.048815994 0.006130533 0.004561335 #> Ber 0.104258242 0.000000000 0.006523911 0.043462067 0.188567954 #> Brd 0.048815994 0.006523911 0.000000000 0.009807638 0.112008282 #> Pad 0.006130533 0.043462067 0.009807638 0.000000000 0.042933932 #> Vig 0.004561335 0.188567954 0.112008282 0.042933932 0.000000000 #>  #> , , l1 #>  #>           Ale          Ber          Brd          Pad          Vig #> Ale 0.0000000  0.208291708  0.159413679  0.194855497  0.207715576 #> Ber 0.2082917  0.000000000 -0.004110991 -0.007134180 -0.007462103 #> Brd 0.1594137 -0.004110991  0.000000000 -0.005281690 -0.003986236 #> Pad 0.1948555 -0.007134180 -0.005281690  0.000000000 -0.006937276 #> Vig 0.2077156 -0.007462103 -0.003986236 -0.006937276  0.000000000 #>  #> , , l1 #>  #>              Ale          Ber          Brd          Pad          Vig #> Ale  0.000000000  0.001335123  0.006072896 -0.001109958  0.006072896 #> Ber  0.001335123  0.000000000 -0.002065436 -0.001028067 -0.002065436 #> Brd  0.006072896 -0.002065436  0.000000000  0.002227873 -0.003368979 #> Pad -0.001109958 -0.001028067  0.002227873  0.000000000  0.002227873 #> Vig  0.006072896 -0.002065436 -0.003368979  0.002227873  0.000000000 #>  #> , , l1 #>  #>              Ale           Ber          Brd          Pad           Vig #> Ale  0.000000000  0.0034965035 -0.007250221 -0.006896552 -0.0065107306 #> Ber  0.003496503  0.0000000000  0.005128205  0.007392607 -0.0002119093 #> Brd -0.007250221  0.0051282051  0.000000000 -0.006593407 -0.0057498057 #> Pad -0.006896552  0.0073926074 -0.006593407  0.000000000 -0.0049284049 #> Vig -0.006510731 -0.0002119093 -0.005749806 -0.004928405  0.0000000000 #>  #> , , l1 #>  #>               Ale           Ber           Brd          Pad           Vig #> Ale  0.0000000000 -0.0011503562 -0.0032177528 -0.003106903  0.0002512091 #> Ber -0.0011503562  0.0000000000 -0.0001928822 -0.001218396  0.0078215342 #> Brd -0.0032177528 -0.0001928822  0.0000000000 -0.002738654 -0.0005379499 #> Pad -0.0031069026 -0.0012183956 -0.0027386541  0.000000000  0.0013475917 #> Vig  0.0002512091  0.0078215342 -0.0005379499  0.001347592  0.0000000000 #>  #> , , l1 #>  #>             Ale         Ber          Brd          Pad          Vig #> Ale 0.000000000 0.008158508  0.073100999  0.098674311  0.066778149 #> Ber 0.008158508 0.000000000  0.017351193  0.032289307  0.013864396 #> Brd 0.073100999 0.017351193  0.000000000 -0.004803512 -0.006702048 #> Pad 0.098674311 0.032289307 -0.004803512  0.000000000 -0.003885147 #> Vig 0.066778149 0.013864396 -0.006702048 -0.003885147  0.000000000 #>  #> , , l1 #>  #>           Ale           Ber           Brd          Pad        Vig #> Ale 0.0000000  0.4537462537  0.4063718890  0.373710653 0.17071829 #> Ber 0.4537463  0.0000000000 -0.0003119034  0.001920869 0.06197564 #> Brd 0.4063719 -0.0003119034  0.0000000000 -0.001532140 0.04463374 #> Pad 0.3737107  0.0019208686 -0.0015321397  0.000000000 0.03366262 #> Vig 0.1707183  0.0619756417  0.0446337445  0.033662624 0.00000000 #>  #> , , l1 #>  #>              Ale          Ber           Brd           Pad          Vig #> Ale  0.000000000 -0.006348582 -0.0061061298  0.0017442692  0.006471393 #> Ber -0.006348582  0.000000000 -0.0060222446 -0.0014776433  0.002279301 #> Brd -0.006106130 -0.006022245  0.0000000000 -0.0005846218  0.003325509 #> Pad  0.001744269 -0.001477643 -0.0005846218  0.0000000000 -0.006223027 #> Vig  0.006471393  0.002279301  0.0033255086 -0.0062230274  0.000000000 #>  #> , , l1 #>  #>            Ale         Ber          Brd          Pad          Vig #> Ale 0.00000000 0.084731935  0.028144938  0.019324338  0.023539020 #> Ber 0.08473193 0.000000000  0.008753912  0.016505282  0.012433979 #> Brd 0.02814494 0.008753912  0.000000000 -0.003868892 -0.004564424 #> Pad 0.01932434 0.016505282 -0.003868892  0.000000000 -0.004336202 #> Vig 0.02353902 0.012433979 -0.004564424 -0.004336202  0.000000000 #>  #> , , l1 #>  #>               Ale          Ber           Brd          Pad          Vig #> Ale  0.0000000000  0.016009930 -0.0003485006  0.017285209 -0.001283177 #> Ber  0.0160099296  0.000000000  0.0037957212 -0.005134977  0.005959784 #> Brd -0.0003485006  0.003795721  0.0000000000  0.004712332 -0.003053785 #> Pad  0.0172852095 -0.005134977  0.0047123320  0.000000000  0.006952259 #> Vig -0.0012831769  0.005959784 -0.0030537848  0.006952259  0.000000000 #>  #> , , l1 #>  #>               Ale          Ber          Brd           Pad          Vig #> Ale  0.0000000000 -0.003335553  0.001902102 -0.0003326877 -0.005638089 #> Ber -0.0033355533  0.000000000 -0.005396965 -0.0061060809 -0.003783115 #> Brd  0.0019021015 -0.005396965  0.000000000 -0.0061293688  0.001016128 #> Pad -0.0003326877 -0.006106081 -0.006129369  0.0000000000 -0.001043297 #> Vig -0.0056380891 -0.003783115  0.001016128 -0.0010432968  0.000000000 #>  #> , , l1 #>  #>             Ale          Ber          Brd         Pad         Vig #> Ale 0.000000000  0.086035177  0.061632030 0.001666174 0.002911017 #> Ber 0.086035177  0.000000000 -0.002341034 0.038703211 0.157793172 #> Brd 0.061632030 -0.002341034  0.000000000 0.022322205 0.124717440 #> Pad 0.001666174  0.038703211  0.022322205 0.000000000 0.031081551 #> Vig 0.002911017  0.157793172  0.124717440 0.031081551 0.000000000 #>  #> , , l1 #>  #>            Ale           Ber          Brd           Pad           Vig #> Ale 0.00000000  0.0490279218  0.019249394  0.0467033903  0.0290572838 #> Ber 0.04902792  0.0000000000  0.002606787 -0.0021919713 -0.0004864255 #> Brd 0.01924939  0.0026067866  0.000000000  0.0019235785 -0.0025919405 #> Pad 0.04670339 -0.0021919713  0.001923579  0.0000000000 -0.0008802817 #> Vig 0.02905728 -0.0004864255 -0.002591941 -0.0008802817  0.0000000000 #>  #> , , l1 #>  #>           Ale          Ber           Brd          Pad           Vig #> Ale 0.0000000  0.359340659  0.3901212659  0.378202549  0.3137401229 #> Ber 0.3593407  0.000000000 -0.0035992993 -0.004015234 -0.0033516089 #> Brd 0.3901213 -0.003599299  0.0000000000 -0.003785029 -0.0004603399 #> Pad 0.3782025 -0.004015234 -0.0037850290  0.000000000 -0.0016147514 #> Vig 0.3137401 -0.003351609 -0.0004603399 -0.001614751  0.0000000000 #>  #> , , l1 #>  #>               Ale           Ber          Brd           Pad          Vig #> Ale  0.0000000000  0.0079708410 -0.002432174 -0.0007176387 -0.001770525 #> Ber  0.0079708410  0.0000000000  0.003478446 -0.0008725755  0.001107317 #> Brd -0.0024321743  0.0034784464  0.000000000 -0.0025919405 -0.003032081 #> Pad -0.0007176387 -0.0008725755 -0.002591941  0.0000000000 -0.003314641 #> Vig -0.0017705246  0.0011073173 -0.003032081 -0.0033146409  0.000000000 #>  #> , , l1 #>  #>              Ale          Ber           Brd           Pad          Vig #> Ale  0.000000000  0.015199737  9.762703e-03 -4.943180e-03 -0.001606164 #> Ber  0.015199737  0.000000000 -6.968897e-03  3.447770e-03 -0.001589397 #> Brd  0.009762703 -0.006968897  0.000000e+00 -4.890454e-05 -0.003928665 #> Pad -0.004943180  0.003447770 -4.890454e-05  0.000000e+00 -0.006243479 #> Vig -0.001606164 -0.001589397 -3.928665e-03 -6.243479e-03  0.000000000 #>  #> , , l1 #>  #>             Ale          Ber          Brd          Pad          Vig #> Ale 0.000000000  0.005268393  0.010899830  0.001141936  0.018126194 #> Ber 0.005268393  0.000000000 -0.003908533 -0.003268328 -0.001881217 #> Brd 0.010899830 -0.003908533  0.000000000 -0.001059598 -0.004091680 #> Pad 0.001141936 -0.003268328 -0.001059598  0.000000000  0.002581073 #> Vig 0.018126194 -0.001881217 -0.004091680  0.002581073  0.000000000 #>  #> , , l1 #>  #>              Ale          Ber           Brd           Pad          Vig #> Ale  0.000000000 -0.003904429  4.173335e-02  1.151035e-02  0.020019740 #> Ber -0.003904429  0.000000000  1.773212e-02 -1.758557e-03  0.003173392 #> Brd  0.041733355  0.017732124  0.000000e+00  3.803686e-05 -0.003798252 #> Pad  0.011510350 -0.001758557  3.803686e-05  0.000000e+00 -0.006243479 #> Vig  0.020019740  0.003173392 -3.798252e-03 -6.243479e-03  0.000000000 #>  #> , , l1 #>  #>            Ale          Ber          Brd          Pad          Vig #> Ale 0.00000000  0.054662005  0.013759324  0.042305601  0.019440859 #> Ber 0.05466200  0.000000000  0.006492516 -0.005635809  0.002102246 #> Brd 0.01375932  0.006492516  0.000000000  0.001521475 -0.004673451 #> Pad 0.04230560 -0.005635809  0.001521475  0.000000000 -0.001722412 #> Vig 0.01944086  0.002102246 -0.004673451 -0.001722412  0.000000000 #>  #> , , l1 #>  #>              Ale          Ber          Brd          Pad          Vig #> Ale  0.000000000 -0.002997003 -0.005791052 -0.005765528 -0.004563604 #> Ber -0.002997003  0.000000000 -0.001227758 -0.001881217  0.002875385 #> Brd -0.005791052 -0.001227758  0.000000000 -0.005159702 -0.004714581 #> Pad -0.005765528 -0.001881217 -0.005159702  0.000000000 -0.004159012 #> Vig -0.004563604  0.002875385 -0.004714581 -0.004159012  0.000000000 #>  #> , , l1 #>  #>              Ale          Ber          Brd          Pad          Vig #> Ale  0.000000000 -0.000925545  0.011628216 -0.006436368 -0.001041822 #> Ber -0.000925545  0.000000000 -0.004443131 -0.005397511 -0.007335909 #> Brd  0.011628216 -0.004443131  0.000000000  0.002510433 -0.003847157 #> Pad -0.006436368 -0.005397511  0.002510433  0.000000000 -0.005292558 #> Vig -0.001041822 -0.007335909 -0.003847157 -0.005292558  0.000000000 #>  #> , , l1 #>  #>              Ale          Ber          Brd           Pad          Vig #> Ale 0.0000000000  0.036508419  0.006152859  0.0003681509  0.044633744 #> Ber 0.0365084191  0.000000000  0.006241177  0.0172313602 -0.005602613 #> Brd 0.0061528592  0.006241177  0.000000000 -0.0017605634  0.010758998 #> Pad 0.0003681509  0.017231360 -0.001760563  0.0000000000  0.023327465 #> Vig 0.0446337445 -0.005602613  0.010758998  0.0233274648  0.000000000 #>  #> , , l1 #>  #>             Ale          Ber          Brd          Pad          Vig #> Ale 0.000000000  0.002454533  0.009977591  0.018234026  0.009977591 #> Ber 0.002454533  0.000000000 -0.005771693 -0.003175307 -0.005771693 #> Brd 0.009977591 -0.005771693  0.000000000 -0.005346896 -0.006259781 #> Pad 0.018234026 -0.003175307 -0.005346896  0.000000000 -0.005346896 #> Vig 0.009977591 -0.005771693 -0.006259781 -0.005346896  0.000000000 #>  #> , , l1 #>  #>               Ale           Ber          Brd           Pad          Vig #> Ale  0.0000000000 -0.0007221053 -0.001155916 -0.0002093766  0.001128399 #> Ber -0.0007221053  0.0000000000 -0.002616723 -0.0028241972 -0.002640435 #> Brd -0.0011559160 -0.0026167234  0.000000000 -0.0024343592 -0.002005086 #> Pad -0.0002093766 -0.0028241972 -0.002434359  0.0000000000 -0.002738654 #> Vig  0.0011283992 -0.0026404347 -0.002005086 -0.0027386541  0.000000000 #>  #> , , l1 #>  #>            Ale          Ber          Brd          Pad          Vig #> Ale 0.00000000  0.012344723  0.038994378  0.019438244  0.029230659 #> Ber 0.01234472  0.000000000  0.001365166 -0.004143786 -0.001857499 #> Brd 0.03899438  0.001365166  0.000000000 -0.001005307 -0.002860885 #> Pad 0.01943824 -0.004143786 -0.001005307  0.000000000 -0.003135324 #> Vig 0.02923066 -0.001857499 -0.002860885 -0.003135324  0.000000000 #>  #> , , l1 #>  #>            Ale           Ber          Brd           Pad           Vig #> Ale 0.00000000  2.711713e-02  0.011244523  0.0760516665  5.368216e-02 #> Ber 0.02711713  0.000000e+00 -0.002158786  0.0073225813  4.191818e-05 #> Brd 0.01124452 -2.158786e-03  0.000000000  0.0199965223  8.520257e-03 #> Pad 0.07605167  7.322581e-03  0.019996522  0.0000000000 -5.651191e-04 #> Vig 0.05368216  4.191818e-05  0.008520257 -0.0005651191  0.000000e+00 #>  #> , , l1 #>  #>               Ale           Ber           Brd           Pad           Vig #> Ale  0.0000000000 -0.0037727548  0.0006464985  0.0129502058  0.0060158795 #> Ber -0.0037727548  0.0000000000 -0.0036586523  0.0034784464 -0.0008725755 #> Brd  0.0006464985 -0.0036586523  0.0000000000 -0.0005379499 -0.0031353243 #> Pad  0.0129502058  0.0034784464 -0.0005379499  0.0000000000 -0.0025919405 #> Vig  0.0060158795 -0.0008725755 -0.0031353243 -0.0025919405  0.0000000000 #>  #> , , l1 #>  #>              Ale          Ber          Brd          Pad          Vig #> Ale  0.000000000  0.003658967 -0.005855230  0.013872565 -0.006092343 #> Ber  0.003658967  0.000000000  0.012818689 -0.005753180 -0.002149064 #> Brd -0.005855230  0.012818689  0.000000000  0.025799861 -0.002021388 #> Pad  0.013872565 -0.005753180  0.025799861  0.000000000  0.005395801 #> Vig -0.006092343 -0.002149064 -0.002021388  0.005395801  0.000000000 #>  #> , , l1 #>  #>              Ale          Ber          Brd          Pad          Vig #> Ale  0.000000000 -0.007872071  0.017964709  0.013680672  0.022639983 #> Ber -0.007872071  0.000000000  0.015123882  0.011134458  0.019504543 #> Brd  0.017964709  0.015123882  0.000000000 -0.005705529 -0.005542514 #> Pad  0.013680672  0.011134458 -0.005705529  0.000000000 -0.005042601 #> Vig  0.022639983  0.019504543 -0.005542514 -0.005042601  0.000000000 #>  #> , , l1 #>  #>               Ale           Ber          Brd          Pad          Vig #> Ale  0.0000000000 -0.0002119093  0.003395275  0.017503493 -0.006041819 #> Ber -0.0002119093  0.0000000000 -0.004666109  0.001024601  0.002731814 #> Brd  0.0033952745 -0.0046661085  0.000000000 -0.001059598  0.006960746 #> Pad  0.0175034929  0.0010246014 -0.001059598  0.000000000  0.022892758 #> Vig -0.0060418194  0.0027318144  0.006960746  0.022892758  0.000000000 #>  #> , , l1 #>  #>            Ale          Ber          Brd          Pad         Vig #> Ale 0.00000000  0.142627054  0.096404198  0.205144878 0.037580669 #> Ber 0.14262705  0.000000000 -0.002786989 -0.001245755 0.024149038 #> Brd 0.09640420 -0.002786989  0.000000000  0.012823857 0.005390367 #> Pad 0.20514488 -0.001245755  0.012823857  0.000000000 0.056033733 #> Vig 0.03758067  0.024149038  0.005390367  0.056033733 0.000000000 #>  #> , , l1 #>  #>            Ale          Ber          Brd          Pad          Vig #> Ale 0.00000000  0.041114058  0.012816362  0.024290378  0.024290378 #> Ber 0.04111406  0.000000000  0.003425370 -0.002603226 -0.002603226 #> Brd 0.01281636  0.003425370  0.000000000 -0.002032255 -0.002032255 #> Pad 0.02429038 -0.002603226 -0.002032255  0.000000000 -0.004167753 #> Vig 0.02429038 -0.002603226 -0.002032255 -0.004167753  0.000000000 #>  #> , , l1 #>  #>           Ale          Ber          Brd          Pad        Vig #> Ale 0.0000000  0.442445424  0.535193406  0.555877149 0.25746166 #> Ber 0.4424454  0.000000000 -0.001277491  0.000850597 0.01788123 #> Brd 0.5351934 -0.001277491  0.000000000 -0.004564424 0.04347070 #> Pad 0.5558771  0.000850597 -0.004564424  0.000000000 0.04994784 #> Vig 0.2574617  0.017881232  0.043470701  0.049947835 0.00000000 #>  #> , , l1 #>  #>               Ale          Ber          Brd         Pad           Vig #> Ale  0.0000000000 -0.004973288 -0.003386260 0.017628719 -0.0004799327 #> Ber -0.0049732876  0.000000000 -0.002603226 0.021297755  0.0010246014 #> Brd -0.0033862596 -0.002603226  0.000000000 0.009351634 -0.0031353243 #> Pad  0.0176287192  0.021297755  0.009351634 0.000000000  0.0042112241 #> Vig -0.0004799327  0.001024601 -0.003135324 0.004211224  0.0000000000 #>  #> , , l1 #>  #>               Ale           Ber          Brd           Pad           Vig #> Ale  0.0000000000 -0.0050595238  0.012488737 -0.0010859771  0.0008464931 #> Ber -0.0050595238  0.0000000000  0.015002340  0.0001781522  0.0023605173 #> Brd  0.0124887371  0.0150023404  0.000000000 -0.0011954443 -0.0030157799 #> Pad -0.0010859771  0.0001781522 -0.001195444  0.0000000000 -0.0055425143 #> Vig  0.0008464931  0.0023605173 -0.003015780 -0.0055425143  0.0000000000 #>  #> , , l1 #>  #>              Ale          Ber          Brd          Pad          Vig #> Ale  0.000000000 -0.003364808  0.013390228  0.025968476  0.030943697 #> Ber -0.003364808  0.000000000  0.012306707  0.024506167  0.029355126 #> Brd  0.013390228  0.012306707  0.000000000 -0.003814554 -0.002543036 #> Pad  0.025968476  0.024506167 -0.003814554  0.000000000 -0.005705529 #> Vig  0.030943697  0.029355126 -0.002543036 -0.005705529  0.000000000 #>  #> , , l1 #>  #>            Ale           Ber           Brd           Pad           Vig #> Ale 0.00000000  0.0803363303  0.0659837815  0.0813973811  0.0737386440 #> Ber 0.08033633  0.0000000000 -0.0005533851 -0.0008513226 -0.0008853431 #> Brd 0.06598378 -0.0005533851  0.0000000000 -0.0004131067 -0.0011085029 #> Pad 0.08139738 -0.0008513226 -0.0004131067  0.0000000000 -0.0007931648 #> Vig 0.07373864 -0.0008853431 -0.0011085029 -0.0007931648  0.0000000000 #>  #> , , l1 #>  #>             Ale           Ber           Brd          Pad           Vig #> Ale 0.000000000  0.0084745763  3.913570e-02  0.017070058  2.352391e-02 #> Ber 0.008474576  0.0000000000  5.632874e-03 -0.002413159 -5.344686e-04 #> Brd 0.039135698  0.0056328736  0.000000e+00  0.001637319 -3.207652e-05 #> Pad 0.017070058 -0.0024131585  1.637319e-03  0.000000000 -2.069705e-03 #> Vig 0.023523912 -0.0005344686 -3.207652e-05 -0.002069705  0.000000e+00 #>  #> , , l1 #>  #>              Ale          Ber          Brd          Pad          Vig #> Ale  0.000000000 -0.004962370 -0.006793737 -0.007427809 -0.006793737 #> Ber -0.004962370  0.000000000 -0.006671993 -0.005753180 -0.006671993 #> Brd -0.006793737 -0.006671993  0.000000000 -0.006737959 -0.006955312 #> Pad -0.007427809 -0.005753180 -0.006737959  0.000000000 -0.006737959 #> Vig -0.006793737 -0.006671993 -0.006955312 -0.006737959  0.000000000 #>  #> , , l1 #>  #>              Ale          Ber          Brd          Pad          Vig #> Ale  0.000000000  0.059940060  0.062227532 -0.001054941 -0.001054941 #> Ber  0.059940060  0.000000000 -0.007296694  0.029799621  0.029799621 #> Brd  0.062227532 -0.007296694  0.000000000  0.031576030  0.031576030 #> Pad -0.001054941  0.029799621  0.031576030  0.000000000 -0.005471874 #> Vig -0.001054941  0.029799621  0.031576030 -0.005471874  0.000000000 #>  #> , , l1 #>  #>              Ale          Ber          Brd          Pad         Vig #> Ale 0.0000000000 0.0004367161  0.013488046  0.021276094 0.075688506 #> Ber 0.0004367161 0.0000000000  0.001044847  0.005597415 0.045450168 #> Brd 0.0134880463 0.0010448472  0.000000000 -0.004091680 0.017768649 #> Pad 0.0212760941 0.0055974151 -0.004091680  0.000000000 0.009835246 #> Vig 0.0756885060 0.0454501680  0.017768649  0.009835246 0.000000000 #>  #> , , l1 #>  #>            Ale          Ber          Brd           Pad          Vig #> Ale 0.00000000  0.071090762 0.1330835466  0.0784370402  0.070698616 #> Ber 0.07109076  0.000000000 0.0022376163 -0.0065829840 -0.006683757 #> Brd 0.13308355  0.002237616 0.0000000000  0.0002173535  0.002782125 #> Pad 0.07843704 -0.006582984 0.0002173535  0.0000000000 -0.006248913 #> Vig 0.07069862 -0.006683757 0.0027821248 -0.0062489132  0.000000000 #>  #> , , l1 #>  #>             Ale         Ber          Brd           Pad           Vig #> Ale 0.000000000 0.068881777  0.017549932  0.0028916121  0.0272265103 #> Ber 0.068881777 0.000000000  0.007545389  0.0235267992  0.0019021015 #> Brd 0.017549932 0.007545389  0.000000000 -0.0036678404 -0.0057218310 #> Pad 0.002891612 0.023526799 -0.003667840  0.0000000000  0.0002988611 #> Vig 0.027226510 0.001902102 -0.005721831  0.0002988611  0.0000000000 #>  #> , , l1 #>  #>              Ale           Ber           Brd          Pad          Vig #> Ale  0.000000000  1.119556e-03 -1.996542e-03 -0.001691608  0.005701608 #> Ber  0.001119556  0.000000e+00 -7.551134e-05 -0.001515972 -0.002849732 #> Brd -0.001996542 -7.551134e-05  0.000000e+00 -0.002119197  0.003912363 #> Pad -0.001691608 -1.515972e-03 -2.119197e-03  0.000000000  0.001630151 #> Vig  0.005701608 -2.849732e-03  3.912363e-03  0.001630151  0.000000000 #>  #> , , l1 #>  #>             Ale         Ber         Brd         Pad        Vig #> Ale 0.000000000 0.001631702 0.015406886 0.043763693 0.13233177 #> Ber 0.001631702 0.000000000 0.003031853 0.022095732 0.09362677 #> Brd 0.015406886 0.003031853 0.000000000 0.002581073 0.05057816 #> Pad 0.043763693 0.022095732 0.002581073 0.000000000 0.01745349 #> Vig 0.132331768 0.093626770 0.050578160 0.017453486 0.00000000 #>  #> , , l1 #>  #>           Ale        Ber          Brd          Pad          Vig #> Ale 0.0000000 0.17410714  0.441314554  0.559859155  0.479264476 #> Ber 0.1741071 0.00000000  0.052921697  0.101153798  0.067434119 #> Brd 0.4413146 0.05292170  0.000000000  0.001173709 -0.005346896 #> Pad 0.5598592 0.10115380  0.001173709  0.000000000 -0.002543036 #> Vig 0.4792645 0.06743412 -0.005346896 -0.002543036  0.000000000 #>  #> , , l1 #>  #>            Ale           Ber           Brd           Pad          Vig #> Ale 0.00000000  0.0157203907  0.0159009613  0.0389472250  0.033555500 #> Ber 0.01572039  0.0000000000 -0.0040929337  0.0001454597 -0.001484692 #> Brd 0.01590096 -0.0040929337  0.0000000000  0.0003260303 -0.001304121 #> Pad 0.03894723  0.0001454597  0.0003260303  0.0000000000 -0.004781777 #> Vig 0.03355550 -0.0014846916 -0.0013041210 -0.0047817771  0.000000000 #>  #> , , l1 #>  #>               Ale           Ber         Brd           Pad           Vig #> Ale  0.0000000000 -0.0010829114 0.014629776  0.0003938225 -0.0012720870 #> Ber -0.0010829114  0.0000000000 0.007821534 -0.0018526726 -0.0004774177 #> Brd  0.0146297758  0.0078215342 0.000000000  0.0036243697  0.0166438445 #> Pad  0.0003938225 -0.0018526726 0.003624370  0.0000000000  0.0012878195 #> Vig -0.0012720870 -0.0004774177 0.016643845  0.0012878195  0.0000000000 #>  #> , , l1 #>  #>            Ale          Ber         Brd          Pad          Vig #> Ale 0.00000000  0.028471528 0.058620155  0.013795653  0.012261031 #> Ber 0.02847153  0.000000000 0.001756186 -0.001942776 -0.001567997 #> Brd 0.05862016  0.001756186 0.000000000  0.009351634  0.010416849 #> Pad 0.01379565 -0.001942776 0.009351634  0.000000000 -0.004248923 #> Vig 0.01226103 -0.001567997 0.010416849 -0.004248923  0.000000000 #>  #> , , l1 #>  #>              Ale          Ber           Brd          Pad          Vig #> Ale 0.0000000000  0.016487860  0.0001387552  0.034494892  0.005034798 #> Ber 0.0164878600  0.000000000 -0.0011855646 -0.004599991 -0.004682980 #> Brd 0.0001387552 -0.001185565  0.0000000000  0.009085376 -0.005482742 #> Pad 0.0344948921 -0.004599991  0.0090853765  0.000000000  0.002782125 #> Vig 0.0050347982 -0.004682980 -0.0054827421  0.002782125  0.000000000 #>  #> , , l1 #>  #>              Ale          Ber          Brd         Pad          Vig #> Ale  0.000000000 -0.001615052 -0.004453806 0.002906327 -0.003940309 #> Ber -0.001615052  0.000000000 -0.001942776 0.015360539 -0.002849732 #> Brd -0.004453806 -0.001942776  0.000000000 0.004542688 -0.003847157 #> Pad  0.002906327  0.015360539  0.004542688 0.000000000  0.007563902 #> Vig -0.003940309 -0.002849732 -0.003847157 0.007563902  0.000000000 #>  #> , , l1 #>  #>               Ale          Ber          Brd           Pad          Vig #> Ale  0.0000000000  0.003359564 -0.003948171  0.0005119228 -0.004887138 #> Ber  0.0033595642  0.000000000 -0.002161406 -0.0057742287  0.004972544 #> Brd -0.0039481711 -0.002161406  0.000000000 -0.0036298035 -0.003010346 #> Pad  0.0005119228 -0.005774229 -0.003629804  0.0000000000  0.001912711 #> Vig -0.0048871383  0.004972544 -0.003010346  0.0019127108  0.000000000 #>  #> , , l1 #>  #>              Ale           Ber           Brd        Pad          Vig #> Ale  0.000000000  0.1087513891  0.0850926086 0.01979067 -0.004281874 #> Ber  0.108751389  0.0000000000 -0.0007713465 0.02738581  0.078080553 #> Brd  0.085092609 -0.0007713465  0.0000000000 0.01551361  0.058071422 #> Pad  0.019790666  0.0273858119  0.0155136063 0.00000000  0.006612980 #> Vig -0.004281874  0.0780805527  0.0580714224 0.00661298  0.000000000 #>  #> , , l1 #>  #>              Ale          Ber          Brd          Pad          Vig #> Ale  0.000000000 -0.003363303  0.036259222  0.005107031  0.020859213 #> Ber -0.003363303  0.000000000  0.013505587 -0.005125560  0.003318421 #> Brd  0.036259222  0.013505587  0.000000000  0.002510433 -0.005381565 #> Pad  0.005107031 -0.005125560  0.002510433  0.000000000 -0.003894867 #> Vig  0.020859213  0.003318421 -0.005381565 -0.003894867  0.000000000 #>  #> , , l1 #>  #>            Ale        Ber        Brd        Pad        Vig #> Ale 0.00000000 0.04513889 0.20538302 0.64671362 0.97222222 #> Ber 0.04513889 0.00000000 0.05052191 0.33942195 0.58593750 #> Brd 0.20538302 0.05052191 0.00000000 0.11558870 0.27601794 #> Pad 0.64671362 0.33942195 0.11558870 0.00000000 0.03020127 #> Vig 0.97222222 0.58593750 0.27601794 0.03020127 0.00000000 #>  #> , , l1 #>  #>               Ale        Ber          Brd          Pad           Vig #> Ale  0.0000000000 0.03606567 -0.001465478 -0.004347004 -0.0005484788 #> Ber  0.0360656706 0.00000000  0.012391422  0.017421603  0.0106780358 #> Brd -0.0014654784 0.01239142  0.000000000 -0.005774229 -0.0056512991 #> Pad -0.0043470036 0.01742160 -0.005774229  0.000000000 -0.0055318323 #> Vig -0.0005484788 0.01067804 -0.005651299 -0.005531832  0.0000000000 #>  #> , , l1 #>  #>               Ale          Ber          Brd          Pad           Vig #> Ale  0.0000000000  0.008668415  0.003539466 -0.003616718  0.0009169601 #> Ber  0.0086684149  0.000000000 -0.006692056 -0.002510533 -0.0058028826 #> Brd  0.0035394660 -0.006692056  0.000000000 -0.004876360 -0.0066836202 #> Pad -0.0036167184 -0.002510533 -0.004876360  0.000000000 -0.0058991631 #> Vig  0.0009169601 -0.005802883 -0.006683620 -0.005899163  0.0000000000 #>  #> , , l1 #>  #>            Ale          Ber          Brd         Pad          Vig #> Ale 0.00000000  0.102732439  0.078417210 0.178483419  0.086663268 #> Ber 0.10273244  0.000000000 -0.005847586 0.002405055 -0.006782885 #> Brd 0.07841721 -0.005847586  0.000000000 0.012389150 -0.006781429 #> Pad 0.17848342  0.002405055  0.012389150 0.000000000  0.008705008 #> Vig 0.08666327 -0.006782885 -0.006781429 0.008705008  0.000000000 #>  #> , , l1 #>  #>              Ale           Ber          Brd           Pad           Vig #> Ale  0.000000000  0.0012409201 -0.005199575  0.0016601019  0.0236867059 #> Ber  0.001240920  0.0000000000 -0.003695786 -0.0070212944 -0.0002724681 #> Brd -0.005199575 -0.0036957858  0.000000000 -0.0032766041  0.0127314815 #> Pad  0.001660102 -0.0070212944 -0.003276604  0.0000000000  0.0001467136 #> Vig  0.023686706 -0.0002724681  0.012731481  0.0001467136  0.0000000000 #>  #> , , l1 #>  #>             Ale          Ber          Brd          Pad          Vig #> Ale 0.000000000  0.027945649  0.058196557  0.025908078  0.008668439 #> Ber 0.027945649  0.000000000 -0.002582924 -0.007171206 -0.003448534 #> Brd 0.058196557 -0.002582924  0.000000000 -0.001391197  0.009786983 #> Pad 0.025908078 -0.007171206 -0.001391197  0.000000000 -0.003885194 #> Vig 0.008668439 -0.003448534  0.009786983 -0.003885194  0.000000000 #>  #> , , l1 #>  #>            Ale          Ber          Brd         Pad          Vig #> Ale 0.00000000  0.039868936  0.039593470 0.120304071  0.059698669 #> Ber 0.03986894  0.000000000 -0.006397945 0.013519540 -0.004530681 #> Brd 0.03959347 -0.006397945  0.000000000 0.014144279 -0.004151452 #> Pad 0.12030407  0.013519540  0.014144279 0.000000000  0.004542688 #> Vig 0.05969867 -0.004530681 -0.004151452 0.004542688  0.000000000 #>  #> , , l1 #>  #>            Ale           Ber           Brd          Pad          Vig #> Ale 0.00000000  0.0092858402  0.0398725865  0.018821549  0.067183405 #> Ber 0.00928584  0.0000000000  0.0001047954 -0.006497317  0.012966689 #> Brd 0.03987259  0.0001047954  0.0000000000 -0.003912363 -0.003738480 #> Pad 0.01882155 -0.0064973172 -0.0039123631  0.000000000  0.005477308 #> Vig 0.06718340  0.0129666890 -0.0037384803  0.005477308  0.000000000 #>  #> , , l1 #>  #>              Ale          Ber          Brd          Pad          Vig #> Ale  0.000000000 -0.007402122 -0.006892147 -0.006892147 -0.007084295 #> Ber -0.007402122  0.000000000 -0.004488730 -0.004488730 -0.006283572 #> Brd -0.006892147 -0.004488730  0.000000000 -0.006384759 -0.004005920 #> Pad -0.006892147 -0.004488730 -0.006384759  0.000000000 -0.004005920 #> Vig -0.007084295 -0.006283572 -0.004005920 -0.004005920  0.000000000 #>  #> , , l1 #>  #>              Ale          Ber          Brd         Pad          Vig #> Ale  0.000000000 -0.005218479 -0.007205226 0.013963452 -0.007205226 #> Ber -0.005218479  0.000000000 -0.005086945 0.001820821 -0.005086945 #> Brd -0.007205226 -0.005086945  0.000000000 0.012579334 -0.006384759 #> Pad  0.013963452  0.001820821  0.012579334 0.000000000  0.012579334 #> Vig -0.007205226 -0.005086945 -0.006384759 0.012579334  0.000000000 #>  #> , , l1 #>  #>           Ale         Ber         Brd         Pad        Vig #> Ale 0.0000000 0.527950311 0.527950311 0.449345347 0.24457853 #> Ber 0.5279503 0.000000000 0.000000000 0.002347418 0.04968944 #> Brd 0.5279503 0.000000000 0.000000000 0.002347418 0.04968944 #> Pad 0.4493453 0.002347418 0.002347418 0.000000000 0.02664003 #> Vig 0.2445785 0.049689441 0.049689441 0.026640033 0.00000000 #>  #> , , l1 #>  #>             Ale           Ber           Brd          Pad           Vig #> Ale 0.000000000  0.0327624781  0.0340940407  0.018741171  0.0071949181 #> Ber 0.032762478  0.0000000000 -0.0068031343 -0.005416024 -0.0008600096 #> Brd 0.034094041 -0.0068031343  0.0000000000 -0.004901322 -0.0001428863 #> Pad 0.018741171 -0.0054160237 -0.0049013215  0.000000000 -0.0053575074 #> Vig 0.007194918 -0.0008600096 -0.0001428863 -0.005357507  0.0000000000 #>  #> , , l1 #>  #>              Ale          Ber          Brd          Pad        Vig #> Ale  0.000000000  0.008507260  0.018939103 -0.003407319 0.01924939 #> Ber  0.008507260  0.000000000 -0.006210876 -0.002924431 0.07533744 #> Brd  0.018939103 -0.006210876  0.000000000  0.003265487 0.09671144 #> Pad -0.003407319 -0.002924431  0.003265487  0.000000000 0.04260150 #> Vig  0.019249394  0.075337441  0.096711441  0.042601503 0.00000000 #>  #> , , l1 #>  #>              Ale          Ber          Brd          Pad          Vig #> Ale  0.000000000  0.002797203 -0.001648528 -0.005463082  0.006961849 #> Ber  0.002797203  0.000000000 -0.005711594 -0.001319077 -0.006595672 #> Brd -0.001648528 -0.005711594  0.000000000 -0.004151452 -0.004208366 #> Pad -0.005463082 -0.001319077 -0.004151452  0.000000000  0.001781001 #> Vig  0.006961849 -0.006595672 -0.004208366  0.001781001  0.000000000 #>  #> , , l1 #>  #>              Ale           Ber          Brd           Pad           Vig #> Ale  0.000000000 -0.0074168256 -0.007316871 -7.199569e-03 -2.149064e-03 #> Ber -0.007416826  0.0000000000 -0.006597003 -7.296694e-03  2.790637e-04 #> Brd -0.007316871 -0.0065970026  0.000000000 -6.497906e-03 -4.046926e-03 #> Pad -0.007199569 -0.0072966939 -0.006497906  0.000000e+00 -4.890454e-05 #> Vig -0.002149064  0.0002790637 -0.004046926 -4.890454e-05  0.000000e+00 #>  #> , , l1 #>  #>            Ale          Ber          Brd          Pad          Vig #> Ale 0.00000000  0.020979021  0.086956522  0.066901408  0.017605634 #> Ber 0.02097902  0.000000000  0.017026452  0.007914099 -0.003502887 #> Brd 0.08695652  0.017026452  0.000000000 -0.004475403  0.021228822 #> Pad 0.06690141  0.007914099 -0.004475403  0.000000000  0.011204573 #> Vig 0.01760563 -0.003502887  0.021228822  0.011204573  0.000000000 #>  #> , , l1 #>  #>             Ale          Ber          Brd          Pad          Vig #> Ale 0.000000000  0.021207959  0.014067041  0.007403798  0.007403798 #> Ber 0.021207959  0.000000000 -0.005437181 -0.003077908 -0.003077908 #> Brd 0.014067041 -0.005437181  0.000000000 -0.004694836 -0.004694836 #> Pad 0.007403798 -0.003077908 -0.004694836  0.000000000 -0.005281690 #> Vig 0.007403798 -0.003077908 -0.004694836 -0.005281690  0.000000000 #>  #> , , l1 #>  #>               Ale          Ber          Brd          Pad          Vig #> Ale  0.0000000000 0.0003463203 -0.003428571 -0.006449810 -0.002787838 #> Ber  0.0003463203 0.0000000000  0.015584416  0.006368853  0.016950017 #> Brd -0.0034285714 0.0155844156  0.000000000 -0.004862508 -0.006438632 #> Pad -0.0064498100 0.0063688528 -0.004862508  0.000000000 -0.004444879 #> Vig -0.0027878381 0.0169500166 -0.006438632 -0.004444879  0.000000000 #>  #> , , l1 #>  #>              Ale          Ber          Brd          Pad          Vig #> Ale  0.000000000 -0.004695305  0.031354795 -0.004149899  0.036929913 #> Ber -0.004695305  0.000000000  0.017881232 -0.006049389  0.022404161 #> Brd  0.031354795  0.017881232  0.000000000  0.016953573 -0.006781429 #> Pad -0.004149899 -0.006049389  0.016953573  0.000000000  0.021371283 #> Vig  0.036929913  0.022404161 -0.006781429  0.021371283  0.000000000 #>  #> , , l1 #>  #>            Ale          Ber          Brd          Pad          Vig #> Ale 0.00000000  0.041385887  0.095722118  0.071340983  0.063996410 #> Ber 0.04138589  0.000000000  0.004528127 -0.002176241 -0.003628557 #> Brd 0.09572212  0.004528127  0.000000000 -0.004575291 -0.003151626 #> Pad 0.07134098 -0.002176241 -0.004575291  0.000000000 -0.005857677 #> Vig 0.06399641 -0.003628557 -0.003151626 -0.005857677  0.000000000 #>  #> , , l1 #>  #>              Ale          Ber          Brd          Pad          Vig #> Ale  0.000000000 -0.007925245  0.005512440  0.012844498  0.005512440 #> Ber -0.007925245  0.000000000  0.001513601  0.007536269  0.001513601 #> Brd  0.005512440  0.001513601  0.000000000 -0.005482742 -0.006384759 #> Pad  0.012844498  0.007536269 -0.005482742  0.000000000 -0.005482742 #> Vig  0.005512440  0.001513601 -0.006384759 -0.005482742  0.000000000 #>  #> , , l1 #>  #>            Ale         Ber         Brd         Pad        Vig #> Ale 0.00000000 0.131082555 0.076538565 0.024435095 0.04545829 #> Ber 0.13108256 0.000000000 0.005269834 0.034766681 0.35159103 #> Brd 0.07653857 0.005269834 0.000000000 0.008786515 0.25949835 #> Pad 0.02443509 0.034766681 0.008786515 0.000000000 0.15655973 #> Vig 0.04545829 0.351591028 0.259498348 0.156559729 0.00000000 #>  #> , , l1 #>  #>               Ale           Ber           Brd         Pad        Vig #> Ale  0.0000000000 -0.0008866134 -0.0004558602 0.018861432 0.12256962 #> Ber -0.0008866134  0.0000000000  0.0012842400 0.024284193 0.13489737 #> Brd -0.0004558602  0.0012842400  0.0000000000 0.009063641 0.09758086 #> Pad  0.0188614325  0.0242841926  0.0090636411 0.000000000 0.03780864 #> Vig  0.1225696191  0.1348973666  0.0975808555 0.037808642 0.00000000 #>"},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/gt_from_genlight.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a genlight object from adegenet to a gen_tibble — gt_from_genlight","title":"Convert a genlight object from adegenet to a gen_tibble — gt_from_genlight","text":"function converts genlight object adegenet package gen_tibble object","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/gt_from_genlight.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a genlight object from adegenet to a gen_tibble — gt_from_genlight","text":"","code":"gt_from_genlight(x, backingfile = NULL, ...)"},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/gt_from_genlight.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a genlight object from adegenet to a gen_tibble — gt_from_genlight","text":"x genlight object backingfile path, including file name without extension, backing files used store data (given .bk .rds automatically). NULL (default), backing files placed temporary directory. ... Additional arguments passed gen_tibble().","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/gt_from_genlight.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert a genlight object from adegenet to a gen_tibble — gt_from_genlight","text":"gen_tibble object","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/gt_from_genlight.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert a genlight object from adegenet to a gen_tibble — gt_from_genlight","text":"Currently supports diploid genlight objects (values @ploidy must 2). Requires non-missing slots: loc.names, n.loc, loc., chromosome, position, ploidy, ind.names. pop slot optional; absent, returned gen_tibble omit population column.","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/gt_from_genlight.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert a genlight object from adegenet to a gen_tibble — gt_from_genlight","text":"","code":"# Create a simple genlight object x <- new(\"genlight\",   list(     indiv1 = c(1, 1, 0, 1, 1, 0),     indiv2 = c(2, 1, 1, 0, 0, 0)   ),   ploidy = c(2, 2),   loc.names = paste0(\"locus\", 1:6),   chromosome = c(\"chr1\", \"chr1\", \"chr2\", \"chr2\", \"chr3\", \"chr3\"),   position = c(100, 200, 150, 250, 300, 400),   loc.all = c(\"A/T\", \"C/G\", \"G/C\", \"A/T\", \"T/C\", \"G/A\"),   pop = c(\"pop1\", \"pop2\") )   file <- paste0(tempfile(), \"gt_from_genlight\") # Convert to gen_tibble new_gt <- gt_from_genlight(x, backingfile = file)"},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/gt_get_file_names.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the names of files storing the genotypes of a gen_tibble — gt_get_file_names","title":"Get the names of files storing the genotypes of a gen_tibble — gt_get_file_names","text":"function return names files used store data gen_tibble. Specifically, returns .rds file storing big","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/gt_get_file_names.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the names of files storing the genotypes of a gen_tibble — gt_get_file_names","text":"","code":"gt_get_file_names(x)"},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/gt_get_file_names.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the names of files storing the genotypes of a gen_tibble — gt_get_file_names","text":"x gen_tibble","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/gt_get_file_names.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the names of files storing the genotypes of a gen_tibble — gt_get_file_names","text":"character vector names paths two files","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/gt_get_file_names.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the names of files storing the genotypes of a gen_tibble — gt_get_file_names","text":"","code":"example_gt <- load_example_gt(\"gen_tbl\")  # To retrieve the names of and paths to the .bk and .rds files use: gt_get_file_names(example_gt) #> [1] \"/tmp/RtmpblzTyA/file23973c122055.rds\" #> [2] \"/tmp/RtmpblzTyA/file23973c122055.bk\""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/gt_has_imputed.html","id":null,"dir":"Reference","previous_headings":"","what":"Checks if a gen_tibble has been imputed — gt_has_imputed","title":"Checks if a gen_tibble has been imputed — gt_has_imputed","text":"function checks dataset imputed. Note imputation mean imputed values used.","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/gt_has_imputed.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Checks if a gen_tibble has been imputed — gt_has_imputed","text":"","code":"gt_has_imputed(x)"},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/gt_has_imputed.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Checks if a gen_tibble has been imputed — gt_has_imputed","text":"x gen_tibble","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/gt_has_imputed.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Checks if a gen_tibble has been imputed — gt_has_imputed","text":"boolean TRUE FALSE depending whether dataset imputed","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/gt_has_imputed.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Checks if a gen_tibble has been imputed — gt_has_imputed","text":"","code":"example_gt <- load_example_gt(\"gen_tbl\")  # The initial gen_tibble contains no imputed values example_gt %>% gt_has_imputed() #> [1] FALSE  # Now impute the gen_tibble example_gt <- example_gt %>% gt_impute_simple()  # And we can check it has been imputed example_gt %>% gt_has_imputed() #> [1] TRUE"},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/gt_impute_simple.html","id":null,"dir":"Reference","previous_headings":"","what":"Simple imputation based on allele frequencies — gt_impute_simple","title":"Simple imputation based on allele frequencies — gt_impute_simple","text":"function provides simple imputation algorithm gen_tibble objects using mode, mean sampling allele frequencies. locus imputed independently (thus linkage information ignored).","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/gt_impute_simple.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simple imputation based on allele frequencies — gt_impute_simple","text":"","code":"gt_impute_simple(x, method = c(\"mode\", \"mean0\", \"random\"), n_cores = 1)"},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/gt_impute_simple.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simple imputation based on allele frequencies — gt_impute_simple","text":"x gen_tibble missing data method one 'mode': frequent genotype 'mean0': mean rounded nearest integer 'random': randomly sample genotype based observed allele frequencies n_cores number cores used","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/gt_impute_simple.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simple imputation based on allele frequencies — gt_impute_simple","text":"gen_tibble imputed genotypes","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/gt_impute_simple.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Simple imputation based on allele frequencies — gt_impute_simple","text":"function wrapper around bigsnpr::snp_fastImputeSimple().","code":""},{"path":[]},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/gt_impute_simple.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simple imputation based on allele frequencies — gt_impute_simple","text":"","code":"example_gt <- load_example_gt(\"gen_tbl\")  # Impute the gen_tibble example_gt <- example_gt %>% gt_impute_simple()  # And we can check it has been imputed example_gt %>% gt_has_imputed() #> [1] TRUE"},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/gt_impute_xgboost.html","id":null,"dir":"Reference","previous_headings":"","what":"Imputation based XGBoost — gt_impute_xgboost","title":"Imputation based XGBoost — gt_impute_xgboost","text":"function provides simple imputation algorithm gen_tibble objects based local XGBoost models.","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/gt_impute_xgboost.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Imputation based XGBoost — gt_impute_xgboost","text":"","code":"gt_impute_xgboost(   x,   alpha = 1e-04,   size = 200,   p_train = 0.8,   n_cor = nrow(x),   seed = NA,   n_cores = 1,   append_error = TRUE )"},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/gt_impute_xgboost.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Imputation based XGBoost — gt_impute_xgboost","text":"x gen_tibble missing data alpha Type-error testing correlations. Default 1e-4. size Number neighbour SNPs possibly included model imputing particular SNP. Default 200. p_train Proportion non missing genotypes used training imputation model rest used assess accuracy imputation model. Default 0.8. n_cor Number rows used estimate correlations. Default uses . seed integer, reproducibility. Default use seeds. n_cores number cores used append_error boolean, xgboost error estimates appended attribute genotype column gen_tibble. TRUE (default), matrix two rows (number missing values, error estimate) many columns number loci appended gen_tibble. attr(missing_gt$genotypes, \"imputed_errors\")","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/gt_impute_xgboost.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Imputation based XGBoost — gt_impute_xgboost","text":"gen_tibble imputed genotypes","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/gt_impute_xgboost.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Imputation based XGBoost — gt_impute_xgboost","text":"function wrapper around bigsnpr::snp_fastImpute(). error rates xgboost, appended, can retrieved attr(x$genotypes, \"imputed_errors\") x gen_tibble.","code":""},{"path":[]},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/gt_impute_xgboost.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Imputation based XGBoost — gt_impute_xgboost","text":"","code":"example_gt <- load_example_gt(\"gen_tbl\")  # Impute the gen_tibble example_gt <- example_gt %>% gt_impute_xgboost()  # And we can check it has been imputed example_gt %>% gt_has_imputed() #> [1] TRUE"},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/gt_load.html","id":null,"dir":"Reference","previous_headings":"","what":"Load a gen_tibble — gt_load","title":"Load a gen_tibble — gt_load","text":"Load gen_tibble previously saved gt_save(). .rds .bk files moved, found automatically. moved, use reattach_to point .rds file (.bk file needs directory .rds file).","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/gt_load.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Load a gen_tibble — gt_load","text":"","code":"gt_load(file = NULL, reattach_to = NULL)"},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/gt_load.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Load a gen_tibble — gt_load","text":"file file name, including full path. end .gt, extension added. reattach_to file name, including full path, .rds file moved. assumes .bk file found path. able leave NULL unless moved files.","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/gt_load.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Load a gen_tibble — gt_load","text":"gen_tibble","code":""},{"path":[]},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/gt_load.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Load a gen_tibble — gt_load","text":"","code":"example_gt <- load_example_gt(\"gen_tbl\")  # remove some individuals example_gt_filtered <- example_gt %>% filter(id != \"a\")  # save the filtered gen_tibble object backing_files <- gt_save(example_gt_filtered,   file_name = paste0(tempfile(), \"_example_filtered\") ) #>  #> gen_tibble saved to /tmp/RtmpblzTyA/file23971e01c23a_example_filtered.gt #> using FBM RDS: /tmp/RtmpblzTyA/file23972ba4f1c7.rds #> with FBM backing file: /tmp/RtmpblzTyA/file23972ba4f1c7.bk #> make sure that you do NOT delete those files! #> to reload the gen_tibble in another session, use: #> gt_load('/tmp/RtmpblzTyA/file23971e01c23a_example_filtered.gt')  # backing_files[1] contains the name of the saved .gt file backing_files[1] #> [1] \"/tmp/RtmpblzTyA/file23971e01c23a_example_filtered.gt\"  # To load the saved gen_tibble object, use the path to the saved .gt file reloaded_gt <- gt_load(backing_files[1])  # And we have loaded the gt without individual \"a\" reloaded_gt #> # A gen_tibble: 6 loci #> # A tibble:     6 × 3 #>   id    population  genotypes #>   <chr> <chr>      <vctr_SNP> #> 1 b     pop1        [2,1,...] #> 2 c     pop2        [2,.,...] #> 3 d     pop2        [1,0,...] #> 4 e     pop1        [1,2,...] #> 5 f     pop3        [0,0,...] #> 6 g     pop3        [0,1,...]"},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/gt_order_loci.html","id":null,"dir":"Reference","previous_headings":"","what":"Order the loci table of a gen_tibble — gt_order_loci","title":"Order the loci table of a gen_tibble — gt_order_loci","text":"function reorders loci table positions within chromosome sequential. also re-saves genotypes new file backed matrix new order, can used functions loci_ld_clump() gt_pca_autoSVD(). loci table already ordered, original gen_tibble returned.","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/gt_order_loci.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Order the loci table of a gen_tibble — gt_order_loci","text":"","code":"gt_order_loci(   .x,   use_current_table = FALSE,   ignore_genetic_dist = TRUE,   quiet = FALSE,   ... )"},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/gt_order_loci.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Order the loci table of a gen_tibble — gt_order_loci","text":".x gen_tibble use_current_table boolean, FALSE (default), table reordered; TRUE, current loci table, might reordered manually, used, positions within chromosome sequential ignore_genetic_dist boolean ignore genetic distance checking. Note , genetic_dist ignored sorted, function set zero avoid problems software. quiet boolean suppress information files ... arguments","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/gt_order_loci.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Order the loci table of a gen_tibble — gt_order_loci","text":"gen_tibble","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/gt_order_loci.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Order the loci table of a gen_tibble — gt_order_loci","text":"","code":"example_gt <- load_example_gt(\"gen_tbl\") %>% select_loci(c(1, 5, 2, 6, 4, 3))  # Loci are in the wrong order show_loci(example_gt) #> # A tibble: 6 × 7 #>   big_index name  chromosome position genetic_dist allele_ref allele_alt #>       <int> <chr> <fct>         <int>        <dbl> <chr>      <chr>      #> 1         1 rs1   chr1              3            0 A          T          #> 2         5 rs5   chr2             23            0 C          G          #> 3         2 rs2   chr1              5            0 T          C          #> 4         6 rs6   chr2            456            0 T          A          #> 5         4 rs4   chr1            343            0 G          C          #> 6         3 rs3   chr1             65            0 C          NA          # Reorder the loci, ignoring genetic distance example_gt_ordered <- gt_order_loci(example_gt, ignore_genetic_dist = TRUE) #> Genetic distances are not sorted, setting them to zero #>  #> gen_backing files updated, now #> using FBM RDS: /tmp/RtmpblzTyA/file23977d118550_v2.rds #> with FBM backing file: /tmp/RtmpblzTyA/file23977d118550_v2.bk #> make sure that you do NOT delete those files!  # Loci are now in the correct order show_loci(example_gt_ordered) #> # A tibble: 6 × 7 #>   big_index name  chromosome position genetic_dist allele_ref allele_alt #>       <int> <chr> <fct>         <int>        <dbl> <chr>      <chr>      #> 1         1 rs1   chr1              3            0 A          T          #> 2         2 rs2   chr1              5            0 T          C          #> 3         3 rs3   chr1             65            0 C          NA         #> 4         4 rs4   chr1            343            0 G          C          #> 5         5 rs5   chr2             23            0 C          G          #> 6         6 rs6   chr2            456            0 T          A"},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/gt_pca.html","id":null,"dir":"Reference","previous_headings":"","what":"Principal Component Analysis for gen_tibble objects — gt_pca","title":"Principal Component Analysis for gen_tibble objects — gt_pca","text":"number PCA methods available gen_tibble objects. mostly designed work large datasets, compute limited number components. smaller datasets, gt_partialSVD allows use partial (truncated) SVD fit PCA; method suitable number individuals much smaller number loci. larger dataset, gt_randomSVD appropriate. Finally, method specifically designed dealing LD large datasets, gt_autoSVD. Whilst arguably best option, somewhat data hungry, suitable large datasets (hundreds individuals several hundred thousands markers, larger).","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/gt_pca.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Principal Component Analysis for gen_tibble objects — gt_pca","text":"NOTE: using gt_pca_autoSVD small dataset likely cause error, see man page details. NOTE: monomorphic markers must removed PCA computed. error message 'Error: variables zero scaling; remove attempting scale.' indicates monomorphic markers present.","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/gt_pca_autoSVD.html","id":null,"dir":"Reference","previous_headings":"","what":"PCA controlling for LD for gen_tibble objects — gt_pca_autoSVD","title":"PCA controlling for LD for gen_tibble objects — gt_pca_autoSVD","text":"function performs Principal Component Analysis gen_tibble, using fast truncated SVD initial pruning iterative removal long-range LD regions. function wrapper bigsnpr::snp_autoSVD()","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/gt_pca_autoSVD.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"PCA controlling for LD for gen_tibble objects — gt_pca_autoSVD","text":"","code":"gt_pca_autoSVD(   x,   k = 10,   fun_scaling = bigsnpr::snp_scaleBinom(),   thr_r2 = 0.2,   use_positions = TRUE,   size = 100/thr_r2,   roll_size = 50,   int_min_size = 20,   alpha_tukey = 0.05,   min_mac = 10,   max_iter = 5,   n_cores = 1,   verbose = TRUE,   total_var = TRUE )"},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/gt_pca_autoSVD.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"PCA controlling for LD for gen_tibble objects — gt_pca_autoSVD","text":"x gen_tbl object k Number singular vectors/values compute. Default 10. algorithm used compute singular vectors/values. fun_scaling Usually  can left unset, defaults bigsnpr::snp_scaleBinom(), appropriate function biallelic SNPs. Alternatively possible use  custom function (see bigsnpr::snp_autoSVD() details. thr_r2 Threshold squared correlation two SNPs. Default 0.2. Use NA want skip clumping step. size use_positions boolean whether position used define size, whether size number SNPs. Default TRUE size one SNP, window size around SNP compute correlations. Default 100 / thr_r2 clumping (0.2 -> 500; 0.1 -> 1000; 0.5 -> 200). providing infos.pos (NULL, default), window number SNPs, otherwise window kb (genetic distance). recommend provide positions available. roll_size Radius rolling windows smooth log-p-values. Default 50. int_min_size Minimum number consecutive outlier SNPs order reported long-range LD region. Default 20. alpha_tukey Default 0.05. type-error rate outlier detection (corrected multiple testing). min_mac Minimum minor allele count (MAC) variants included. Default 10. max_iter Maximum number iterations outlier detection. Default 5. n_cores Number cores used. Default use parallelism. may use bigstatsr::nb_cores(). verbose Output information iterations? Default TRUE. total_var boolean indicating whether compute total variance matrix. Default TRUE. Using FALSE speed computation, total variance stored output (thus possible assign proportion variance explained components).","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/gt_pca_autoSVD.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"PCA controlling for LD for gen_tibble objects — gt_pca_autoSVD","text":"gt_pca object, subclass bigSVD; S3 list elements: named list (S3 class \"big_SVD\") d, eigenvalues (singular values, .e. variances), u, scores sample component (left singular vectors) v, loadings (right singular vectors) center, centering vector, scale, scaling vector, method, string defining method (case 'autoSVD'), call, call generated object. loci, loci used long range LD removal.","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/gt_pca_autoSVD.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"PCA controlling for LD for gen_tibble objects — gt_pca_autoSVD","text":"Using gt_pca_autoSVD requires reasonably large dataset, function iteratively removes regions long range LD. encounter: 'Error rollmean(): Parameter 'size' large.', roll_size exceeds number variants least one chromosomes. Try reducing 'roll_size' avoid error. Note: rather accessing elements directly, better use tidy augment. See gt_pca_tidiers.","code":""},{"path":[]},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/gt_pca_autoSVD.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"PCA controlling for LD for gen_tibble objects — gt_pca_autoSVD","text":"","code":"# Create a gen_tibble of lobster genotypes bed_file <-   system.file(\"extdata\", \"lobster\", \"lobster.bed\", package = \"tidypopgen\") lobsters <- gen_tibble(bed_file,   backingfile = tempfile(\"lobsters\"),   quiet = TRUE )  # Remove monomorphic loci and impute lobsters <- lobsters %>% select_loci_if(loci_maf(genotypes) > 0) lobsters <- gt_impute_simple(lobsters, method = \"mode\")  show_loci(lobsters)$chromosome <- \"1\"  # Create PCA object, including total variance gt_pca_autoSVD(lobsters,   k = 10,   roll_size = 20,   total_var = TRUE ) #> Discarding 0 variant with MAC < 10 or MAF < 0.02. #>  #> Phase of clumping (on MAF) at r^2 > 0.2.. keep 73 variants. #>  #> Iteration 1: #> Computing SVD.. #> 0 outlier variant detected.. #>  #> Converged! #>  === PCA of gen_tibble object === #> Method: [1] \"autoSVD\" #>  #> Call ($call):gt_pca_autoSVD(x = lobsters, k = 10, roll_size = 20, total_var = TRUE) #>  #> Eigenvalues ($d): #>  29.58 23.699 21.738 20.31 20.118 20.016 ... #>  #> Principal component scores ($u): #>  matrix with 176 rows (individuals) and 10 columns (axes)  #>  #> Loadings (Principal axes) ($v): #>  matrix with 73 rows (SNPs) and 10 columns (axes)  #>  # Change number of components and exclude total variance gt_pca_autoSVD(lobsters,   k = 5,   roll_size = 20,   total_var = FALSE ) #> Discarding 0 variant with MAC < 10 or MAF < 0.02. #>  #> Phase of clumping (on MAF) at r^2 > 0.2.. keep 73 variants. #>  #> Iteration 1: #> Computing SVD.. #> 0 outlier variant detected.. #>  #> Converged! #>  === PCA of gen_tibble object === #> Method: [1] \"autoSVD\" #>  #> Call ($call):gt_pca_autoSVD(x = lobsters, k = 5, roll_size = 20, total_var = FALSE) #>  #> Eigenvalues ($d): #>  29.58 23.699 21.738 20.31 20.118  #>  #> Principal component scores ($u): #>  matrix with 176 rows (individuals) and 5 columns (axes)  #>  #> Loadings (Principal axes) ($v): #>  matrix with 73 rows (SNPs) and 5 columns (axes)  #>"},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/gt_pca_partialSVD.html","id":null,"dir":"Reference","previous_headings":"","what":"PCA for gen_tibble objects by partial SVD — gt_pca_partialSVD","title":"PCA for gen_tibble objects by partial SVD — gt_pca_partialSVD","text":"function performs Principal Component Analysis gen_tibble, partial SVD eigen decomposition covariance. works well number individuals much smaller number loci; otherwise, gt_pca_randomSVD() better option. function wrapper bigstatsr::big_SVD().","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/gt_pca_partialSVD.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"PCA for gen_tibble objects by partial SVD — gt_pca_partialSVD","text":"","code":"gt_pca_partialSVD(   x,   k = 10,   fun_scaling = bigsnpr::snp_scaleBinom(),   total_var = TRUE )"},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/gt_pca_partialSVD.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"PCA for gen_tibble objects by partial SVD — gt_pca_partialSVD","text":"x gen_tbl object k Number singular vectors/values compute. Default 10. algorithm used compute singular vectors/values. fun_scaling Usually  can left unset, defaults bigsnpr::snp_scaleBinom(), appropriate function biallelic SNPs. Alternatively possible use  custom function (see bigsnpr::snp_autoSVD() details. total_var boolean indicating whether compute total variance matrix. Default TRUE. Using FALSE speed computation, total variance stored output (thus possible assign proportion variance explained components).","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/gt_pca_partialSVD.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"PCA for gen_tibble objects by partial SVD — gt_pca_partialSVD","text":"gt_pca object, subclass bigSVD; S3 list elements: named list (S3 class \"big_SVD\") d, eigenvalues (singular values, .e. variances), u, scores sample component (left singular vectors) v, loadings (right singular vectors) center, centering vector, scale, scaling vector, method, string defining method (case 'partialSVD'), call, call generated object. square_frobenius, used compute proportion variance explained components (optional) Note: rather accessing elements directly, better use tidy augment. See gt_pca_tidiers.","code":""},{"path":[]},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/gt_pca_partialSVD.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"PCA for gen_tibble objects by partial SVD — gt_pca_partialSVD","text":"","code":"# Create a gen_tibble of lobster genotypes bed_file <-   system.file(\"extdata\", \"lobster\", \"lobster.bed\", package = \"tidypopgen\") lobsters <- gen_tibble(bed_file,   backingfile = tempfile(\"lobsters\"),   quiet = TRUE )  # Remove monomorphic loci and impute lobsters <- lobsters %>% select_loci_if(loci_maf(genotypes) > 0) lobsters <- gt_impute_simple(lobsters, method = \"mode\")  # Create PCA object, including total variance gt_pca_partialSVD(lobsters,   k = 10,   total_var = TRUE ) #>  === PCA of gen_tibble object === #> Method: [1] \"partialSVD\" #>  #> Call ($call):gt_pca_partialSVD(x = lobsters, k = 10, total_var = TRUE) #>  #> Eigenvalues ($d): #>  36.315 30.706 22.432 20.688 20.157 20.1 ... #>  #> Principal component scores ($u): #>  matrix with 176 rows (individuals) and 10 columns (axes)  #>  #> Loadings (Principal axes) ($v): #>  matrix with 79 rows (SNPs) and 10 columns (axes)  #>  # Change number of components and exclude total variance gt_pca_partialSVD(lobsters,   k = 5,   total_var = FALSE ) #>  === PCA of gen_tibble object === #> Method: [1] \"partialSVD\" #>  #> Call ($call):gt_pca_partialSVD(x = lobsters, k = 5, total_var = FALSE) #>  #> Eigenvalues ($d): #>  36.315 30.706 22.432 20.688 20.157  #>  #> Principal component scores ($u): #>  matrix with 176 rows (individuals) and 5 columns (axes)  #>  #> Loadings (Principal axes) ($v): #>  matrix with 79 rows (SNPs) and 5 columns (axes)  #>"},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/gt_pca_randomSVD.html","id":null,"dir":"Reference","previous_headings":"","what":"PCA for gen_tibble objects by randomized partial SVD — gt_pca_randomSVD","title":"PCA for gen_tibble objects by randomized partial SVD — gt_pca_randomSVD","text":"function performs Principal Component Analysis gen_tibble, randomised partial SVD based algorithm RSpectra (Yixuan Qiu Jiali Mei). algorithm linear time dimensions memory-efficient. Thus, can used large big.matrices. function wrapper bigstatsr::big_randomSVD()","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/gt_pca_randomSVD.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"PCA for gen_tibble objects by randomized partial SVD — gt_pca_randomSVD","text":"","code":"gt_pca_randomSVD(   x,   k = 10,   fun_scaling = bigsnpr::snp_scaleBinom(),   tol = 1e-04,   verbose = FALSE,   n_cores = 1,   fun_prod = bigstatsr::big_prodVec,   fun_cprod = bigstatsr::big_cprodVec,   total_var = TRUE )"},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/gt_pca_randomSVD.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"PCA for gen_tibble objects by randomized partial SVD — gt_pca_randomSVD","text":"x gen_tibble object k Number singular vectors/values compute. Default 10. algorithm used compute singular vectors/values. fun_scaling Usually  can left unset, defaults bigsnpr::snp_scaleBinom(), appropriate function biallelic SNPs. Alternatively possible use  custom function (see bigsnpr::snp_autoSVD() details. tol Precision parameter svds. Default 1e-4. verbose progress printed? Default FALSE. n_cores Number cores used. fun_prod Function takes 6 arguments (order): matrix-like object X, vector x, vector row indices ind.row X, vector column indices ind.col X, vector column centers (corresponding ind.col), vector column scales (corresponding ind.col), compute product X (subsetted scaled) x. fun_cprod fun.prod, transpose X. total_var boolean indicating whether compute total variance matrix. Default TRUE. Using FALSE speed computation, total variance stored output (thus possible assign proportion variance explained components).","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/gt_pca_randomSVD.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"PCA for gen_tibble objects by randomized partial SVD — gt_pca_randomSVD","text":"gt_pca object, subclass bigSVD; S3 list elements: named list (S3 class \"big_SVD\") d, eigenvalues (singular values, .e. variances), u, scores sample component (left singular vectors) v, loadings (right singular vectors) center, centering vector, scale, scaling vector, method, string defining method (case 'randomSVD'), call, call generated object. Note: rather accessing elements directly, better use tidy augment. See gt_pca_tidiers.","code":""},{"path":[]},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/gt_pca_randomSVD.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"PCA for gen_tibble objects by randomized partial SVD — gt_pca_randomSVD","text":"","code":"vcf_path <-   system.file(\"extdata\", \"anolis\",     \"punctatus_t70_s10_n46_filtered.recode.vcf.gz\",     package = \"tidypopgen\"   ) anole_gt <-   gen_tibble(vcf_path, quiet = TRUE, backingfile = tempfile(\"anolis_\"))  # Remove monomorphic loci and impute anole_gt <- anole_gt %>% select_loci_if(loci_maf(genotypes) > 0) anole_gt <- gt_impute_simple(anole_gt, method = \"mode\")  # Create PCA object, including total variance gt_pca_randomSVD(anole_gt, k = 10, total_var = TRUE) #>  === PCA of gen_tibble object === #> Method: [1] \"randomSVD\" #>  #> Call ($call):gt_pca_randomSVD(x = anole_gt, k = 10, total_var = TRUE) #>  #> Eigenvalues ($d): #>  351.891 192.527 113.562 104.427 87.615 83.476 ... #>  #> Principal component scores ($u): #>  matrix with 46 rows (individuals) and 10 columns (axes)  #>  #> Loadings (Principal axes) ($v): #>  matrix with 3249 rows (SNPs) and 10 columns (axes)  #>"},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/gt_pcadapt.html","id":null,"dir":"Reference","previous_headings":"","what":"pcadapt analysis on a gen_tibble object — gt_pcadapt","title":"pcadapt analysis on a gen_tibble object — gt_pcadapt","text":"pcadapt algorithm detects genetic markers selection. based principal component analysis (PCA) genotypes individuals. method described Luu et al. (2017). See R package pcadapt, provides extensive documentation examples.","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/gt_pcadapt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"pcadapt analysis on a gen_tibble object — gt_pcadapt","text":"","code":"gt_pcadapt(x, pca, k, n_cores = 1)"},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/gt_pcadapt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"pcadapt analysis on a gen_tibble object — gt_pcadapt","text":"x gen_tibble object. pca gt_pca object, returned gt_pca_partialSVD() gt_pca_randomSVD(). k Number principal components use analysis. n_cores Number cores use.","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/gt_pcadapt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"pcadapt analysis on a gen_tibble object — gt_pcadapt","text":"object subclass gt_pcadapt, subclass mhtest.","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/gt_pcadapt.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"pcadapt analysis on a gen_tibble object — gt_pcadapt","text":"Internally, function uses snp_pcadapt function bigsnpr package.","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/gt_pcadapt.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"pcadapt analysis on a gen_tibble object — gt_pcadapt","text":"Luu, K., Bazin, E., Blum, M. G. B., & François, O. (2017). pcadapt: R package genome scans selection based principal component analysis. Molecular Ecology Resources, 17(1), 67–77.","code":""},{"path":[]},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/gt_pcadapt.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"pcadapt analysis on a gen_tibble object — gt_pcadapt","text":"","code":"# Create a gen_tibble of lobster genotypes bed_file <-   system.file(\"extdata\", \"lobster\", \"lobster.bed\", package = \"tidypopgen\") lobsters <- gen_tibble(bed_file,   backingfile = tempfile(\"lobsters\"),   quiet = TRUE )  # Remove monomorphic loci and impute lobsters <- lobsters %>% select_loci_if(loci_maf(genotypes) > 0) lobsters <- gt_impute_simple(lobsters, method = \"mode\")  # Create PCA object pca <- gt_pca_partialSVD(lobsters)  # Create a gt_pcadapt object gt_pcadapt(lobsters, pca, k = 2) #>           score #> 1    0.36303164 #> 2    0.24568935 #> 3  153.22292375 #> 4    3.93650208 #> 5    0.11196701 #> 6    2.38416815 #> 7    2.66365605 #> 8    2.64455532 #> 9   38.57907876 #> 10   2.99075987 #> 11   4.04771750 #> 12   1.14937969 #> 13   3.07534701 #> 14 104.50165336 #> 15   2.60156582 #> 16  15.35834730 #> 17   0.20860460 #> 18   0.62158759 #> 19   0.60381845 #> 20   0.70103898 #> 21   2.29760582 #> 22   0.44573258 #> 23   0.76533076 #> 24   2.02862222 #> 25   3.51556528 #> 26   1.34314291 #> 27   1.74851790 #> 28   2.53764572 #> 29   1.27798010 #> 30   0.35833667 #> 31   1.27409514 #> 32   2.63218864 #> 33  12.75819062 #> 34   2.97484070 #> 35  31.33624547 #> 36   1.47733544 #> 37   0.63981380 #> 38   5.97172846 #> 39   6.45476641 #> 40   2.08447736 #> 41   0.51036181 #> 42   2.21930722 #> 43  15.58704986 #> 44   5.69759933 #> 45   1.01963043 #> 46   0.56924201 #> 47  37.87311022 #> 48  19.80537428 #> 49   4.08690657 #> 50   4.78621513 #> 51   0.87375688 #> 52   0.66237899 #> 53   3.27255510 #> 54   0.32213271 #> 55 116.37714163 #> 56   0.88127337 #> 57  28.93585151 #> 58   2.66752619 #> 59   0.43112994 #> 60   5.05431167 #> 61   0.52086335 #> 62   3.47781489 #> 63   1.92363951 #> 64   1.47555194 #> 65   0.72388959 #> 66   0.23119031 #> 67  89.07945319 #> 68   6.41005638 #> 69  46.11134298 #> 70   1.05533133 #> 71   0.56047053 #> 72   2.76880941 #> 73   0.83736786 #> 74   0.02265872 #> 75   3.32767329 #> 76   1.52858594 #> 77   1.90465460 #> 78 251.51569010 #> 79 152.26487463"},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/gt_pseudohaploid.html","id":null,"dir":"Reference","previous_headings":"","what":"Set the ploidy of a gen_tibble to include pseudohaploids — gt_pseudohaploid","title":"Set the ploidy of a gen_tibble to include pseudohaploids — gt_pseudohaploid","text":"gen_tibble includes pseudohaploid data, ploidy set -2 indicate individuals coded pseudohaploids. ploidy individuals updated, pseudohaploids set 1 diploids set 2. However, dosages changed, meaning pseudohaploids still coded 0 2. gen_tibble already set pseudohaploid, running gt_pseudohaploid update ploidy values , pseudohaploid individuals removed ploidy reset 2.","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/gt_pseudohaploid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set the ploidy of a gen_tibble to include pseudohaploids — gt_pseudohaploid","text":"","code":"gt_pseudohaploid(x, test_n_loci = 10000)"},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/gt_pseudohaploid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set the ploidy of a gen_tibble to include pseudohaploids — gt_pseudohaploid","text":"x gen_tibble object test_n_loci number loci test determine individual pseudohaploid. heterozygotes first test_n_loci loci, individual considered pseudohaploid. NULL, loci tested.","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/gt_pseudohaploid.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set the ploidy of a gen_tibble to include pseudohaploids — gt_pseudohaploid","text":"gen_tibble object ploidy set -2 individual ploidy values updated 1 2.","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/gt_pseudohaploid.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set the ploidy of a gen_tibble to include pseudohaploids — gt_pseudohaploid","text":"","code":"example_gt <- load_example_gt(\"gen_tbl\")  # Detect pseudohaploids and set ploidy for the whole gen_tibble example_gt <- example_gt %>% gt_pseudohaploid(test_n_loci = 3)  # Ploidy is now set to -2 show_ploidy(example_gt) #> [1] -2  # Individual ploidy now varies between 1 (pseudohaploid) and 2 (diploid) indiv_ploidy(example_gt) #> [1] 2 2 1 2 2 1 2"},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/gt_save.html","id":null,"dir":"Reference","previous_headings":"","what":"Save a gen_tibble — gt_save","title":"Save a gen_tibble — gt_save","text":"Save tibble (update backing files). gen_tibble object saved file extension .gt, together update .rds .bk files. Note multiple .gt files can linked .rds .bk files; generally, occurs create multiple subsets data. .gt file stores information subset full dataset interested , whilst .rds .bk file store full dataset. reload gen_tibble, can pass name .gt file gt_load().","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/gt_save.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Save a gen_tibble — gt_save","text":"","code":"gt_save(x, file_name = NULL, quiet = FALSE)"},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/gt_save.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Save a gen_tibble — gt_save","text":"x gen_tibble file_name file name, including full path. end .gt, extension added. quiet boolean suppress information files","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/gt_save.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Save a gen_tibble — gt_save","text":"file name path .gt file, together .rds .bk files","code":""},{"path":[]},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/gt_save.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Save a gen_tibble — gt_save","text":"","code":"example_gt <- load_example_gt(\"gen_tbl\")  # remove some individuals example_gt <- example_gt %>% filter(id != \"a\")  # save filtered gen_tibble object gt_save(example_gt, file_name = paste0(tempfile(), \"_example_filtered\")) #>  #> gen_tibble saved to /tmp/RtmpblzTyA/file239729dfcc23_example_filtered.gt #> using FBM RDS: /tmp/RtmpblzTyA/file2397302da395.rds #> with FBM backing file: /tmp/RtmpblzTyA/file2397302da395.bk #> make sure that you do NOT delete those files! #> to reload the gen_tibble in another session, use: #> gt_load('/tmp/RtmpblzTyA/file239729dfcc23_example_filtered.gt') #> [1] \"/tmp/RtmpblzTyA/file239729dfcc23_example_filtered.gt\" #> [2] \"/tmp/RtmpblzTyA/file2397302da395.rds\"                 #> [3] \"/tmp/RtmpblzTyA/file2397302da395.bk\""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/gt_set_imputed.html","id":null,"dir":"Reference","previous_headings":"","what":"Sets a gen_tibble to use imputed data — gt_set_imputed","title":"Sets a gen_tibble to use imputed data — gt_set_imputed","text":"function sets unsets use imputed data. analysis, PCA, allow missing data, use imputation, analysis might preferable allow missing data.","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/gt_set_imputed.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sets a gen_tibble to use imputed data — gt_set_imputed","text":"","code":"gt_set_imputed(x, set = NULL)"},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/gt_set_imputed.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sets a gen_tibble to use imputed data — gt_set_imputed","text":"x gen_tibble set boolean defining whether imputed data used","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/gt_set_imputed.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sets a gen_tibble to use imputed data — gt_set_imputed","text":"gen_tibble, invisibly","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/gt_set_imputed.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sets a gen_tibble to use imputed data — gt_set_imputed","text":"","code":"example_gt <- load_example_gt(\"gen_tbl\")  # Impute the gen_tibble example_gt <- example_gt %>% gt_impute_simple()  # Check whether the gen_tibble uses imputed values example_gt %>% gt_uses_imputed() #> [1] FALSE  # Set the gen_tibble to use imputed values example_gt %>% gt_set_imputed(TRUE)  # And check that the gen_tibble uses imputed values again example_gt %>% gt_uses_imputed() #> [1] TRUE"},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/gt_snmf.html","id":null,"dir":"Reference","previous_headings":"","what":"Run SNMF from R in tidypopgen — gt_snmf","title":"Run SNMF from R in tidypopgen — gt_snmf","text":"Run SNMF R tidypopgen","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/gt_snmf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run SNMF from R in tidypopgen — gt_snmf","text":"","code":"gt_snmf(   x,   k,   project = \"continue\",   n_runs = 1,   alpha,   tolerance = 1e-05,   entropy = FALSE,   percentage = 0.05,   I,   iterations = 200,   ploidy = 2,   seed = -1 )"},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/gt_snmf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run SNMF from R in tidypopgen — gt_snmf","text":"x gen_tibble character giving path input geno file k integer giving number clusters project one \"continue\", \"new\", \"force\": \"continue\" stores files current project, \"new\" creates new project, \"force\" stores results current project even .geno input file altered, n_runs number runs k value (defaults 1) alpha numeric snmf regularization parameter. See LEA::snmf details tolerance numeric value tolerance (default 0.00001) entropy boolean indicating whether estimate cross-entropy percentage numeric value indicating percentage masked genotypes, ranging 0 1, used entropy = TRUE number SNPs initialising snmf algorithm iterations numeric integer maximum iterations (default 200) ploidy ploidy input data (defaults 2) seed seed random number generator","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/gt_snmf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run SNMF from R in tidypopgen — gt_snmf","text":"object class gt_admix consisting list following elements: k number clusters Q matrix admixture proportions P matrix allele frequencies log log output generated ADMIXTURE (usually printed screen running command line) cv masked cross-entropy (entropy TRUE) loglik log likelihood model id id column input gen_tibble (applicable) group group column input gen_tibble (applicable)","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/gt_snmf.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Run SNMF from R in tidypopgen — gt_snmf","text":"wrapper LEA::snmf().","code":""},{"path":[]},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/gt_snmf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run SNMF from R in tidypopgen — gt_snmf","text":"","code":"# run the example only if we have the package installed example_gt <- load_example_gt(\"gen_tbl\")  # To run SNMF on a gen_tibble: example_gt %>% gt_snmf(   k = 1:3, project = \"force\", entropy = TRUE,   percentage = 0.5, n_runs = 1, seed = 1, alpha = 100 ) #> $k #> [1] 1 2 3 #>  #> $Q #> $Q[[1]] #>      .Q1 #> [1,]   1 #> [2,]   1 #> [3,]   1 #> [4,]   1 #> [5,]   1 #> [6,]   1 #> [7,]   1 #> attr(,\"class\") #> [1] \"q_matrix\" \"matrix\"   \"array\"    #>  #> $Q[[2]] #>              .Q1         .Q2 #> [1,] 0.000274926 0.999725000 #> [2,] 0.000100000 0.999900000 #> [3,] 0.000100000 0.999900000 #> [4,] 0.999900000 0.000100000 #> [5,] 0.999742000 0.000257853 #> [6,] 0.999719000 0.000281284 #> [7,] 0.000317214 0.999683000 #> attr(,\"class\") #> [1] \"q_matrix\" \"matrix\"   \"array\"    #>  #> $Q[[3]] #>              .Q1         .Q2         .Q3 #> [1,] 0.000240022 0.999520000 0.000240022 #> [2,] 0.000222869 0.999554000 0.000222869 #> [3,] 0.000222869 0.999554000 0.000222869 #> [4,] 0.999538000 0.000231010 0.000231010 #> [5,] 0.999800000 0.000099990 0.000099990 #> [6,] 0.000275505 0.000275505 0.999449000 #> [7,] 0.000275525 0.000275525 0.999449000 #> attr(,\"class\") #> [1] \"q_matrix\" \"matrix\"   \"array\"    #>  #>  #> $P #> list() #>  #> $log #>   [1] \"The project is saved into :\"                                                                                                   #>   [2] \"  \"                                                                                                                            #>   [3] \"\"                                                                                                                              #>   [4] \"To load the project, use:\"                                                                                                     #>   [5] \" project = load.snmfProject(\\\"\\\")\"                                                                                             #>   [6] \"\"                                                                                                                              #>   [7] \"To remove the project, use:\"                                                                                                   #>   [8] \" remove.snmfProject(\\\"\\\")\"                                                                                                     #>   [9] \"\"                                                                                                                              #>  [10] \"[1] 1\"                                                                                                                         #>  [11] \"[1] \\\"*************************************\\\"\"                                                                                 #>  [12] \"[1] \\\"*          create.dataset            *\\\"\"                                                                                #>  [13] \"[1] \\\"*************************************\\\"\"                                                                                 #>  [14] \"summary of the options:\"                                                                                                       #>  [15] \"\"                                                                                                                              #>  [16] \"        -n (number of individuals)                 7\"                                                                          #>  [17] \"        -L (number of loci)                        6\"                                                                          #>  [18] \"        -s (seed random init)                      1\"                                                                          #>  [19] \"        -r (percentage of masked data)             0.5\"                                                                        #>  [20] \"        -x (genotype file in .geno format)         /tmp/RtmpblzTyA/file239766eab69c.geno\"                                      #>  [21] \"        -o (output file in .geno format)           /tmp/RtmpblzTyA/file239766eab69c.snmf/masked/file239766eab69c_I.geno\"       #>  [22] \"\"                                                                                                                              #>  [23] \" Write genotype file with masked data, /tmp/RtmpblzTyA/file239766eab69c.snmf/masked/file239766eab69c_I.geno:\\t\\tOK.\"           #>  [24] \"\"                                                                                                                              #>  [25] \"[1] \\\"*************************************\\\"\"                                                                                 #>  [26] \"[1] \\\"* sNMF K = 1  repetition 1      *\\\"\"                                                                                     #>  [27] \"[1] \\\"*************************************\\\"\"                                                                                 #>  [28] \"summary of the options:\"                                                                                                       #>  [29] \"\"                                                                                                                              #>  [30] \"        -n (number of individuals)             7\"                                                                              #>  [31] \"        -L (number of loci)                    6\"                                                                              #>  [32] \"        -K (number of ancestral pops)          1\"                                                                              #>  [33] \"        -x (input file)                        /tmp/RtmpblzTyA/file239766eab69c.snmf/masked/file239766eab69c_I.geno\"           #>  [34] \"        -q (individual admixture file)         /tmp/RtmpblzTyA/file239766eab69c.snmf/K1/run1/file239766eab69c_r1.1.Q\"          #>  [35] \"        -g (ancestral frequencies file)        /tmp/RtmpblzTyA/file239766eab69c.snmf/K1/run1/file239766eab69c_r1.1.G\"          #>  [36] \"        -i (number max of iterations)          200\"                                                                            #>  [37] \"        -a (regularization parameter)          100\"                                                                            #>  [38] \"        -s (seed random init)                  94390496264193\"                                                                 #>  [39] \"        -e (tolerance error)                   1E-05\"                                                                          #>  [40] \"        -p (number of processes)               1\"                                                                              #>  [41] \"        - diploid\"                                                                                                             #>  [42] \"\"                                                                                                                              #>  [43] \"Read genotype file /tmp/RtmpblzTyA/file239766eab69c.snmf/masked/file239766eab69c_I.geno:\\t\\tOK.\"                               #>  [44] \"\"                                                                                                                              #>  [45] \"\"                                                                                                                              #>  [46] \"Main algorithm:\"                                                                                                               #>  [47] \"\"                                                                                                                              #>  [48] \"Least-square error: 13.714286\"                                                                                                 #>  [49] \"Write individual ancestry coefficient file /tmp/RtmpblzTyA/file239766eab69c.snmf/K1/run1/file239766eab69c_r1.1.Q:\\t\\tOK.\"      #>  [50] \"Write ancestral allele frequency coefficient file /tmp/RtmpblzTyA/file239766eab69c.snmf/K1/run1/file239766eab69c_r1.1.G:\\tOK.\" #>  [51] \"\"                                                                                                                              #>  [52] \"[1] \\\"*************************************\\\"\"                                                                                 #>  [53] \"[1] \\\"*    cross-entropy estimation       *\\\"\"                                                                                 #>  [54] \"[1] \\\"*************************************\\\"\"                                                                                 #>  [55] \"summary of the options:\"                                                                                                       #>  [56] \"\"                                                                                                                              #>  [57] \"        -n (number of individuals)         7\"                                                                                  #>  [58] \"        -L (number of loci)                6\"                                                                                  #>  [59] \"        -K (number of ancestral pops)      1\"                                                                                  #>  [60] \"        -x (genotype file)                 /tmp/RtmpblzTyA/file239766eab69c.geno\"                                              #>  [61] \"        -q (individual admixture)          /tmp/RtmpblzTyA/file239766eab69c.snmf/K1/run1/file239766eab69c_r1.1.Q\"              #>  [62] \"        -g (ancestral frequencies)         /tmp/RtmpblzTyA/file239766eab69c.snmf/K1/run1/file239766eab69c_r1.1.G\"              #>  [63] \"        -i (with masked genotypes)         /tmp/RtmpblzTyA/file239766eab69c.snmf/masked/file239766eab69c_I.geno\"               #>  [64] \"        - diploid\"                                                                                                             #>  [65] \"\"                                                                                                                              #>  [66] \"Cross-Entropy (all data):\\t 0.706731\"                                                                                          #>  [67] \"Cross-Entropy (masked data):\\t 4.42151\"                                                                                        #>  [68] \"The project is saved into :\"                                                                                                   #>  [69] \"  \"                                                                                                                            #>  [70] \"\"                                                                                                                              #>  [71] \"To load the project, use:\"                                                                                                     #>  [72] \" project = load.snmfProject(\\\"\\\")\"                                                                                             #>  [73] \"\"                                                                                                                              #>  [74] \"To remove the project, use:\"                                                                                                   #>  [75] \" remove.snmfProject(\\\"\\\")\"                                                                                                     #>  [76] \"\"                                                                                                                              #>  [77] \"[1] \\\"*************************************\\\"\"                                                                                 #>  [78] \"[1] \\\"* sNMF K = 2  repetition 1      *\\\"\"                                                                                     #>  [79] \"[1] \\\"*************************************\\\"\"                                                                                 #>  [80] \"summary of the options:\"                                                                                                       #>  [81] \"\"                                                                                                                              #>  [82] \"        -n (number of individuals)             7\"                                                                              #>  [83] \"        -L (number of loci)                    6\"                                                                              #>  [84] \"        -K (number of ancestral pops)          2\"                                                                              #>  [85] \"        -x (input file)                        /tmp/RtmpblzTyA/file239766eab69c.snmf/masked/file239766eab69c_I.geno\"           #>  [86] \"        -q (individual admixture file)         /tmp/RtmpblzTyA/file239766eab69c.snmf/K2/run1/file239766eab69c_r1.2.Q\"          #>  [87] \"        -g (ancestral frequencies file)        /tmp/RtmpblzTyA/file239766eab69c.snmf/K2/run1/file239766eab69c_r1.2.G\"          #>  [88] \"        -i (number max of iterations)          200\"                                                                            #>  [89] \"        -a (regularization parameter)          100\"                                                                            #>  [90] \"        -s (seed random init)                  1\"                                                                              #>  [91] \"        -e (tolerance error)                   1E-05\"                                                                          #>  [92] \"        -p (number of processes)               1\"                                                                              #>  [93] \"        - diploid\"                                                                                                             #>  [94] \"\"                                                                                                                              #>  [95] \"Read genotype file /tmp/RtmpblzTyA/file239766eab69c.snmf/masked/file239766eab69c_I.geno:\\t\\tOK.\"                               #>  [96] \"\"                                                                                                                              #>  [97] \"\"                                                                                                                              #>  [98] \"Main algorithm:\"                                                                                                               #>  [99] \"\\t[                                                                           ]\"                                               #> [100] \"\\t[======]\"                                                                                                                    #> [101] \"Number of iterations: 16\"                                                                                                      #> [102] \"\"                                                                                                                              #> [103] \"Least-square error: 14.000528\"                                                                                                 #> [104] \"Write individual ancestry coefficient file /tmp/RtmpblzTyA/file239766eab69c.snmf/K2/run1/file239766eab69c_r1.2.Q:\\t\\tOK.\"      #> [105] \"Write ancestral allele frequency coefficient file /tmp/RtmpblzTyA/file239766eab69c.snmf/K2/run1/file239766eab69c_r1.2.G:\\tOK.\" #> [106] \"\"                                                                                                                              #> [107] \"[1] \\\"*************************************\\\"\"                                                                                 #> [108] \"[1] \\\"*    cross-entropy estimation       *\\\"\"                                                                                 #> [109] \"[1] \\\"*************************************\\\"\"                                                                                 #> [110] \"summary of the options:\"                                                                                                       #> [111] \"\"                                                                                                                              #> [112] \"        -n (number of individuals)         7\"                                                                                  #> [113] \"        -L (number of loci)                6\"                                                                                  #> [114] \"        -K (number of ancestral pops)      2\"                                                                                  #> [115] \"        -x (genotype file)                 /tmp/RtmpblzTyA/file239766eab69c.geno\"                                              #> [116] \"        -q (individual admixture)          /tmp/RtmpblzTyA/file239766eab69c.snmf/K2/run1/file239766eab69c_r1.2.Q\"              #> [117] \"        -g (ancestral frequencies)         /tmp/RtmpblzTyA/file239766eab69c.snmf/K2/run1/file239766eab69c_r1.2.G\"              #> [118] \"        -i (with masked genotypes)         /tmp/RtmpblzTyA/file239766eab69c.snmf/masked/file239766eab69c_I.geno\"               #> [119] \"        - diploid\"                                                                                                             #> [120] \"\"                                                                                                                              #> [121] \"Cross-Entropy (all data):\\t 0.69943\"                                                                                           #> [122] \"Cross-Entropy (masked data):\\t 4.79389\"                                                                                        #> [123] \"The project is saved into :\"                                                                                                   #> [124] \"  \"                                                                                                                            #> [125] \"\"                                                                                                                              #> [126] \"To load the project, use:\"                                                                                                     #> [127] \" project = load.snmfProject(\\\"\\\")\"                                                                                             #> [128] \"\"                                                                                                                              #> [129] \"To remove the project, use:\"                                                                                                   #> [130] \" remove.snmfProject(\\\"\\\")\"                                                                                                     #> [131] \"\"                                                                                                                              #> [132] \"[1] \\\"*************************************\\\"\"                                                                                 #> [133] \"[1] \\\"* sNMF K = 3  repetition 1      *\\\"\"                                                                                     #> [134] \"[1] \\\"*************************************\\\"\"                                                                                 #> [135] \"summary of the options:\"                                                                                                       #> [136] \"\"                                                                                                                              #> [137] \"        -n (number of individuals)             7\"                                                                              #> [138] \"        -L (number of loci)                    6\"                                                                              #> [139] \"        -K (number of ancestral pops)          3\"                                                                              #> [140] \"        -x (input file)                        /tmp/RtmpblzTyA/file239766eab69c.snmf/masked/file239766eab69c_I.geno\"           #> [141] \"        -q (individual admixture file)         /tmp/RtmpblzTyA/file239766eab69c.snmf/K3/run1/file239766eab69c_r1.3.Q\"          #> [142] \"        -g (ancestral frequencies file)        /tmp/RtmpblzTyA/file239766eab69c.snmf/K3/run1/file239766eab69c_r1.3.G\"          #> [143] \"        -i (number max of iterations)          200\"                                                                            #> [144] \"        -a (regularization parameter)          100\"                                                                            #> [145] \"        -s (seed random init)                  94390496264193\"                                                                 #> [146] \"        -e (tolerance error)                   1E-05\"                                                                          #> [147] \"        -p (number of processes)               1\"                                                                              #> [148] \"        - diploid\"                                                                                                             #> [149] \"\"                                                                                                                              #> [150] \"Read genotype file /tmp/RtmpblzTyA/file239766eab69c.snmf/masked/file239766eab69c_I.geno:\\t\\tOK.\"                               #> [151] \"\"                                                                                                                              #> [152] \"\"                                                                                                                              #> [153] \"Main algorithm:\"                                                                                                               #> [154] \"\\t[                                                                           ]\"                                               #> [155] \"\\t[======]\"                                                                                                                    #> [156] \"Number of iterations: 16\"                                                                                                      #> [157] \"\"                                                                                                                              #> [158] \"Least-square error: 8.583557\"                                                                                                  #> [159] \"Write individual ancestry coefficient file /tmp/RtmpblzTyA/file239766eab69c.snmf/K3/run1/file239766eab69c_r1.3.Q:\\t\\tOK.\"      #> [160] \"Write ancestral allele frequency coefficient file /tmp/RtmpblzTyA/file239766eab69c.snmf/K3/run1/file239766eab69c_r1.3.G:\\tOK.\" #> [161] \"\"                                                                                                                              #> [162] \"[1] \\\"*************************************\\\"\"                                                                                 #> [163] \"[1] \\\"*    cross-entropy estimation       *\\\"\"                                                                                 #> [164] \"[1] \\\"*************************************\\\"\"                                                                                 #> [165] \"summary of the options:\"                                                                                                       #> [166] \"\"                                                                                                                              #> [167] \"        -n (number of individuals)         7\"                                                                                  #> [168] \"        -L (number of loci)                6\"                                                                                  #> [169] \"        -K (number of ancestral pops)      3\"                                                                                  #> [170] \"        -x (genotype file)                 /tmp/RtmpblzTyA/file239766eab69c.geno\"                                              #> [171] \"        -q (individual admixture)          /tmp/RtmpblzTyA/file239766eab69c.snmf/K3/run1/file239766eab69c_r1.3.Q\"              #> [172] \"        -g (ancestral frequencies)         /tmp/RtmpblzTyA/file239766eab69c.snmf/K3/run1/file239766eab69c_r1.3.G\"              #> [173] \"        -i (with masked genotypes)         /tmp/RtmpblzTyA/file239766eab69c.snmf/masked/file239766eab69c_I.geno\"               #> [174] \"        - diploid\"                                                                                                             #> [175] \"\"                                                                                                                              #> [176] \"Cross-Entropy (all data):\\t 0.349945\"                                                                                          #> [177] \"Cross-Entropy (masked data):\\t 5.78159\"                                                                                        #> [178] \"The project is saved into :\"                                                                                                   #> [179] \"  \"                                                                                                                            #> [180] \"\"                                                                                                                              #> [181] \"To load the project, use:\"                                                                                                     #> [182] \" project = load.snmfProject(\\\"\\\")\"                                                                                             #> [183] \"\"                                                                                                                              #> [184] \"To remove the project, use:\"                                                                                                   #> [185] \" remove.snmfProject(\\\"\\\")\"                                                                                                     #> [186] \"\"                                                                                                                              #> [187] \"snmf Project\"                                                                                                                  #> [188] \"\"                                                                                                                              #> [189] \"snmfProject file:                 file239766eab69c.snmfProject \"                                                               #> [190] \"project directory:                /tmp/RtmpblzTyA/ \"                                                                           #> [191] \"snmf results directory:           file239766eab69c.snmf/ \"                                                                     #> [192] \"date of creation:                 1761322088 \"                                                                                 #> [193] \"input file:                       file239766eab69c.geno \"                                                                      #> [194] \"number of individuals:            7 \"                                                                                          #> [195] \"number of loci:                   6 \"                                                                                          #> [196] \"number of ancestral populations:  1 2 3 \"                                                                                      #> [197] \"\"                                                                                                                              #> [198] \"***** run *****\"                                                                                                               #> [199] \"snmf class\"                                                                                                                    #> [200] \"\"                                                                                                                              #> [201] \"file directory:                   K1/run1/ \"                                                                                   #> [202] \"Q output file:                    file239766eab69c_r1.1.Q \"                                                                    #> [203] \"G output file:                    file239766eab69c_r1.1.G \"                                                                    #> [204] \"snmfClass file:                   file239766eab69c_r1.1.snmfClass \"                                                            #> [205] \"number of ancestral populations:  1 \"                                                                                          #> [206] \"run number:                       1 \"                                                                                          #> [207] \"regularization parameter:         100 \"                                                                                        #> [208] \"number of CPUs:                   1 \"                                                                                          #> [209] \"seed:                             1 \"                                                                                          #> [210] \"maximal number of iterations:     200 \"                                                                                        #> [211] \"tolerance error:                  1e-05 \"                                                                                      #> [212] \"Q input file:                      \"                                                                                           #> [213] \"cross-Entropy:                    4.421509 \"                                                                                   #> [214] \"\"                                                                                                                              #> [215] \"***** run *****\"                                                                                                               #> [216] \"snmf class\"                                                                                                                    #> [217] \"\"                                                                                                                              #> [218] \"file directory:                   K2/run1/ \"                                                                                   #> [219] \"Q output file:                    file239766eab69c_r1.2.Q \"                                                                    #> [220] \"G output file:                    file239766eab69c_r1.2.G \"                                                                    #> [221] \"snmfClass file:                   file239766eab69c_r1.2.snmfClass \"                                                            #> [222] \"number of ancestral populations:  2 \"                                                                                          #> [223] \"run number:                       1 \"                                                                                          #> [224] \"regularization parameter:         100 \"                                                                                        #> [225] \"number of CPUs:                   1 \"                                                                                          #> [226] \"seed:                             1 \"                                                                                          #> [227] \"maximal number of iterations:     200 \"                                                                                        #> [228] \"tolerance error:                  1e-05 \"                                                                                      #> [229] \"Q input file:                      \"                                                                                           #> [230] \"cross-Entropy:                    4.793895 \"                                                                                   #> [231] \"\"                                                                                                                              #> [232] \"***** run *****\"                                                                                                               #> [233] \"snmf class\"                                                                                                                    #> [234] \"\"                                                                                                                              #> [235] \"file directory:                   K3/run1/ \"                                                                                   #> [236] \"Q output file:                    file239766eab69c_r1.3.Q \"                                                                    #> [237] \"G output file:                    file239766eab69c_r1.3.G \"                                                                    #> [238] \"snmfClass file:                   file239766eab69c_r1.3.snmfClass \"                                                            #> [239] \"number of ancestral populations:  3 \"                                                                                          #> [240] \"run number:                       1 \"                                                                                          #> [241] \"regularization parameter:         100 \"                                                                                        #> [242] \"number of CPUs:                   1 \"                                                                                          #> [243] \"seed:                             1 \"                                                                                          #> [244] \"maximal number of iterations:     200 \"                                                                                        #> [245] \"tolerance error:                  1e-05 \"                                                                                      #> [246] \"Q input file:                      \"                                                                                           #> [247] \"cross-Entropy:                    5.781592 \"                                                                                   #>  #> $loglik #> numeric(0) #>  #> $G #> $G[[1]] #>            .Q1 #>  [1,] 0.285714 #>  [2,] 0.428571 #>  [3,] 0.285714 #>  [4,] 0.285714 #>  [5,] 0.714286 #>  [6,] 0.000100 #>  [7,] 0.857143 #>  [8,] 0.142857 #>  [9,] 0.999900 #> [10,] 0.000100 #> [11,] 0.000100 #> [12,] 0.000100 #> [13,] 0.285714 #> [14,] 0.714286 #> [15,] 0.000100 #> [16,] 0.857143 #> [17,] 0.142857 #> [18,] 0.000100 #> attr(,\"class\") #> [1] \"q_matrix\" \"matrix\"   \"array\"    #>  #> $G[[2]] #>            .Q1      .Q2 #>  [1,] 0.666578 0.749950 #>  [2,] 0.333422 0.000100 #>  [3,] 0.000100 0.250050 #>  [4,] 0.333359 0.000100 #>  [5,] 0.666641 0.999900 #>  [6,] 0.000100 0.000100 #>  [7,] 0.500021 0.249966 #>  [8,] 0.000100 0.250034 #>  [9,] 0.499979 0.500000 #> [10,] 0.000100 0.000100 #> [11,] 0.000100 0.000100 #> [12,] 0.000100 0.000100 #> [13,] 0.999900 0.500000 #> [14,] 0.000100 0.500000 #> [15,] 0.000100 0.000100 #> [16,] 0.333262 0.750059 #> [17,] 0.666738 0.249941 #> [18,] 0.000100 0.000100 #> attr(,\"class\") #> [1] \"q_matrix\" \"matrix\"   \"array\"    #>  #> $G[[3]] #>            .Q1      .Q2      .Q3 #>  [1,] 0.000100 0.000100 0.999900 #>  [2,] 0.999900 0.333173 0.000100 #>  [3,] 0.000100 0.666827 0.000100 #>  [4,] 0.500116 0.000100 0.999900 #>  [5,] 0.499884 0.999900 0.000100 #>  [6,] 0.000100 0.000100 0.000100 #>  [7,] 0.500014 0.500029 0.249862 #>  [8,] 0.000100 0.000100 0.250138 #>  [9,] 0.499986 0.499971 0.500000 #> [10,] 0.000100 0.000100 0.000100 #> [11,] 0.000100 0.000100 0.000100 #> [12,] 0.000100 0.000100 0.000100 #> [13,] 0.999900 0.000100 0.500000 #> [14,] 0.000100 0.999900 0.500000 #> [15,] 0.000100 0.000100 0.000100 #> [16,] 0.999900 0.999900 0.499724 #> [17,] 0.000100 0.000100 0.500276 #> [18,] 0.000100 0.000100 0.000100 #> attr(,\"class\") #> [1] \"q_matrix\" \"matrix\"   \"array\"    #>  #>  #> $cv #> [1] 4.42151 4.79389 5.78159 #>  #> $id #> [1] \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\" #>  #> $algorithm #> [1] \"SNMF\" #>  #> attr(,\"class\") #> [1] \"gt_admix\" \"list\""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/gt_update_backingfile.html","id":null,"dir":"Reference","previous_headings":"","what":"Update the backing matrix — gt_update_backingfile","title":"Update the backing matrix — gt_update_backingfile","text":"functions forces re-write file backing matrix match gen_tibble. Individuals loci subsetted reordered according current state gen_tibble. Tests function test_gt_order_loci.R","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/gt_update_backingfile.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update the backing matrix — gt_update_backingfile","text":"","code":"gt_update_backingfile(   .x,   backingfile = NULL,   chunk_size = NULL,   rm_unsorted_dist = TRUE,   quiet = FALSE )"},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/gt_update_backingfile.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update the backing matrix — gt_update_backingfile","text":".x gen_tibble object backingfile path, including file name without extension, backing files used store data (given .bk .RDS automatically). left NULL (default), file name based name f current backing file. chunk_size number loci process rm_unsorted_dist boolean set genetic_dist zero (.e. remove ) unsorted within chromosomes. quiet boolean suppress information files","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/gt_update_backingfile.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Update the backing matrix — gt_update_backingfile","text":"gen_tibble backing file (.e. new File Backed Matrix)","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/gt_update_backingfile.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Update the backing matrix — gt_update_backingfile","text":"function check whether positions genetic loci sorted. check , update file backing matrix, use gt_order_loci().","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/gt_update_backingfile.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Update the backing matrix — gt_update_backingfile","text":"","code":"example_gt <- load_example_gt(\"gen_tbl\")  example_gt %>% gt_update_backingfile() #> Genetic distances are not sorted, setting them to zero #>  #> gen_backing files updated, now #> using FBM RDS: /tmp/RtmpblzTyA/file239736fd4f23_v2.rds #> with FBM backing file: /tmp/RtmpblzTyA/file239736fd4f23_v2.bk #> make sure that you do NOT delete those files! #> # A gen_tibble: 6 loci #> # A tibble:     7 × 3 #>   id    population  genotypes #>   <chr> <chr>      <vctr_SNP> #> 1 a     pop1        [1,1,...] #> 2 b     pop1        [2,1,...] #> 3 c     pop2        [2,.,...] #> 4 d     pop2        [1,0,...] #> 5 e     pop1        [1,2,...] #> 6 f     pop3        [0,0,...] #> 7 g     pop3        [0,1,...]"},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/gt_uses_imputed.html","id":null,"dir":"Reference","previous_headings":"","what":"Checks if a gen_tibble uses imputed data — gt_uses_imputed","title":"Checks if a gen_tibble uses imputed data — gt_uses_imputed","text":"function checks dataset uses imputed data. Note possible dataset imputed currently using imputation.","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/gt_uses_imputed.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Checks if a gen_tibble uses imputed data — gt_uses_imputed","text":"","code":"gt_uses_imputed(x)"},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/gt_uses_imputed.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Checks if a gen_tibble uses imputed data — gt_uses_imputed","text":"x gen_tibble","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/gt_uses_imputed.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Checks if a gen_tibble uses imputed data — gt_uses_imputed","text":"boolean TRUE FALSE depending whether dataset using imputed values","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/gt_uses_imputed.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Checks if a gen_tibble uses imputed data — gt_uses_imputed","text":"","code":"example_gt <- load_example_gt(\"gen_tbl\")  # Impute the gen_tibble example_gt <- example_gt %>% gt_impute_simple()  # Check whether the gen_tibble uses imputed values example_gt %>% gt_uses_imputed() #> [1] FALSE"},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/indiv_het_obs.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate individual observed heterozygosity — indiv_het_obs","title":"Estimate individual observed heterozygosity — indiv_het_obs","text":"Estimate observed heterozygosity (H_obs) individual (.e. frequency loci heterozygous individual).","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/indiv_het_obs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate individual observed heterozygosity — indiv_het_obs","text":"","code":"indiv_het_obs(.x, as_counts = FALSE, ...)  # S3 method for class 'tbl_df' indiv_het_obs(.x, as_counts = FALSE, ...)  # S3 method for class 'vctrs_bigSNP' indiv_het_obs(.x, as_counts = FALSE, ...)"},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/indiv_het_obs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate individual observed heterozygosity — indiv_het_obs","text":".x vector class vctrs_bigSNP (usually genotype column gen_tibble object), gen_tibble. as_counts logical, TRUE, return matrix two columns: number heterozygotes number missing values individual. quantities can useful compute complex quantities. ... currently unused.","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/indiv_het_obs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate individual observed heterozygosity — indiv_het_obs","text":"either: vector heterozygosities, one per individuals gen_tibble matrix two columns, first number heterozygous loci individual second number missing values individual","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/indiv_het_obs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimate individual observed heterozygosity — indiv_het_obs","text":"","code":"example_gt <- load_example_gt(\"gen_tbl\")  example_gt %>% indiv_het_obs() #> [1] 0.6666667 0.2000000 0.4000000 0.3333333 0.5000000 0.2000000 0.6000000  # For observed heterozygosity as counts: example_gt %>% indiv_het_obs(as_counts = TRUE) #>      het_n na_n #> [1,]     4    0 #> [2,]     1    1 #> [3,]     2    1 #> [4,]     2    0 #> [5,]     3    0 #> [6,]     1    1 #> [7,]     3    1"},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/indiv_inbreeding.html","id":null,"dir":"Reference","previous_headings":"","what":"Individual inbreeding coefficient — indiv_inbreeding","title":"Individual inbreeding coefficient — indiv_inbreeding","text":"function calculates inbreeding coefficient individual based beta estimate Weir Goudet (2017).","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/indiv_inbreeding.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Individual inbreeding coefficient — indiv_inbreeding","text":"","code":"indiv_inbreeding(.x, method = c(\"WG17\"), allele_sharing_mat = NULL, ...)  # S3 method for class 'tbl_df' indiv_inbreeding(.x, method = c(\"WG17\"), allele_sharing_mat = NULL, ...)  # S3 method for class 'vctrs_bigSNP' indiv_inbreeding(.x, method = c(\"WG17\"), allele_sharing_mat = NULL, ...)  # S3 method for class 'grouped_df' indiv_inbreeding(.x, method = c(\"WG17\"), allele_sharing_mat = NULL, ...)"},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/indiv_inbreeding.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Individual inbreeding coefficient — indiv_inbreeding","text":".x vector class vctrs_bigSNP (usually genotype column gen_tibble object), gen_tibble. method currently \"WG17\" (Weir Goudet 2017). allele_sharing_mat optional relevant \"WG17\", matrix Allele Sharing returned pairwise_allele_sharing() as_matrix=TRUE. number statistics can derived Allele Sharing matrix, sometimes efficient pre-compute matrix. possible use grouped tibbles. ... currently unused.","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/indiv_inbreeding.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Individual inbreeding coefficient — indiv_inbreeding","text":"numeric vector inbreeding coefficients.","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/indiv_inbreeding.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Individual inbreeding coefficient — indiv_inbreeding","text":"Weir, BS Goudet J (2017) Unified Characterization Population Structure Relatedness. Genetics (2017) 206:2085","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/indiv_inbreeding.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Individual inbreeding coefficient — indiv_inbreeding","text":"","code":"example_gt <- load_example_gt(\"gen_tbl\")  example_gt %>% indiv_inbreeding(method = \"WG17\") #>           a           b           c           d           e           f  #> -0.60305344  0.51908397  0.03816794  0.19847328 -0.20229008  0.51908397  #>           g  #> -0.44274809"},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/indiv_missingness.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate individual missingness — indiv_missingness","title":"Estimate individual missingness — indiv_missingness","text":"Estimate missingness individual (.e. frequency missing genotypes individual).","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/indiv_missingness.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate individual missingness — indiv_missingness","text":"","code":"indiv_missingness(.x, as_counts, block_size, ...)  # S3 method for class 'tbl_df' indiv_missingness(   .x,   as_counts = FALSE,   block_size = bigstatsr::block_size(nrow(.x), 1),   ... )  # S3 method for class 'vctrs_bigSNP' indiv_missingness(   .x,   as_counts = FALSE,   block_size = bigstatsr::block_size(length(.x), 1),   ... )"},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/indiv_missingness.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate individual missingness — indiv_missingness","text":".x vector class vctrs_bigSNP (usually genotype column gen_tibble object), gen_tibble. as_counts boolean defining whether count NAs (rather rate) returned. defaults FALSE (.e. rates returned default). block_size maximum number loci read . ... currently unused.","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/indiv_missingness.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate individual missingness — indiv_missingness","text":"vector missingness, one per individuals gen_tibble","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/indiv_missingness.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimate individual missingness — indiv_missingness","text":"","code":"example_gt <- load_example_gt(\"gen_tbl\")  example_gt %>% indiv_missingness() #> [1] 0.0000000 0.1666667 0.1666667 0.0000000 0.0000000 0.1666667 0.1666667  # For missingness as counts: example_gt %>% indiv_missingness(as_counts = TRUE) #> [1] 0 1 1 0 0 1 1"},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/indiv_ploidy.html","id":null,"dir":"Reference","previous_headings":"","what":"Return individual ploidy — indiv_ploidy","title":"Return individual ploidy — indiv_ploidy","text":"Returns ploidy individual.","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/indiv_ploidy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return individual ploidy — indiv_ploidy","text":"","code":"indiv_ploidy(.x, ...)  # S3 method for class 'tbl_df' indiv_ploidy(.x, ...)  # S3 method for class 'vctrs_bigSNP' indiv_ploidy(.x, ...)"},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/indiv_ploidy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Return individual ploidy — indiv_ploidy","text":".x gen_tibble, vector class vctrs_bigSNP (usually genotype column gen_tibble object) ... currently unused.","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/indiv_ploidy.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Return individual ploidy — indiv_ploidy","text":"vector ploidy, one per individuals gen_tibble","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/indiv_ploidy.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Return individual ploidy — indiv_ploidy","text":"","code":"example_gt <- load_example_gt(\"gen_tbl\")  example_gt %>% indiv_ploidy() #> [1] 2 2 2 2 2 2 2"},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/is_loci_table_ordered.html","id":null,"dir":"Reference","previous_headings":"","what":"Test if the loci table is ordered — is_loci_table_ordered","title":"Test if the loci table is ordered — is_loci_table_ordered","text":"functions checks SNPs chromosome adjacent loci table, positions sorted within chromosomes.","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/is_loci_table_ordered.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test if the loci table is ordered — is_loci_table_ordered","text":"","code":"is_loci_table_ordered(   .x,   error_on_false = FALSE,   ignore_genetic_dist = TRUE,   ... )  # S3 method for class 'tbl_df' is_loci_table_ordered(   .x,   error_on_false = FALSE,   ignore_genetic_dist = TRUE,   ... )  # S3 method for class 'vctrs_bigSNP' is_loci_table_ordered(   .x,   error_on_false = FALSE,   ignore_genetic_dist = TRUE,   ... )"},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/is_loci_table_ordered.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test if the loci table is ordered — is_loci_table_ordered","text":".x vector class vctrs_bigSNP (usually genotype column gen_tibble object), gen_tibble. error_on_false logical, TRUE error thrown loci ordered. ignore_genetic_dist logical, TRUE physical position checked. ... arguments passed specific methods.","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/is_loci_table_ordered.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test if the loci table is ordered — is_loci_table_ordered","text":"logical vector defining loci transversions","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/is_loci_table_ordered.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Test if the loci table is ordered — is_loci_table_ordered","text":"","code":"example_gt <- load_example_gt(\"gen_tbl\")  example_gt %>% is_loci_table_ordered() #> [1] TRUE"},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/load_example_gt.html","id":null,"dir":"Reference","previous_headings":"","what":"Load example gen_tibble — load_example_gt","title":"Load example gen_tibble — load_example_gt","text":"function creates gen_tibble object use examples documentation.","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/load_example_gt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Load example gen_tibble — load_example_gt","text":"","code":"load_example_gt(   type = c(\"gen_tbl\", \"grouped_gen_tbl\", \"grouped_gen_tbl_sf\", \"gen_tbl_sf\") )"},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/load_example_gt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Load example gen_tibble — load_example_gt","text":"type character string indicating type gen_tibble create: \"gen_tbl\": basic gen_tibble genotype data metadata \"grouped_gen_tbl\": \"gen_tbl\" grouped population \"grouped_gen_tbl_sf\": adds spatial features (longitude/latitude) groups population \"gen_tbl_sf\": adds spatial features without grouping","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/load_example_gt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Load example gen_tibble — load_example_gt","text":"example object class gen_tbl.","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/load_example_gt.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Load example gen_tibble — load_example_gt","text":"","code":"# This function creates an example gen_tibble object example_gt <- load_example_gt(\"gen_tbl\")"},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/loci_alt_freq.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate allele frequencies at each locus — loci_alt_freq","title":"Estimate allele frequencies at each locus — loci_alt_freq","text":"Allele frequencies can estimates minimum allele frequencies (MAF) loci_maf() frequency alternate allele (loci_alt_freq()). latter line genotypes matrix (e.g. extracted show_loci()). users interested MAF, raw frequencies might useful computing aggregated statistics. loci_maf() loci_alt_freq() efficient methods support grouped gen_tibble objects. can return tidied tibble, list, matrix.","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/loci_alt_freq.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate allele frequencies at each locus — loci_alt_freq","text":"","code":"loci_alt_freq(   .x,   .col = \"genotypes\",   as_counts = FALSE,   n_cores,   block_size,   type,   ... )  # S3 method for class 'tbl_df' loci_alt_freq(   .x,   .col = \"genotypes\",   as_counts = FALSE,   n_cores = bigstatsr::nb_cores(),   block_size = bigstatsr::block_size(nrow(.x), 1),   ... )  # S3 method for class 'vctrs_bigSNP' loci_alt_freq(   .x,   .col = \"genotypes\",   as_counts = FALSE,   n_cores = bigstatsr::nb_cores(),   block_size = bigstatsr::block_size(length(.x), 1),   ... )  # S3 method for class 'grouped_df' loci_alt_freq(   .x,   .col = \"genotypes\",   as_counts = FALSE,   n_cores = bigstatsr::nb_cores(),   block_size = bigstatsr::block_size(nrow(.x), 1),   type = c(\"tidy\", \"list\", \"matrix\"),   ... )  loci_maf(.x, .col = \"genotypes\", n_cores, block_size, type, ...)  # S3 method for class 'tbl_df' loci_maf(   .x,   .col = \"genotypes\",   n_cores = bigstatsr::nb_cores(),   block_size = bigstatsr::block_size(nrow(.x), 1),   ... )  # S3 method for class 'vctrs_bigSNP' loci_maf(   .x,   .col = \"genotypes\",   n_cores = bigstatsr::nb_cores(),   block_size = bigstatsr::block_size(length(.x), 1),   ... )  # S3 method for class 'grouped_df' loci_maf(   .x,   .col = \"genotypes\",   n_cores = bigstatsr::nb_cores(),   block_size = bigstatsr::block_size(nrow(.x), 1),   type = c(\"tidy\", \"list\", \"matrix\"),   ... )"},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/loci_alt_freq.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate allele frequencies at each locus — loci_alt_freq","text":".x vector class vctrs_bigSNP (usually genotypes column gen_tibble object), gen_tibble. .col column used tibble (grouped tibble passed directly function). defaults \"genotypes\" can take value. need user set , included resolve certain tidyselect operations. as_counts boolean defining whether count alternate valid (.e. total number) alleles (rather frequencies) returned. defaults FALSE (.e. frequencies returned default). n_cores number cores used, defaults bigstatsr::nb_cores() block_size maximum number loci read . type type object return, using grouped method. One \"tidy\", \"list\", \"matrix\". Default \"tidy\". ... arguments passed specific methods, currently unused.","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/loci_alt_freq.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate allele frequencies at each locus — loci_alt_freq","text":"vector frequencies, one per locus, as_counts = FALSE; else matrix two columns, count alternate alleles count valid alleles (.e. sum alternate reference)","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/loci_alt_freq.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimate allele frequencies at each locus — loci_alt_freq","text":"","code":"example_gt <- load_example_gt(\"gen_tbl\")  # For alternate allele frequency example_gt %>% loci_alt_freq() #> [1] 0.50000000 0.41666667 0.07142857 0.25000000 0.41666667 0.25000000  # For alternate allele frequency per locus per population example_gt %>%   group_by(population) %>%   loci_alt_freq() #> # A tibble: 18 × 3 #>    loci  group value #>    <chr> <chr> <dbl> #>  1 rs1   pop1  0.667 #>  2 rs1   pop2  0.75  #>  3 rs1   pop3  0     #>  4 rs2   pop1  0.667 #>  5 rs2   pop2  0     #>  6 rs2   pop3  0.25  #>  7 rs3   pop1  0     #>  8 rs3   pop2  0     #>  9 rs3   pop3  0.25  #> 10 rs4   pop1  0.5   #> 11 rs4   pop2  0.25  #> 12 rs4   pop3  0     #> 13 rs5   pop1  0.5   #> 14 rs5   pop2  0.25  #> 15 rs5   pop3  0.5   #> 16 rs6   pop1  0.167 #> 17 rs6   pop2  0.25  #> 18 rs6   pop3  0.5   # alternatively, return a list of populations with their frequencies example_gt %>%   group_by(population) %>%   loci_alt_freq(type = \"list\") #> [[1]] #> [1] 0.6666667 0.6666667 0.0000000 0.5000000 0.5000000 0.1666667 #>  #> [[2]] #> [1] 0.75 0.00 0.00 0.25 0.25 0.25 #>  #> [[3]] #> [1] 0.00 0.25 0.25 0.00 0.50 0.50 #>  # or a matrix with populations in columns and loci in rows example_gt %>%   group_by(population) %>%   loci_alt_freq(type = \"matrix\") #>          pop1 pop2 pop3 #> rs1 0.6666667 0.75 0.00 #> rs2 0.6666667 0.00 0.25 #> rs3 0.0000000 0.00 0.25 #> rs4 0.5000000 0.25 0.00 #> rs5 0.5000000 0.25 0.50 #> rs6 0.1666667 0.25 0.50 # or within reframe (not recommended, as it much less efficient # than using it directly as shown above) library(dplyr) example_gt %>%   group_by(population) %>%   reframe(alt_freq = loci_alt_freq(genotypes)) #> # A tibble: 18 × 2 #>    population alt_freq #>    <chr>         <dbl> #>  1 pop1          0.667 #>  2 pop1          0.667 #>  3 pop1          0     #>  4 pop1          0.5   #>  5 pop1          0.5   #>  6 pop1          0.167 #>  7 pop2          0.75  #>  8 pop2          0     #>  9 pop2          0     #> 10 pop2          0.25  #> 11 pop2          0.25  #> 12 pop2          0.25  #> 13 pop3          0     #> 14 pop3          0.25  #> 15 pop3          0.25  #> 16 pop3          0     #> 17 pop3          0.5   #> 18 pop3          0.5   # For MAF example_gt %>% loci_maf() #> [1] 0.50000000 0.41666667 0.07142857 0.25000000 0.41666667 0.25000000  # For minor allele frequency per locus per population example_gt %>%   group_by(population) %>%   loci_maf() #> # A tibble: 18 × 3 #>    loci  group value #>    <chr> <chr> <dbl> #>  1 rs1   pop1  0.333 #>  2 rs1   pop2  0.25  #>  3 rs1   pop3  0     #>  4 rs2   pop1  0.333 #>  5 rs2   pop2  0     #>  6 rs2   pop3  0.25  #>  7 rs3   pop1  0     #>  8 rs3   pop2  0     #>  9 rs3   pop3  0.25  #> 10 rs4   pop1  0.5   #> 11 rs4   pop2  0.25  #> 12 rs4   pop3  0     #> 13 rs5   pop1  0.5   #> 14 rs5   pop2  0.25  #> 15 rs5   pop3  0.5   #> 16 rs6   pop1  0.167 #> 17 rs6   pop2  0.25  #> 18 rs6   pop3  0.5   # alternatively, return a list of populations with their frequencies example_gt %>%   group_by(population) %>%   loci_maf(type = \"list\") #> [[1]] #> [1] 0.3333333 0.3333333 0.0000000 0.5000000 0.5000000 0.1666667 #>  #> [[2]] #> [1] 0.25 0.00 0.00 0.25 0.25 0.25 #>  #> [[3]] #> [1] 0.00 0.25 0.25 0.00 0.50 0.50 #>  # or a matrix with populations in columns and loci in rows example_gt %>%   group_by(population) %>%   loci_maf(type = \"matrix\") #>          pop1 pop2 pop3 #> rs1 0.3333333 0.25 0.00 #> rs2 0.3333333 0.00 0.25 #> rs3 0.0000000 0.00 0.25 #> rs4 0.5000000 0.25 0.00 #> rs5 0.5000000 0.25 0.50 #> rs6 0.1666667 0.25 0.50"},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/loci_chromosomes.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the chromosomes of loci in a gen_tibble — loci_chromosomes","title":"Get the chromosomes of loci in a gen_tibble — loci_chromosomes","text":"Extract loci chromosomes gen_tibble (directly genotype column).","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/loci_chromosomes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the chromosomes of loci in a gen_tibble — loci_chromosomes","text":"","code":"loci_chromosomes(.x, .col = \"genotypes\", ...)  # S3 method for class 'tbl_df' loci_chromosomes(.x, .col = \"genotypes\", ...)  # S3 method for class 'vctrs_bigSNP' loci_chromosomes(.x, .col = \"genotypes\", ...)"},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/loci_chromosomes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the chromosomes of loci in a gen_tibble — loci_chromosomes","text":".x gen_tibble, vector class vctrs_bigSNP (usually genotype column gen_tibble object). .col column used tibble (grouped tibble passed directly function). defaults \"genotypes\" can take value. need user set , included resolve certain tidyselect operations. ... currently unused.","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/loci_chromosomes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the chromosomes of loci in a gen_tibble — loci_chromosomes","text":"character vector chromosomes","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/loci_chromosomes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the chromosomes of loci in a gen_tibble — loci_chromosomes","text":"","code":"example_gt <- load_example_gt(\"gen_tbl\") example_gt %>% loci_chromosomes() #> [1] chr1 chr1 chr1 chr1 chr2 chr2 #> Levels: chr1 chr2"},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/loci_hwe.html","id":null,"dir":"Reference","previous_headings":"","what":"Test Hardy-Weinberg equilibrium at each locus — loci_hwe","title":"Test Hardy-Weinberg equilibrium at each locus — loci_hwe","text":"Return p-value exact test HWE.","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/loci_hwe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test Hardy-Weinberg equilibrium at each locus — loci_hwe","text":"","code":"loci_hwe(.x, .col = \"genotypes\", ...)  # S3 method for class 'tbl_df' loci_hwe(.x, .col = \"genotypes\", mid_p = TRUE, ...)  # S3 method for class 'vctrs_bigSNP' loci_hwe(.x, .col = \"genotypes\", mid_p = TRUE, ...)  # S3 method for class 'grouped_df' loci_hwe(   .x,   .col = \"genotypes\",   mid_p = TRUE,   n_cores = bigstatsr::nb_cores(),   block_size = bigstatsr::block_size(nrow(.x), 1),   type = c(\"tidy\", \"list\", \"matrix\"),   ... )"},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/loci_hwe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test Hardy-Weinberg equilibrium at each locus — loci_hwe","text":".x vector class vctrs_bigSNP (usually genotypes column gen_tibble object), gen_tibble. .col column used tibble (grouped tibble passed directly function). defaults \"genotypes\" can take value. need user set , included resolve certain tidyselect operations. ... used. mid_p boolean whether mid-p value computed. Default TRUE, PLINK. n_cores number cores used, defaults bigstatsr::nb_cores() block_size maximum number loci read . type type object return, using grouped method. One \"tidy\", \"list\", \"matrix\". Default \"tidy\".","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/loci_hwe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test Hardy-Weinberg equilibrium at each locus — loci_hwe","text":"vector probabilities HWE exact test, one per locus","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/loci_hwe.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Test Hardy-Weinberg equilibrium at each locus — loci_hwe","text":"function uses original C++ algorithm PLINK 1.90.","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/loci_hwe.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Test Hardy-Weinberg equilibrium at each locus — loci_hwe","text":"C++ algorithm written Christopher Chang PLINK 1.90, based original code Jan Wigginton (code released GPL3).","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/loci_hwe.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Test Hardy-Weinberg equilibrium at each locus — loci_hwe","text":"","code":"example_gt <- load_example_gt(\"gen_tbl\")  # For HWE example_gt %>% loci_hwe() #> [1] 0.7552448 0.6969697 0.5000000 0.6363636 0.6969697 0.6363636  # For loci_hwe per locus per population, use reframe example_gt %>%   group_by(population) %>%   reframe(loci_hwe = loci_hwe(genotypes)) #> # A tibble: 18 × 2 #>    population loci_hwe #>    <chr>         <dbl> #>  1 pop1          0.6   #>  2 pop1          0.6   #>  3 pop1          0.5   #>  4 pop1          0.667 #>  5 pop1          0.7   #>  6 pop1          0.5   #>  7 pop2          0.5   #>  8 pop2          0.5   #>  9 pop2          0.5   #> 10 pop2          0.5   #> 11 pop2          0.5   #> 12 pop2          0.5   #> 13 pop3          0.5   #> 14 pop3          0.5   #> 15 pop3          0.5   #> 16 pop3          0.5   #> 17 pop3          0.5   #> 18 pop3          0.5"},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/loci_ld_clump.html","id":null,"dir":"Reference","previous_headings":"","what":"Clump loci based on a Linkage Disequilibrium threshold — loci_ld_clump","title":"Clump loci based on a Linkage Disequilibrium threshold — loci_ld_clump","text":"function uses clumping remove SNPs high LD. used default options, clumping based MAF similar standard pruning (done PLINK \"–indep-pairwise (size+1) 1 thr.r2\", results better spread SNPs chromosome. function wrapper around bigsnpr::snp_clumping(). See https://privefl.github.io/bigsnpr/articles/pruning-vs-clumping.html information differences pruning clumping.","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/loci_ld_clump.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Clump loci based on a Linkage Disequilibrium threshold — loci_ld_clump","text":"","code":"loci_ld_clump(.x, .col = \"genotypes\", ...)  # S3 method for class 'tbl_df' loci_ld_clump(.x, .col = \"genotypes\", ...)  # S3 method for class 'vctrs_bigSNP' loci_ld_clump(   .x,   .col = \"genotypes\",   S = NULL,   thr_r2 = 0.2,   size = 100/thr_r2,   exclude = NULL,   use_positions = TRUE,   n_cores = 1,   return_id = FALSE,   ... )"},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/loci_ld_clump.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Clump loci based on a Linkage Disequilibrium threshold — loci_ld_clump","text":".x gen_tibble object .col column used tibble (grouped tibble passed directly function). defaults \"genotypes\" can take value. need user set , included resolve certain tidyselect operations. ... currently used. S vector loci statistics express importance SNP (important SNP, greater corresponding statistic). example, S follows standard normal distribution, \"important\" means significantly different 0, must use abs(S) instead.specified, MAFs computed used. thr_r2 Threshold squared correlation two SNPs. Default 0.2. size one SNP, window size around SNP compute correlations. Default 100 / thr_r2 clumping (0.2 -> 500; 0.1 -> 1000; 0.5 -> 200). use_positions = FALSE, window number SNPs, otherwise window kb (genetic distance). Ideally, use positions, provide sensible approach. exclude Vector SNP indices exclude anyway. example, can used exclude long-range LD regions (see Price2008). Another use can thresholding respect p-values associated S. use_positions boolean, TRUE (default), size kb, FALSE size number SNPs. n_cores number cores used return_id boolean whether id SNPs keep returned. defaults FALSE, returns vector booleans (TRUE FALSE)","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/loci_ld_clump.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Clump loci based on a Linkage Disequilibrium threshold — loci_ld_clump","text":"boolean vector indicating whether SNP kept ('return_id = FALSE', default), else vector SNP indices kept ('return_id = TRUE')","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/loci_ld_clump.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Clump loci based on a Linkage Disequilibrium threshold — loci_ld_clump","text":"missing values genotypes gen_tibble passed loci_ld_clump cause error. deal missingness, see gt_impute_simple().","code":""},{"path":[]},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/loci_ld_clump.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Clump loci based on a Linkage Disequilibrium threshold — loci_ld_clump","text":"","code":"example_gt <- load_example_gt(\"gen_tbl\") %>% gt_impute_simple()  # To return a boolean vector indicating whether the SNP should be kept example_gt %>% loci_ld_clump() #> [1]  TRUE  TRUE FALSE  TRUE  TRUE FALSE # To return a vector of SNP indices to be kept example_gt %>% loci_ld_clump(return_id = TRUE) #> [1] 1 2 4 5"},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/loci_missingness.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate missingness at each locus — loci_missingness","title":"Estimate missingness at each locus — loci_missingness","text":"Estimate rate missingness locus. function efficient method support grouped gen_tibble objects, can return tidied tibble, list, matrix.","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/loci_missingness.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate missingness at each locus — loci_missingness","text":"","code":"loci_missingness(   .x,   .col = \"genotypes\",   as_counts = FALSE,   n_cores = bigstatsr::nb_cores(),   block_size,   type,   ... )  # S3 method for class 'tbl_df' loci_missingness(   .x,   .col = \"genotypes\",   as_counts = FALSE,   n_cores = bigstatsr::nb_cores(),   block_size = bigstatsr::block_size(nrow(.x), 1),   ... )  # S3 method for class 'vctrs_bigSNP' loci_missingness(   .x,   .col = \"genotypes\",   as_counts = FALSE,   n_cores = bigstatsr::nb_cores(),   block_size = bigstatsr::block_size(length(.x), 1),   ... )  # S3 method for class 'grouped_df' loci_missingness(   .x,   .col = \"genotypes\",   as_counts = FALSE,   n_cores = bigstatsr::nb_cores(),   block_size = bigstatsr::block_size(nrow(.x), 1),   type = c(\"tidy\", \"list\", \"matrix\"),   ... )"},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/loci_missingness.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate missingness at each locus — loci_missingness","text":".x vector class vctrs_bigSNP (usually genotypes column gen_tibble object), gen_tibble. .col column used tibble (grouped tibble passed directly function). defaults \"genotypes\" can take value. need user set , included resolve certain tidyselect operations. as_counts boolean defining whether count NAs (rather rate) returned. defaults FALSE (.e. rates returned default). n_cores number cores used, defaults bigstatsr::nb_cores() block_size maximum number loci read . type type object return, using grouped method. One \"tidy\", \"list\", \"matrix\". Default \"tidy\". ... arguments passed specific methods.","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/loci_missingness.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate missingness at each locus — loci_missingness","text":"vector frequencies, one per locus","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/loci_missingness.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimate missingness at each locus — loci_missingness","text":"","code":"example_gt <- load_example_gt(\"gen_tbl\")  # For missingness example_gt %>% loci_missingness() #> [1] 0.0000000 0.1428571 0.0000000 0.1428571 0.1428571 0.1428571  # For missingness per locus per population example_gt %>%   group_by(population) %>%   loci_missingness() #> # A tibble: 18 × 3 #>    loci  group value #>    <chr> <chr> <dbl> #>  1 rs1   pop1  0     #>  2 rs1   pop2  0     #>  3 rs1   pop3  0     #>  4 rs2   pop1  0     #>  5 rs2   pop2  0.5   #>  6 rs2   pop3  0     #>  7 rs3   pop1  0     #>  8 rs3   pop2  0     #>  9 rs3   pop3  0     #> 10 rs4   pop1  0.333 #> 11 rs4   pop2  0     #> 12 rs4   pop3  0     #> 13 rs5   pop1  0     #> 14 rs5   pop2  0     #> 15 rs5   pop3  0.5   #> 16 rs6   pop1  0     #> 17 rs6   pop2  0     #> 18 rs6   pop3  0.5   # alternatively, return a list of populations with their missingness example_gt %>%   group_by(population) %>%   loci_missingness(type = \"list\") #> [[1]] #> [1] 0.0000000 0.0000000 0.0000000 0.3333333 0.0000000 0.0000000 #>  #> [[2]] #> [1] 0.0 0.5 0.0 0.0 0.0 0.0 #>  #> [[3]] #> [1] 0.0 0.0 0.0 0.0 0.5 0.5 #>  # or a matrix with populations in columns and loci in rows example_gt %>%   group_by(population) %>%   loci_missingness(type = \"matrix\") #>          pop1 pop2 pop3 #> rs1 0.0000000  0.0  0.0 #> rs2 0.0000000  0.5  0.0 #> rs3 0.0000000  0.0  0.0 #> rs4 0.3333333  0.0  0.0 #> rs5 0.0000000  0.0  0.5 #> rs6 0.0000000  0.0  0.5 # or within reframe (not recommended, as it much less efficient # than using it directly as shown above) example_gt %>%   group_by(population) %>%   reframe(missing = loci_missingness(genotypes)) #> # A tibble: 18 × 2 #>    population missing #>    <chr>        <dbl> #>  1 pop1         0     #>  2 pop1         0     #>  3 pop1         0     #>  4 pop1         0.333 #>  5 pop1         0     #>  6 pop1         0     #>  7 pop2         0     #>  8 pop2         0.5   #>  9 pop2         0     #> 10 pop2         0     #> 11 pop2         0     #> 12 pop2         0     #> 13 pop3         0     #> 14 pop3         0     #> 15 pop3         0     #> 16 pop3         0     #> 17 pop3         0.5   #> 18 pop3         0.5"},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/loci_names.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the names of loci in a gen_tibble — loci_names","title":"Get the names of loci in a gen_tibble — loci_names","text":"Extract loci names  gen_tibble (directly genotype column).","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/loci_names.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the names of loci in a gen_tibble — loci_names","text":"","code":"loci_names(.x, .col = \"genotypes\", ...)  # S3 method for class 'tbl_df' loci_names(.x, .col = \"genotypes\", ...)  # S3 method for class 'vctrs_bigSNP' loci_names(.x, .col = \"genotypes\", ...)"},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/loci_names.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the names of loci in a gen_tibble — loci_names","text":".x vector class vctrs_bigSNP (usually genotype column gen_tibble object), gen_tibble. .col column used tibble (grouped tibble passed directly function). defaults \"genotypes\" can take value. need user set , included resolve certain tidyselect operations. ... currently unused.","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/loci_names.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the names of loci in a gen_tibble — loci_names","text":"character vector names","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/loci_names.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the names of loci in a gen_tibble — loci_names","text":"","code":"example_gt <- load_example_gt(\"gen_tbl\") example_gt %>% loci_names() #> [1] \"rs1\" \"rs2\" \"rs3\" \"rs4\" \"rs5\" \"rs6\""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/loci_pi.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate nucleotide diversity (pi) at each locus — loci_pi","title":"Estimate nucleotide diversity (pi) at each locus — loci_pi","text":"Estimate nucleotide diversity (pi) locus, accounting missing values. uses formula: c_0 * c_1 / (n * (n-1) / 2)","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/loci_pi.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate nucleotide diversity (pi) at each locus — loci_pi","text":"","code":"loci_pi(.x, .col = \"genotypes\", n_cores, block_size, type, ...)  # S3 method for class 'tbl_df' loci_pi(   .x,   .col = \"genotypes\",   n_cores = bigstatsr::nb_cores(),   block_size = bigstatsr::block_size(nrow(.x), 1),   ... )  # S3 method for class 'vctrs_bigSNP' loci_pi(   .x,   .col = \"genotypes\",   n_cores = bigstatsr::nb_cores(),   block_size = bigstatsr::block_size(length(.x), 1),   ... )  # S3 method for class 'grouped_df' loci_pi(   .x,   .col = \"genotypes\",   n_cores = bigstatsr::nb_cores(),   block_size = bigstatsr::block_size(nrow(.x), 1),   type = c(\"tidy\", \"list\", \"matrix\"),   ... )"},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/loci_pi.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate nucleotide diversity (pi) at each locus — loci_pi","text":".x vector class vctrs_bigSNP (usually genotypes column gen_tibble object), gen_tibble. .col column used tibble (grouped tibble passed directly function). defaults \"genotypes\" can take value. need user set , included resolve certain tidyselect operations. n_cores number cores used, defaults bigstatsr::nb_cores() block_size maximum number loci read . type type object return, using grouped method. One \"tidy\", \"list\", \"matrix\". Default \"tidy\". ... arguments passed specific methods, currently unused.","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/loci_pi.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate nucleotide diversity (pi) at each locus — loci_pi","text":"vector frequencies, one per locus","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/loci_pi.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimate nucleotide diversity (pi) at each locus — loci_pi","text":"","code":"example_gt <- load_example_gt(\"grouped_gen_tbl\")  # For pi example_gt %>% loci_pi() #> # A tibble: 18 × 3 #>    loci  group value #>    <chr> <chr> <dbl> #>  1 rs1   pop1  0.533 #>  2 rs1   pop2  0.5   #>  3 rs1   pop3  0     #>  4 rs2   pop1  0.533 #>  5 rs2   pop2  0     #>  6 rs2   pop3  0.5   #>  7 rs3   pop1  0     #>  8 rs3   pop2  0     #>  9 rs3   pop3  0.5   #> 10 rs4   pop1  0.667 #> 11 rs4   pop2  0.5   #> 12 rs4   pop3  0     #> 13 rs5   pop1  0.6   #> 14 rs5   pop2  0.5   #> 15 rs5   pop3  1     #> 16 rs6   pop1  0.333 #> 17 rs6   pop2  0.5   #> 18 rs6   pop3  1      # For pi per locus per population example_gt %>%   group_by(population) %>%   loci_pi() #> # A tibble: 18 × 3 #>    loci  group value #>    <chr> <chr> <dbl> #>  1 rs1   pop1  0.533 #>  2 rs1   pop2  0.5   #>  3 rs1   pop3  0     #>  4 rs2   pop1  0.533 #>  5 rs2   pop2  0     #>  6 rs2   pop3  0.5   #>  7 rs3   pop1  0     #>  8 rs3   pop2  0     #>  9 rs3   pop3  0.5   #> 10 rs4   pop1  0.667 #> 11 rs4   pop2  0.5   #> 12 rs4   pop3  0     #> 13 rs5   pop1  0.6   #> 14 rs5   pop2  0.5   #> 15 rs5   pop3  1     #> 16 rs6   pop1  0.333 #> 17 rs6   pop2  0.5   #> 18 rs6   pop3  1     # alternatively, return a list of populations with their pi example_gt %>%   group_by(population) %>%   loci_pi(type = \"list\") #> [[1]] #> [1] 0.5333333 0.5333333 0.0000000 0.6666667 0.6000000 0.3333333 #>  #> [[2]] #> [1] 0.5 0.0 0.0 0.5 0.5 0.5 #>  #> [[3]] #> [1] 0.0 0.5 0.5 0.0 1.0 1.0 #>  # or a matrix with populations in columns and loci in rows example_gt %>%   group_by(population) %>%   loci_pi(type = \"matrix\") #>          pop1 pop2 pop3 #> rs1 0.5333333  0.5  0.0 #> rs2 0.5333333  0.0  0.5 #> rs3 0.0000000  0.0  0.5 #> rs4 0.6666667  0.5  0.0 #> rs5 0.6000000  0.5  1.0 #> rs6 0.3333333  0.5  1.0 # or within reframe (not recommended, as it much less efficient # than using it directly as shown above) example_gt %>%   group_by(population) %>%   reframe(pi = loci_pi(genotypes)) #> # A tibble: 18 × 2 #>    population    pi #>    <chr>      <dbl> #>  1 pop1       0.533 #>  2 pop1       0.533 #>  3 pop1       0     #>  4 pop1       0.667 #>  5 pop1       0.6   #>  6 pop1       0.333 #>  7 pop2       0.5   #>  8 pop2       0     #>  9 pop2       0     #> 10 pop2       0.5   #> 11 pop2       0.5   #> 12 pop2       0.5   #> 13 pop3       0     #> 14 pop3       0.5   #> 15 pop3       0.5   #> 16 pop3       0     #> 17 pop3       1     #> 18 pop3       1"},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/loci_transitions.html","id":null,"dir":"Reference","previous_headings":"","what":"Find transitions — loci_transitions","title":"Find transitions — loci_transitions","text":"Use loci table define loci transitions","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/loci_transitions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find transitions — loci_transitions","text":"","code":"loci_transitions(.x, .col = \"genotypes\", ...)  # S3 method for class 'tbl_df' loci_transitions(.x, .col = \"genotypes\", ...)  # S3 method for class 'vctrs_bigSNP' loci_transitions(.x, .col = \"genotypes\", ...)"},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/loci_transitions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find transitions — loci_transitions","text":".x vector class vctrs_bigSNP (usually genotype column gen_tibble object), gen_tibble. .col column used tibble (grouped tibble passed directly function). defaults \"genotypes\" can take value. need user set , included resolve certain tidyselect operations. ... arguments passed specific methods.","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/loci_transitions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find transitions — loci_transitions","text":"logical vector defining loci transitions","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/loci_transitions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find transitions — loci_transitions","text":"","code":"example_gt <- load_example_gt(\"gen_tbl\") example_gt %>% loci_transitions() #> [1] FALSE  TRUE    NA FALSE FALSE FALSE"},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/loci_transversions.html","id":null,"dir":"Reference","previous_headings":"","what":"Find transversions — loci_transversions","title":"Find transversions — loci_transversions","text":"Use loci table define loci transversions","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/loci_transversions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find transversions — loci_transversions","text":"","code":"loci_transversions(.x, .col = \"genotypes\", ...)  # S3 method for class 'tbl_df' loci_transversions(.x, .col = \"genotypes\", ...)  # S3 method for class 'vctrs_bigSNP' loci_transversions(.x, .col = \"genotypes\", ...)"},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/loci_transversions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find transversions — loci_transversions","text":".x vector class vctrs_bigSNP (usually genotype column gen_tibble object), gen_tibble. .col column used tibble (grouped tibble passed directly function). defaults \"genotypes\" can take value. need user set , included resolve certain tidyselect operations. ... arguments passed specific methods.","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/loci_transversions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find transversions — loci_transversions","text":"logical vector defining loci transversions","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/loci_transversions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find transversions — loci_transversions","text":"","code":"example_gt <- load_example_gt(\"gen_tbl\") example_gt %>% loci_transversions() #> [1]  TRUE FALSE    NA  TRUE  TRUE  TRUE"},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/mutate.gen_tbl.html","id":null,"dir":"Reference","previous_headings":"","what":"A mutate method for gen_tibble objects — mutate.gen_tbl","title":"A mutate method for gen_tibble objects — mutate.gen_tbl","text":"mutate method gen_tibble objects","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/mutate.gen_tbl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A mutate method for gen_tibble objects — mutate.gen_tbl","text":"","code":"# S3 method for class 'gen_tbl' mutate(..., deparse.level = 1)"},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/mutate.gen_tbl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A mutate method for gen_tibble objects — mutate.gen_tbl","text":"... gen_tibble data.frame tibble deparse.level integer controlling construction column names.","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/mutate.gen_tbl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A mutate method for gen_tibble objects — mutate.gen_tbl","text":"gen_tibble","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/mutate.gen_tbl.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A mutate method for gen_tibble objects — mutate.gen_tbl","text":"","code":"example_gt <- load_example_gt(\"gen_tbl\")  # Add a new column example_gt %>% mutate(region = \"East\") #> # A gen_tibble: 6 loci #> # A tibble:     7 × 4 #>   id    population  genotypes region #>   <chr> <chr>      <vctr_SNP> <chr>  #> 1 a     pop1        [1,1,...] East   #> 2 b     pop1        [2,1,...] East   #> 3 c     pop2        [2,.,...] East   #> 4 d     pop2        [1,0,...] East   #> 5 e     pop1        [1,2,...] East   #> 6 f     pop3        [0,0,...] East   #> 7 g     pop3        [0,1,...] East"},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/mutate.grouped_gen_tbl.html","id":null,"dir":"Reference","previous_headings":"","what":"A mutate method for grouped gen_tibble objects — mutate.grouped_gen_tbl","title":"A mutate method for grouped gen_tibble objects — mutate.grouped_gen_tbl","text":"mutate method grouped gen_tibble objects","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/mutate.grouped_gen_tbl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A mutate method for grouped gen_tibble objects — mutate.grouped_gen_tbl","text":"","code":"# S3 method for class 'grouped_gen_tbl' mutate(..., deparse.level = 1)"},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/mutate.grouped_gen_tbl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A mutate method for grouped gen_tibble objects — mutate.grouped_gen_tbl","text":"... gen_tibble data.frame tibble deparse.level integer controlling construction column names.","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/mutate.grouped_gen_tbl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A mutate method for grouped gen_tibble objects — mutate.grouped_gen_tbl","text":"grouped gen_tibble","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/mutate.grouped_gen_tbl.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A mutate method for grouped gen_tibble objects — mutate.grouped_gen_tbl","text":"","code":"test_gt <- load_example_gt(\"grouped_gen_tbl\") test_gt %>% mutate(region = \"East\") #> # A gen_tibble: 6 loci #> # A tibble:     7 × 4 #> # Groups:       population [3] #>   id    population  genotypes region #>   <chr> <chr>      <vctr_SNP> <chr>  #> 1 a     pop1        [1,1,...] East   #> 2 b     pop1        [2,1,...] East   #> 3 c     pop2        [2,.,...] East   #> 4 d     pop2        [1,0,...] East   #> 5 e     pop1        [1,2,...] East   #> 6 f     pop3        [0,0,...] East   #> 7 g     pop3        [0,1,...] East   test_gt <- load_example_gt(\"grouped_gen_tbl_sf\") test_gt %>% mutate(region = \"East\") #> Simple feature collection with 7 features and 6 fields #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: 0 ymin: 41 xmax: 2 ymax: 51 #> Geodetic CRS:  WGS 84 #> # A gen_tibble: 6 loci #> # A tibble:     7 × 7 #> # Groups:       population [3] #>   id    population longitude latitude genotypes    geometry region #> * <chr> <chr>          <dbl>    <dbl> <vctr_SN> <POINT [°]> <chr>  #> 1 a     pop1               0       51 [1,1,...]      (0 51) East   #> 2 b     pop1               0       51 [2,1,...]      (0 51) East   #> 3 c     pop2               2       49 [2,.,...]      (2 49) East   #> 4 d     pop2               2       49 [1,0,...]      (2 49) East   #> 5 e     pop1               0       51 [1,2,...]      (0 51) East   #> 6 f     pop3               2       41 [0,0,...]      (2 41) East   #> 7 g     pop3               2       41 [0,1,...]      (2 41) East"},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/nwise_pop_pbs.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the Population Branch Statistics for each combination of populations — nwise_pop_pbs","title":"Compute the Population Branch Statistics for each combination of populations — nwise_pop_pbs","text":"function computes population branch statistics (PBS) combination populations locus. PBS measure genetic differentiation one focal population two reference populations, used identify outlier loci may selection.","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/nwise_pop_pbs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the Population Branch Statistics for each combination of populations — nwise_pop_pbs","text":"","code":"nwise_pop_pbs(   .x,   type = c(\"tidy\", \"matrix\"),   fst_method = c(\"Hudson\", \"Nei87\", \"WC84\"),   return_fst = FALSE )"},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/nwise_pop_pbs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the Population Branch Statistics for each combination of populations — nwise_pop_pbs","text":".x grouped gen_tibble type type object return. One \"tidy\" \"matrix\". Default \"tidy\". fst_method method use calculating Fst, one 'Hudson', 'Nei87', 'WC84'. See pairwise_pop_fst() details. return_fst logical value indicating whether return Fst values along PBS values. Default FALSE.","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/nwise_pop_pbs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the Population Branch Statistics for each combination of populations — nwise_pop_pbs","text":"Either matrix locus ID rownames following columns: pbs_a.b.c: PBS value population given b & c (multiple columns covering 3 way combinations populations grouped gen_tibble object) pbsn1_a.b.c: normalized PBS value population given b & c. fst_a.b: Fst value population b, return_fst TRUE tidy tibble following columns: loci: locus ID stat_name: name populations used pbs calculation (e.g. \"pbs_pop1.pop2.pop3\"). return_fst TRUE, stat_name also include \"fst\" calculations column (e.g. \"fst_pop1.pop2\"). value: pbs value populations","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/nwise_pop_pbs.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Compute the Population Branch Statistics for each combination of populations — nwise_pop_pbs","text":"Yi X, et al. (2010) Sequencing 50 human exomes reveals adaptation high altitude. Science 329: 75-78.","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/nwise_pop_pbs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute the Population Branch Statistics for each combination of populations — nwise_pop_pbs","text":"","code":"example_gt <- load_example_gt()  # We can compute the PBS for all populations using \"Hudson\" method example_gt %>%   group_by(population) %>%   nwise_pop_pbs(fst_method = \"Hudson\") #> # A tibble: 36 × 3 #>    loci  stat_name               value #>    <chr> <chr>                   <dbl> #>  1 rs1   pbs_pop1.pop2.pop3   -0.199   #>  2 rs1   pbs_pop2.pop1.pop3   -0.0164  #>  3 rs1   pbs_pop3.pop1.pop2    1.12    #>  4 rs1   pbsn1_pop1.pop2.pop3 -0.105   #>  5 rs1   pbsn1_pop2.pop1.pop3 -0.00863 #>  6 rs1   pbsn1_pop3.pop1.pop2  0.587   #>  7 rs2   pbs_pop1.pop2.pop3    0.519   #>  8 rs2   pbs_pop2.pop1.pop3    0.397   #>  9 rs2   pbs_pop3.pop1.pop2   -0.397   #> 10 rs2   pbsn1_pop1.pop2.pop3  0.342   #> # ℹ 26 more rows"},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/pairwise_allele_sharing.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the Pairwise Allele Sharing Matrix for a gen_tibble object — pairwise_allele_sharing","title":"Compute the Pairwise Allele Sharing Matrix for a gen_tibble object — pairwise_allele_sharing","text":"function computes Allele Sharing matrix. Estimates Allele Sharing (equivalent quantity estimated hierfstat::matching()) pairs individuals (locus, gives 1 two individuals homozygous allele, 0 homozygous different allele, 1/2 least one individual heterozygous. Matching average 0, 1/2 1s)","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/pairwise_allele_sharing.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the Pairwise Allele Sharing Matrix for a gen_tibble object — pairwise_allele_sharing","text":"","code":"pairwise_allele_sharing(   x,   as_matrix = FALSE,   block_size = bigstatsr::block_size(nrow(x)) )"},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/pairwise_allele_sharing.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the Pairwise Allele Sharing Matrix for a gen_tibble object — pairwise_allele_sharing","text":"x gen_tibble object. as_matrix boolean, determining whether results square symmetrical matrix (TRUE), tidied tibble (FALSE, default) block_size maximum number loci read . loci improve speed, tax memory.","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/pairwise_allele_sharing.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the Pairwise Allele Sharing Matrix for a gen_tibble object — pairwise_allele_sharing","text":"matrix allele sharing pairs individuals","code":""},{"path":[]},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/pairwise_allele_sharing.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute the Pairwise Allele Sharing Matrix for a gen_tibble object — pairwise_allele_sharing","text":"","code":"example_gt <- load_example_gt(\"gen_tbl\")  # Compute allele sharing between individuals example_gt %>% pairwise_allele_sharing(as_matrix = FALSE) #> # A tibble: 21 × 3 #>    item1 item2 value #>    <chr> <chr> <dbl> #>  1 a     b     0.7   #>  2 a     c     0.6   #>  3 a     d     0.667 #>  4 a     e     0.583 #>  5 a     f     0.6   #>  6 a     g     0.5   #>  7 b     c     0.75  #>  8 b     d     0.8   #>  9 b     e     0.5   #> 10 b     f     0.5   #> # ℹ 11 more rows  # Alternatively, return as a tibble example_gt %>% pairwise_allele_sharing(as_matrix = TRUE) #>           a     b     c         d         e     f     g #> a 0.6666667 0.700 0.600 0.6666667 0.5833333 0.600 0.500 #> b 0.7000000 0.900 0.750 0.8000000 0.5000000 0.500 0.375 #> c 0.6000000 0.750 0.800 0.6000000 0.6000000 0.625 0.500 #> d 0.6666667 0.800 0.600 0.8333333 0.4166667 0.700 0.500 #> e 0.5833333 0.500 0.600 0.4166667 0.7500000 0.500 0.500 #> f 0.6000000 0.500 0.625 0.7000000 0.5000000 0.900 0.750 #> g 0.5000000 0.375 0.500 0.5000000 0.5000000 0.750 0.700"},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/pairwise_grm.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the Genomic Relationship Matrix for a gen_tibble object — pairwise_grm","title":"Compute the Genomic Relationship Matrix for a gen_tibble object — pairwise_grm","text":"function computes Genomic Relationship Matrix (GRM). estimated computing pairwise kinship coefficients (coancestries) pairs individuals matrix Allele Sharing following approach Weir Goudet 2017 based beta estimators).","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/pairwise_grm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the Genomic Relationship Matrix for a gen_tibble object — pairwise_grm","text":"","code":"pairwise_grm(   x,   allele_sharing_mat = NULL,   block_size = bigstatsr::block_size(nrow(x)) )"},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/pairwise_grm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the Genomic Relationship Matrix for a gen_tibble object — pairwise_grm","text":"x gen_tibble object. allele_sharing_mat optional, matrix Allele Sharing returned pairwise_allele_sharing() as_matrix=TRUE. number statistics can derived Allele Sharing matrix, sometimes efficient pre-compute matrix. block_size size blocks use computation allele sharing matrix.","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/pairwise_grm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the Genomic Relationship Matrix for a gen_tibble object — pairwise_grm","text":"matrix GR pairs individuals","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/pairwise_grm.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute the Genomic Relationship Matrix for a gen_tibble object — pairwise_grm","text":"GRM twice coancestry matrix (e.g. estimated hierfstat::beta.dosage() inb=FALSE).","code":""},{"path":[]},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/pairwise_grm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute the Genomic Relationship Matrix for a gen_tibble object — pairwise_grm","text":"","code":"example_gt <- load_example_gt(\"gen_tbl\")  # Compute the GRM from the allele sharing matrix example_gt %>% pairwise_grm() #>              a          b           c           d            e           f #> a  0.396946565  0.5572519  0.07633588  0.39694656 -0.003816794  0.07633588 #> b  0.557251908  1.5190840  0.79770992  1.03816794 -0.404580153 -0.40458015 #> c  0.076335878  0.7977099  1.03816794  0.07633588  0.076335878  0.19656489 #> d  0.396946565  1.0381679  0.07633588  1.19847328 -0.805343511  0.55725191 #> e -0.003816794 -0.4045802  0.07633588 -0.80534351  0.797709924 -0.40458015 #> f  0.076335878 -0.4045802  0.19656489  0.55725191 -0.404580153  1.51908397 #> g -0.404580153 -1.0057252 -0.40458015 -0.40458015 -0.404580153  0.79770992 #>            g #> a -0.4045802 #> b -1.0057252 #> c -0.4045802 #> d -0.4045802 #> e -0.4045802 #> f  0.7977099 #> g  0.5572519  # To calculate using a precomputed allele sharing matrix, use: allele_sharing <- example_gt %>% pairwise_allele_sharing(as_matrix = TRUE) example_gt %>% pairwise_grm(allele_sharing_mat = allele_sharing) #>              a          b           c           d            e           f #> a  0.396946565  0.5572519  0.07633588  0.39694656 -0.003816794  0.07633588 #> b  0.557251908  1.5190840  0.79770992  1.03816794 -0.404580153 -0.40458015 #> c  0.076335878  0.7977099  1.03816794  0.07633588  0.076335878  0.19656489 #> d  0.396946565  1.0381679  0.07633588  1.19847328 -0.805343511  0.55725191 #> e -0.003816794 -0.4045802  0.07633588 -0.80534351  0.797709924 -0.40458015 #> f  0.076335878 -0.4045802  0.19656489  0.55725191 -0.404580153  1.51908397 #> g -0.404580153 -1.0057252 -0.40458015 -0.40458015 -0.404580153  0.79770992 #>            g #> a -0.4045802 #> b -1.0057252 #> c -0.4045802 #> d -0.4045802 #> e -0.4045802 #> f  0.7977099 #> g  0.5572519"},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/pairwise_ibs.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the Identity by State Matrix for a gen_tibble object — pairwise_ibs","title":"Compute the Identity by State Matrix for a gen_tibble object — pairwise_ibs","text":"function computes IBS matrix.","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/pairwise_ibs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the Identity by State Matrix for a gen_tibble object — pairwise_ibs","text":"","code":"pairwise_ibs(   x,   as_matrix = FALSE,   type = c(\"proportion\", \"adjusted_counts\", \"raw_counts\"),   block_size = bigstatsr::block_size(nrow(x)) )"},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/pairwise_ibs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the Identity by State Matrix for a gen_tibble object — pairwise_ibs","text":"x gen_tibble object. as_matrix boolean, determining whether results square symmetrical matrix (TRUE), tidied tibble (FALSE, default) type one \"proportion\" (equivalent \"ibs\" PLINK), \"adjusted_counts\" (\"distance\" PLINK), \"raw_counts\" (counts identical alleles non-missing alleles, two quantities computed) block_size maximum number loci read . loci improve speed, tax memory.","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/pairwise_ibs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the Identity by State Matrix for a gen_tibble object — pairwise_ibs","text":"bigstatsr::FBM proportion adjusted counts, list two bigstatsr::FBM matrices, one counts IBS alleles, one number valid alleles (.e. 2n_loci - 2missing_loci)","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/pairwise_ibs.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute the Identity by State Matrix for a gen_tibble object — pairwise_ibs","text":"Note monomorphic sites currently considered. Remove monomorphic sites running pairwise_king concern.","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/pairwise_ibs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute the Identity by State Matrix for a gen_tibble object — pairwise_ibs","text":"","code":"example_gt <- load_example_gt(\"gen_tbl\")  pairwise_ibs(example_gt, type = \"proportion\") #> # A tibble: 21 × 3 #>    item1 item2 value #>    <chr> <chr> <dbl> #>  1 a     b     0.8   #>  2 a     c     0.7   #>  3 a     d     0.833 #>  4 a     e     0.75  #>  5 a     f     0.6   #>  6 a     g     0.7   #>  7 b     c     0.75  #>  8 b     d     0.8   #>  9 b     e     0.5   #> 10 b     f     0.5   #> # ℹ 11 more rows  # Alternatively, return a matrix pairwise_ibs(example_gt, type = \"proportion\", as_matrix = TRUE) #>           a    b     c         d         e    f     g #> a 1.0000000 0.80 0.700 0.8333333 0.7500000 0.60 0.700 #> b 0.8000000 1.00 0.750 0.8000000 0.5000000 0.50 0.500 #> c 0.7000000 0.75 1.000 0.6000000 0.7000000 0.75 0.625 #> d 0.8333333 0.80 0.600 1.0000000 0.5833333 0.70 0.500 #> e 0.7500000 0.50 0.700 0.5833333 1.0000000 0.60 0.500 #> f 0.6000000 0.50 0.750 0.7000000 0.6000000 1.00 0.750 #> g 0.7000000 0.50 0.625 0.5000000 0.5000000 0.75 1.000  # Adjust block_size pairwise_ibs(example_gt, block_size = 2) #> # A tibble: 21 × 3 #>    item1 item2 value #>    <chr> <chr> <dbl> #>  1 a     b     0.8   #>  2 a     c     0.7   #>  3 a     d     0.833 #>  4 a     e     0.75  #>  5 a     f     0.6   #>  6 a     g     0.7   #>  7 b     c     0.75  #>  8 b     d     0.8   #>  9 b     e     0.5   #> 10 b     f     0.5   #> # ℹ 11 more rows  # Change type pairwise_ibs(example_gt, type = \"adjusted_counts\") #> # A tibble: 21 × 3 #>    item1 item2 value #>    <chr> <chr> <dbl> #>  1 a     b       4.8 #>  2 a     c       4.2 #>  3 a     d       5   #>  4 a     e       4.5 #>  5 a     f       3.6 #>  6 a     g       4.2 #>  7 b     c       4.5 #>  8 b     d       4.8 #>  9 b     e       3   #> 10 b     f       3   #> # ℹ 11 more rows pairwise_ibs(example_gt, type = \"raw_counts\") #> $ibs #> A Filebacked Big Matrix of type 'double' with 7 rows and 7 columns. #>  #> $valid_n #> A Filebacked Big Matrix of type 'double' with 7 rows and 7 columns. #>"},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/pairwise_king.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the KING-robust Matrix for a gen_tibble object — pairwise_king","title":"Compute the KING-robust Matrix for a gen_tibble object — pairwise_king","text":"function computes KING-robust estimator kinship, reimplementing KING algorithm Manichaikul et al. (2010).","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/pairwise_king.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the KING-robust Matrix for a gen_tibble object — pairwise_king","text":"","code":"pairwise_king(   x,   as_matrix = FALSE,   block_size = bigstatsr::block_size(nrow(x)) )"},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/pairwise_king.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the KING-robust Matrix for a gen_tibble object — pairwise_king","text":"x gen_tibble object. as_matrix boolean, determining whether results square symmetrical matrix (TRUE), tidied tibble (FALSE, default) block_size maximum number loci read . loci improve speed, tax memory.","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/pairwise_king.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the KING-robust Matrix for a gen_tibble object — pairwise_king","text":"square symmetrical matrix relationship coefficients individuals as_matrix TRUE, tidied tibble coefficients as_matrix FALSE.","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/pairwise_king.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Compute the KING-robust Matrix for a gen_tibble object — pairwise_king","text":"Manichaikul, . et al. (2010) Robust relationship inference genome-wide association studies. Bioinformatics, 26(22), 2867–2873. https://doi.org/10.1093/bioinformatics/btq559. Note monomorphic sites currently considered. Remove monomorphic sites running pairwise_king concern.","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/pairwise_king.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute the KING-robust Matrix for a gen_tibble object — pairwise_king","text":"","code":"example_gt <- load_example_gt(\"gen_tbl\")  # Compute the KING-robust matrix pairwise_king(example_gt, as_matrix = TRUE) #>        a     b      c      d      e     f      g #> a  0.500  0.00  0.125  0.250  0.250 -0.50  0.250 #> b  0.000  0.50    NaN  0.000 -1.250 -1.00 -1.000 #> c  0.125   NaN  0.500  0.000  0.125 -0.50 -0.750 #> d  0.250  0.00  0.000  0.500 -0.625 -0.25 -0.125 #> e  0.250 -1.25  0.125 -0.625  0.500 -1.00 -0.125 #> f -0.500 -1.00 -0.500 -0.250 -1.000  0.50    NaN #> g  0.250 -1.00 -0.750 -0.125 -0.125   NaN  0.500  # Or return a tidy tibble pairwise_king(example_gt, as_matrix = FALSE) #> # A tibble: 21 × 3 #>    item1 item2   value #>    <chr> <chr>   <dbl> #>  1 a     b       0     #>  2 a     c       0.125 #>  3 a     d       0.25  #>  4 a     e       0.25  #>  5 a     f      -0.5   #>  6 a     g       0.25  #>  7 b     c     NaN     #>  8 b     d       0     #>  9 b     e      -1.25  #> 10 b     f      -1     #> # ℹ 11 more rows  # Adjust block_size pairwise_king(example_gt, block_size = 2) #> # A tibble: 21 × 3 #>    item1 item2   value #>    <chr> <chr>   <dbl> #>  1 a     b       0     #>  2 a     c       0.125 #>  3 a     d       0.25  #>  4 a     e       0.25  #>  5 a     f      -0.5   #>  6 a     g       0.25  #>  7 b     c     NaN     #>  8 b     d       0     #>  9 b     e      -1.25  #> 10 b     f      -1     #> # ℹ 11 more rows"},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/pairwise_pop_fst.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute pairwise population Fst — pairwise_pop_fst","title":"Compute pairwise population Fst — pairwise_pop_fst","text":"function computes pairwise Fst. following methods implemented: 'Hudson': Hudson's formulation, derived Bhatia et al (2013) diploids. method can also used pseudohaploid data. 'Nei87' : Fst according Nei (1987) - includes correction heterozygosity computing Ht (uses formulation hierfstat::pairwise.neifst()), 'WC84' : Weir Cockerham (1984), correcting missing data (uses formulation hierfstat::pairwise.WCfst()).","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/pairwise_pop_fst.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute pairwise population Fst — pairwise_pop_fst","text":"","code":"pairwise_pop_fst(   .x,   type = c(\"tidy\", \"pairwise\"),   by_locus = FALSE,   by_locus_type = c(\"tidy\", \"matrix\", \"list\"),   method = c(\"Hudson\", \"Nei87\", \"WC84\"),   return_num_dem = FALSE,   n_cores = bigstatsr::nb_cores() )"},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/pairwise_pop_fst.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute pairwise population Fst — pairwise_pop_fst","text":".x grouped gen_tibble (obtained using dplyr::group_by()) type type object return One \"tidy\" \"pairwise\" pairwise matrix populations. Default \"tidy\". by_locus boolean, determining whether Fst returned locus(TRUE), single genome wide value obtained taking ratio mean numerator denominator (FALSE, default). by_locus_type type object return. One \"tidy\", \"matrix\" \"list\". Default \"tidy\". method one 'Hudson', 'Nei87', 'WC84' return_num_dem returns list numerators denominators locus. useful creating windowed estimates Fst (need compute mean numerator denominator within window). Default FALSE. n_cores number cores used, defaults bigstatsr::nb_cores()","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/pairwise_pop_fst.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute pairwise population Fst — pairwise_pop_fst","text":"type=tidy, tibble genome-wide pairwise Fst values pairwise combination row \"by_locus=FALSE\", else list including tibble genome-wide values well matrix pairwise Fst locus loci rows pairwise combinations columns. type=pairwise, matrix genome-wide pairwise Fst values returned.","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/pairwise_pop_fst.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute pairwise population Fst — pairwise_pop_fst","text":"formulae, genome wide estimate obtained taking ratio mean numerators denominators relevant SNPs.","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/pairwise_pop_fst.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Compute pairwise population Fst — pairwise_pop_fst","text":"Bhatia G, Patterson N, Sankararaman S, Price AL. (2013) Estimating Interpreting FST: Impact Rare Variants. Genome Research, 23(9):1514–1521. Nei, M. (1987) Molecular Evolutionary Genetics. Columbia University Press Weir, B. S., & Cockerham, C. C. (1984). Estimating F-statistics analysis population structure. Evolution, 38(6): 1358–1370.","code":""},{"path":[]},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/pairwise_pop_fst.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute pairwise population Fst — pairwise_pop_fst","text":"","code":"example_gt <- load_example_gt(\"gen_tbl\")  # For a basic global pairwise Fst calculation: example_gt %>%   group_by(population) %>%   pairwise_pop_fst(method = \"Nei87\") #> # A tibble: 3 × 3 #>   population_1 population_2  value #>   <chr>        <chr>         <dbl> #> 1 pop1         pop2         0.0320 #> 2 pop1         pop3         0.143  #> 3 pop2         pop3         0.0500  # With a pairwise matrix: example_gt %>%   group_by(population) %>%   pairwise_pop_fst(method = \"Nei87\", type = \"pairwise\") #>           pop1      pop2      pop3 #> pop1        NA 0.0320197 0.1428571 #> pop2 0.0320197        NA 0.0500000 #> pop3 0.1428571 0.0500000        NA  # To calculate Fst by locus: example_gt %>%   group_by(population) %>%   pairwise_pop_fst(method = \"Hudson\", by_locus = TRUE) #> $Fst_by_locus #> # A tibble: 18 × 3 #>    loci  stat_name       value #>    <chr> <chr>           <dbl> #>  1 rs1   fst_pop1.pop2  -0.24  #>  2 rs1   fst_pop1.pop3   0.6   #>  3 rs1   fst_pop2.pop3   0.667 #>  4 rs2   fst_pop1.pop2   0.6   #>  5 rs2   fst_pop1.pop3   0.114 #>  6 rs2   fst_pop2.pop3   0     #>  7 rs3   fst_pop1.pop2 NaN     #>  8 rs3   fst_pop1.pop3   0     #>  9 rs3   fst_pop2.pop3   0     #> 10 rs4   fst_pop1.pop2  -0.167 #> 11 rs4   fst_pop1.pop3   0.333 #> 12 rs4   fst_pop2.pop3   0     #> 13 rs5   fst_pop1.pop2  -0.1   #> 14 rs5   fst_pop1.pop3  -0.6   #> 15 rs5   fst_pop2.pop3  -0.5   #> 16 rs6   fst_pop1.pop2  -0.25  #> 17 rs6   fst_pop1.pop3  -0.333 #> 18 rs6   fst_pop2.pop3  -0.5   #>  #> $Fst #> # A tibble: 3 × 3 #>   population_1 population_2  value #>   <chr>        <chr>         <dbl> #> 1 pop1         pop2         0.0345 #> 2 pop1         pop3         0.0556 #> 3 pop2         pop3         0      #>"},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See `magrittr::pipe \\","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator — %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"result calling rhs(lhs).","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/pipe.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Pipe operator — %>%","text":"","code":"example_gt <- load_example_gt(\"gen_tbl\") example_gt %>% count_loci() #> [1] 6"},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/pop_fis.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute population specific FIS — pop_fis","title":"Compute population specific FIS — pop_fis","text":"function computes population specific FIS, using either approach Nei 1987 (algorithm equivalent one used hierfstat::basic.stats()) Weir Goudet 2017 (algorithm equivalent one used hierfstat::fis.dosage()).","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/pop_fis.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute population specific FIS — pop_fis","text":"","code":"pop_fis(   .x,   method = c(\"Nei87\", \"WG17\"),   by_locus = FALSE,   include_global = FALSE,   allele_sharing_mat = NULL )"},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/pop_fis.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute population specific FIS — pop_fis","text":".x grouped gen_tibble (obtained using dplyr::group_by()) method one \"Nei87\" (based Nei 1987, eqn 7.41) \"WG17\" (Weir Goudet 2017) compute FIS by_locus boolean, determining whether FIS returned locus(TRUE), single genome wide value (FALSE, default). Note relevant \"Nei87\", \"WG17\" always returns single value. include_global boolean determining whether, besides population specific estimates, global estimate appended. Note return vector n populations plus 1 (global value), matrix n+1 columns by_locus=TRUE. allele_sharing_mat optional relevant \"WG17\", matrix Allele Sharing returned pairwise_allele_sharing() as_matrix=TRUE. number statistics can derived Allele Sharing matrix, sometimes efficient pre-compute matrix.","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/pop_fis.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute population specific FIS — pop_fis","text":"vector population specific fis (plus global value include_global=TRUE)","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/pop_fis.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Compute population specific FIS — pop_fis","text":"Nei M. (1987) Molecular Evolutionary Genetics. Columbia University Press Weir, BS Goudet J (2017) Unified Characterization Population Structure Relatedness. Genetics (2017) 206:2085","code":""},{"path":[]},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/pop_fis.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute population specific FIS — pop_fis","text":"","code":"example_gt <- load_example_gt(\"grouped_gen_tbl\")  # Compute FIS using Nei87 example_gt %>% pop_fis(method = \"Nei87\") #>       pop1       pop2       pop3  #> -0.2333333  0.0000000  0.0000000   # Compute FIS using WG17 example_gt %>% pop_fis(method = \"WG17\") #>        pop1        pop2        pop3  #> -0.12328767  0.08333333 -0.60000000   # To include the global FIS, set include_global = TRUE example_gt %>% pop_fis(method = \"Nei87\", include_global = TRUE) #>        pop1        pop2        pop3      global  #> -0.23333333  0.00000000  0.00000000 -0.09696376   # To return FIS by locus, set by_locus = TRUE example_gt %>% pop_fis(method = \"Nei87\", by_locus = TRUE) #>               pop1 pop2 pop3 #> [1,] -3.333333e-01    0  NaN #> [2,] -3.333333e-01  NaN    0 #> [3,]           NaN  NaN    0 #> [4,] -1.000000e+00    0  NaN #> [5,]  5.000000e-01    0  NaN #> [6,] -4.440892e-16    0  NaN  # To calculate from a pre-computed allele sharing matrix: allele_sharing_mat <- pairwise_allele_sharing(example_gt, as_matrix = TRUE) example_gt %>% pop_fis(   method = \"WG17\",   allele_sharing_mat = allele_sharing_mat ) #>        pop1        pop2        pop3  #> -0.12328767  0.08333333 -0.60000000"},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/pop_fst.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute population specific Fst — pop_fst","title":"Compute population specific Fst — pop_fst","text":"function computes population specific Fst, using approach Weir Goudet 2017 (computed hierfstat::fst.dosage()).","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/pop_fst.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute population specific Fst — pop_fst","text":"","code":"pop_fst(.x, include_global = FALSE, allele_sharing_mat = NULL)"},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/pop_fst.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute population specific Fst — pop_fst","text":".x grouped gen_tibble (obtained using dplyr::group_by()) include_global boolean determining whether, besides population specific Fst, global Fst appended. Note return vector n populations plus 1 (global value) allele_sharing_mat optional, matrix Allele Sharing returned pairwise_allele_sharing() as_matrix=TRUE. number statistics can derived Allele Sharing matrix,","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/pop_fst.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute population specific Fst — pop_fst","text":"vector population specific Fst (plus global value include_global=TRUE)","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/pop_fst.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Compute population specific Fst — pop_fst","text":"Weir, BS Goudet J (2017) Unified Characterization Population Structure Relatedness. Genetics (2017) 206:2085","code":""},{"path":[]},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/pop_fst.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute population specific Fst — pop_fst","text":"","code":"example_gt <- load_example_gt(\"grouped_gen_tbl\")  # Compute FIS using Nei87 example_gt %>% pop_fst() #>       pop1       pop2       pop3  #> 0.05246079 0.06544078 0.41590049   # To include the global Fst, set include_global = TRUE example_gt %>% pop_fst(include_global = TRUE) #>       pop1       pop2       pop3     global  #> 0.05246079 0.06544078 0.41590049 0.17793402   # To calculate from a pre-computed allele sharing matrix: allele_sharing_mat <- pairwise_allele_sharing(example_gt, as_matrix = TRUE) example_gt %>% pop_fst(allele_sharing_mat = allele_sharing_mat) #>       pop1       pop2       pop3  #> 0.05246079 0.06544078 0.41590049"},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/pop_global_stats.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute basic population global statistics — pop_global_stats","title":"Compute basic population global statistics — pop_global_stats","text":"function computes basic population global statistics, following notation Nei 1987 (turn based Nei Chesser 1983): observed heterozygosity ( \\(\\hat{h}_o\\), column header Ho) expected heterozygosity, also known gene diversity ( \\(\\hat{h}_s\\), Hs) total heterozygosity ( \\(\\hat{h}_t\\), Ht) genetic differentiation subpopulations (\\(D_{st}\\), Dst) corrected total population diversity (\\(h'_t\\), Htp) corrected genetic differentiation subpopulations (\\(D'_{st}\\), Dstp) \\(\\hat{F}_{ST}\\) (column header, Fst) corrected \\(\\hat{F'}_{ST}\\) (column header Fstp) \\(\\hat{F}_{}\\) (column header, Fis) Jost's \\(\\hat{D}\\) (column header, Dest)","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/pop_global_stats.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute basic population global statistics — pop_global_stats","text":"","code":"pop_global_stats(.x, by_locus = FALSE, n_cores = bigstatsr::nb_cores())"},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/pop_global_stats.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute basic population global statistics — pop_global_stats","text":".x gen_tibble (usually grouped, obtained using dplyr::group_by(); use single population return number quantities NA/NaN) by_locus boolean, determining whether statistics returned locus(TRUE), single genome wide value (FALSE, default). n_cores number cores used, defaults bigstatsr::nb_cores()","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/pop_global_stats.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute basic population global statistics — pop_global_stats","text":"tibble population statistics, populations rows statistics columns","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/pop_global_stats.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute basic population global statistics — pop_global_stats","text":"use notation Nei 1987. notation loci \\(m\\) alleles, case two alleles, m=2. Within population observed heterozygosity \\(\\hat{h}_o\\) locus \\(m\\) alleles defined : \\(\\hat{h}_o= 1-\\sum_{k=1}^{s} \\sum_{=1}^{m}  \\hat{X}_{kii}/s\\) \\(\\hat{X}_{kii}\\) represents proportion homozygote \\(\\) sample \\(k\\)th population \\(s\\) number populations, following equation 7.38 Nei(1987) pp.164. Within population expected heterozygosity (gene diversity) \\(\\hat{h}_s\\) locus \\(m\\) alleles defined : \\(\\hat{h}_s=(\\tilde{n}/(\\tilde{n}-1))[1-\\sum_{=1}^{m}\\bar{\\hat{x}_i^2}-\\hat{h}_o/2\\tilde{n}]\\) #nolint  \\(\\tilde{n}=s/\\sum_k 1/n_k\\) (.e harmonic mean \\(n_k\\)) \\(\\bar{\\hat{x}_i^2}=\\sum_k \\hat{x}_{ki}^2/s\\) following equation 7.39 Nei(1987) pp.164. Total heterozygosity (total gene diversity) \\(\\hat{h}_t\\) locus \\(m\\) alleles defined : \\(\\hat{h}_t = 1-\\sum_{=1}^{m} \\bar{\\hat{x}_i^2} +   \\hat{h}_s/(\\tilde{n}s) - \\hat{h}_o/(2\\tilde{n}s)\\)  \\(\\hat{x}_i=\\sum_k \\hat{x}_{ki}/s\\) following equation 7.40 Nei(1987) pp.164. amount gene diversity among samples \\(D_{ST}\\) defined : \\(D_{ST} = \\hat{h}_t - \\hat{h}_s\\) following equation provided text top page 165 Nei(1987). corrected amount gene diversity among samples \\(D'_{ST}\\) defined : \\(D'_{ST} = (s/(s-1))D'_{ST}\\) following equation provided text top page 165 Nei(1987). Total corrected heterozygosity (total gene diversity) \\(\\hat{h}_t\\) defined : \\(\\hat{h'}_t = \\hat{h}_s + D'_{ST}\\) following equation provided text top page 165 Nei(1987). \\(\\hat{F}_{}\\) defined : \\(\\hat{F}_{} = 1 - \\hat{h}_o/\\hat{h}_s\\) following equation 7.41 Nei(1987) pp.164. \\(\\hat{F}_{ST}\\) defined : \\(\\hat{F}_{ST} = 1 - \\hat{h}_s/\\hat{h}_t = D_{ST}/\\hat{h}_t\\) following equation 7.43 Nei(1987) pp.165. \\(\\hat{F'}_{ST}\\) defined : \\(\\hat{F'}_{ST} = D'_{ST}/\\hat{h'}_t\\) following explanation provided text top page 165 Nei(1987). Jost's \\(\\hat{D}\\) defined : \\(\\hat{D} = (s/(s-1))((\\hat{h'}_t-\\hat{h}_s)/(1-\\hat{h}_s))\\) defined Jost(2008) statistics first computed locus, averaged across loci (including monomorphic locus) obtain genome-wide values. function uses algorithm hierfstat::basic.stats() optimized speed memory usage.","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/pop_global_stats.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Compute basic population global statistics — pop_global_stats","text":"Nei M, Chesser R (1983) Estimation fixation indexes gene diversities. Annals Human Genetics, 47, 253-259. Nei M. (1987) Molecular Evolutionary Genetics. Columbia University Press, pp. 164-165. Jost L (2008) GST relatives measure differentiation. Molecular Ecology, 17, 4015-4026.","code":""},{"path":[]},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/pop_global_stats.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute basic population global statistics — pop_global_stats","text":"","code":"example_gt <- load_example_gt(\"grouped_gen_tbl\")  # Compute population global statistics example_gt %>% pop_global_stats() #>          Ho          Hs          Ht         Dst         Htp        Dstp  #>  0.44444444  0.40515873  0.42826279  0.02310406  0.43981481  0.03465608  #>         Fst        Fstp         Fis        Dest  #>  0.05394832  0.07879699 -0.09696376  0.05826106   # To return by locus, set by_locus = TRUE example_gt %>% pop_global_stats(by_locus = TRUE) #>          Ho        Hs        Ht          Dst       Htp         Dstp         Fst #> 1 0.3888889 0.3361111 0.5194444  0.183333333 0.6111111  0.275000000  0.35294118 #> 2 0.3888889 0.3968254 0.4656085  0.068783069 0.5000000  0.103174603  0.14772727 #> 3 0.1666667 0.1583333 0.1638889  0.005555556 0.1666667  0.008333333  0.03389831 #> 4 0.5000000 0.3333333 0.3888889  0.055555556 0.4166667  0.083333333  0.14285714 #> 5 0.6111111 0.6984127 0.5661376 -0.132275132 0.5000000 -0.198412698 -0.23364486 #> 6 0.6111111 0.5079365 0.4656085 -0.042328042 0.4444444 -0.063492063 -0.09090909 #>         Fstp         Fis        Dest #> 1  0.4500000 -0.15702479  0.41422594 #> 2  0.2063492  0.02000000  0.17105263 #> 3  0.0500000 -0.05263158  0.00990099 #> 4  0.2000000 -0.50000000  0.12500000 #> 5 -0.3968254  0.12500000 -0.65789474 #> 6 -0.1428571 -0.20312500 -0.12903226"},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/pop_het_exp.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the population expected heterozygosity — pop_het_exp","title":"Compute the population expected heterozygosity — pop_het_exp","text":"function computes expected population heterozygosity (also referred gene diversity, avoid potentially misleading use term \"expected\" context), using formula Nei (1987).","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/pop_het_exp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the population expected heterozygosity — pop_het_exp","text":"","code":"pop_het_exp(   .x,   by_locus = FALSE,   include_global = FALSE,   n_cores = bigstatsr::nb_cores() )  pop_gene_div(   .x,   by_locus = FALSE,   include_global = FALSE,   n_cores = bigstatsr::nb_cores() )"},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/pop_het_exp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the population expected heterozygosity — pop_het_exp","text":".x gen_tibble (usually grouped, obtained using dplyr::group_by(), otherwise full tibble considered belonging single population). by_locus boolean, determining whether Hs returned locus(TRUE), single genome wide value (FALSE, default). include_global boolean determining whether, besides population specific estimates, global estimate appended. Note return vector n populations plus 1 (global value), matrix n+1 columns by_locus=TRUE. n_cores number cores used, defaults bigstatsr::nb_cores()","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/pop_het_exp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the population expected heterozygosity — pop_het_exp","text":"vector mean population observed heterozygosities (by_locus=FALSE), matrix estimates locus (rows loci, columns populations, by_locus=TRUE)","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/pop_het_exp.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute the population expected heterozygosity — pop_het_exp","text":"Within population expected heterozygosity (gene diversity) \\(\\hat{h}_s\\) locus \\(m\\) alleles defined : \\(\\hat{h}_s=\\tilde{n}/(\\tilde{n}-1)[1-\\sum_{}^{m}\\bar{\\hat{x}_i^2}-\\hat{h}_o/2\\tilde{n}]\\) #nolint  \\(\\tilde{n}=s/\\sum_k 1/n_k\\) (.e harmonic mean \\(n_k\\)) \\(\\bar{\\hat{x}_i^2}=\\sum_k \\hat{x}_{ki}^2/s\\) following equation 7.39 Nei(1987) pp.164. specific case, two alleles, \\(m=2\\). \\(\\hat{h}_s\\) genome level population simply mean locus estimates population.","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/pop_het_exp.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Compute the population expected heterozygosity — pop_het_exp","text":"Nei M. (1987) Molecular Evolutionary Genetics. Columbia University Press","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/pop_het_exp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute the population expected heterozygosity — pop_het_exp","text":"","code":"example_gt <- load_example_gt(\"grouped_gen_tbl\")  # Compute expected heterozygosity example_gt %>% pop_het_exp() #>      pop1      pop2      pop3  #> 0.4166667 0.4000000 0.2500000   # To include the global expected heterozygosity, set include_global = TRUE example_gt %>% pop_het_exp(include_global = TRUE) #>      pop1      pop2      pop3    global  #> 0.4166667 0.4000000 0.2500000 0.4051587   # To return by locus, set by_locus = TRUE example_gt %>% pop_het_exp(by_locus = TRUE) #>           pop1 pop2 pop3 #> [1,] 0.5000000  0.5  0.0 #> [2,] 0.5000000  NaN  0.5 #> [3,] 0.0000000  0.0  0.5 #> [4,] 0.5000000  0.5  0.0 #> [5,] 0.6666667  0.5  NaN #> [6,] 0.3333333  0.5  NaN"},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/pop_het_obs.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the population observed heterozygosity — pop_het_obs","title":"Compute the population observed heterozygosity — pop_het_obs","text":"function computes population heterozygosity, using formula Nei (1987).","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/pop_het_obs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the population observed heterozygosity — pop_het_obs","text":"","code":"pop_het_obs(   .x,   by_locus = FALSE,   include_global = FALSE,   n_cores = bigstatsr::nb_cores() )"},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/pop_het_obs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the population observed heterozygosity — pop_het_obs","text":".x gen_tibble (usually grouped, obtained using dplyr::group_by(), otherwise full tibble considered belonging single population). by_locus boolean, determining whether Ho returned locus(TRUE), single genome wide value (FALSE, default). include_global boolean determining whether, besides population specific estimates, global estimate appended. Note return vector n populations plus 1 (global value), matrix n+1 columns by_locus=TRUE. n_cores number cores used, defaults bigstatsr::nb_cores()","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/pop_het_obs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the population observed heterozygosity — pop_het_obs","text":"vector mean population observed heterozygosities (by_locus=FALSE), matrix estimates locus (rows loci, columns populations, by_locus=TRUE)","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/pop_het_obs.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute the population observed heterozygosity — pop_het_obs","text":"Within population observed heterozygosity \\(\\hat{h}_o\\) locus \\(m\\) alleles defined : \\(\\hat{h}_o=   1-\\sum_{k=1}^{s} \\sum_{=1}^{m}  \\hat{X}_{kii}/s\\) \\(\\hat{X}_{kii}\\) represents proportion homozygote \\(\\) sample \\(k\\)th population \\(s\\) number populations, following equation 7.38 Nei(1987) pp.164. specific case, two alleles, \\(m=2\\). population specific estimates, sum done single value \\(k\\). \\(\\hat{h}_o\\) genome level simply mean locus estimates.","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/pop_het_obs.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Compute the population observed heterozygosity — pop_het_obs","text":"Nei M. (1987) Molecular Evolutionary Genetics. Columbia University Press","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/pop_het_obs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute the population observed heterozygosity — pop_het_obs","text":"","code":"example_gt <- load_example_gt(\"grouped_gen_tbl\")  # Compute expected heterozygosity example_gt %>% pop_het_obs() #>      pop1      pop2      pop3  #> 0.5000000 0.3333333 0.5000000   # To include the global expected heterozygosity, set include_global = TRUE example_gt %>% pop_het_obs(include_global = TRUE) #>      pop1      pop2      pop3    global  #> 0.5000000 0.3333333 0.5000000 0.4444444   # To return by locus, set by_locus = TRUE example_gt %>% pop_het_obs(by_locus = TRUE) #>           pop1 pop2 pop3 #> [1,] 0.6666667  0.5  0.0 #> [2,] 0.6666667  0.0  0.5 #> [3,] 0.0000000  0.0  0.5 #> [4,] 1.0000000  0.5  0.0 #> [5,] 0.3333333  0.5  1.0 #> [6,] 0.3333333  0.5  1.0"},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/pop_tajimas_d.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate Tajima's D for the whole genome — pop_tajimas_d","title":"Estimate Tajima's D for the whole genome — pop_tajimas_d","text":"Note Tajima's D estimates data filtered ascertained can difficult interpret. function ideally used sequence data prior filtering.","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/pop_tajimas_d.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate Tajima's D for the whole genome — pop_tajimas_d","text":"","code":"pop_tajimas_d(.x, n_cores, block_size, ...)  # S3 method for class 'tbl_df' pop_tajimas_d(   .x,   n_cores = bigstatsr::nb_cores(),   block_size = bigstatsr::block_size(nrow(.x), 1),   ... )  # S3 method for class 'vctrs_bigSNP' pop_tajimas_d(   .x,   n_cores = bigstatsr::nb_cores(),   block_size = bigstatsr::block_size(length(.x), 1),   ... )  # S3 method for class 'grouped_df' pop_tajimas_d(   .x,   n_cores = bigstatsr::nb_cores(),   block_size = bigstatsr::block_size(nrow(.x), 1),   ... )"},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/pop_tajimas_d.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate Tajima's D for the whole genome — pop_tajimas_d","text":".x vector class vctrs_bigSNP (usually genotypes column gen_tibble object), gen_tibble. n_cores number cores used, defaults bigstatsr::nb_cores() block_size maximum number loci read . ... arguments passed specific methods, currently unused.","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/pop_tajimas_d.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate Tajima's D for the whole genome — pop_tajimas_d","text":"single numeric value (Tajima's D D) whole data set, NA statistic defined. grouped data list Tajima's D D values (one per group) returned.","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/pop_tajimas_d.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimate Tajima's D for the whole genome — pop_tajimas_d","text":"","code":"example_gt <- load_example_gt(\"grouped_gen_tbl\")  # Compute Tajima's D example_gt %>% pop_tajimas_d() #> [[1]] #> [1] 1.218829 #>  #> [[2]] #> [1] -0.780123 #>  #> [[3]] #> [1] 14.90782 #>"},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/predict_gt_pca.html","id":null,"dir":"Reference","previous_headings":"","what":"Predict scores of a PCA — predict.gt_pca","title":"Predict scores of a PCA — predict.gt_pca","text":"Predict PCA scores gt_pca, either original data projecting new data.","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/predict_gt_pca.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Predict scores of a PCA — predict.gt_pca","text":"","code":"# S3 method for class 'gt_pca' predict(   object,   new_data = NULL,   project_method = c(\"none\", \"simple\", \"OADP\", \"least_squares\"),   lsq_pcs = c(1, 2),   block_size = NULL,   n_cores = 1,   as_matrix = TRUE,   ... )"},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/predict_gt_pca.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Predict scores of a PCA — predict.gt_pca","text":"object gt_pca object new_data gen_tibble scores requested new dataset project_method string taking value either \"simple\", \"OADP\" (Online Augmentation, Decomposition, Procrustes (OADP) projection), \"least_squares\" (done SMARTPCA) lsq_pcs vector length two values two principal components use least square fitting. relevant ifproject_method = 'least_squares' block_size number loci read simultaneously (larger values speed computation, require memory) n_cores number cores as_matrix logical, whether return result matrix (default) tibble. ... used","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/predict_gt_pca.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Predict scores of a PCA — predict.gt_pca","text":"matrix predictions (line predict using prcomp object) tibble, samples rows components columns. number components depends many estimated gt_pca object.","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/predict_gt_pca.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Predict scores of a PCA — predict.gt_pca","text":"Zhang et al (2020). Fast robust ancestry prediction using principal component analysis  36(11): 3439–3446.","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/predict_gt_pca.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Predict scores of a PCA — predict.gt_pca","text":"","code":"# Create a gen_tibble of lobster genotypes bed_file <-   system.file(\"extdata\", \"lobster\", \"lobster.bed\", package = \"tidypopgen\") lobsters <- gen_tibble(bed_file,   backingfile = tempfile(\"lobsters\"),   quiet = TRUE )  # Remove monomorphic loci and impute lobsters <- lobsters %>% select_loci_if(loci_maf(genotypes) > 0) lobsters <- gt_impute_simple(lobsters, method = \"mode\")  # Subset into two datasets: one original and one to predict original_lobsters <- lobsters[c(1:150), ] new_lobsters <- lobsters[c(151:176), ]  # Create PCA object pca <- gt_pca_partialSVD(original_lobsters)  # Predict predict(pca, new_data = new_lobsters, project_method = \"simple\") #>              .PC1        .PC2        .PC3        .PC4        .PC5        .PC6 #> Vig11  0.84495324 -1.32057095  0.95199040  1.94839846  0.80850195 -2.48726987 #> Vig12 -0.07065694 -1.50166991  1.47821253 -0.65881868 -0.32228405  0.50084850 #> Vig13  0.58238791  0.39219100  0.99630978 -0.63288948 -1.20847141  1.38919001 #> Vig14 -1.99602145 -2.72731004  2.62251475 -1.98680500 -0.34075528 -0.12146277 #> Vig15  2.26512567 -0.95914412  0.02818837 -0.50138973  0.62787179 -0.64795356 #> Vig16 -1.61997544  0.15563731 -0.40919334  0.11173586  0.50622350  1.11854701 #> Vig17 -0.89287211 -3.18719723 -1.20601118  2.34870824 -2.33942914 -1.56549736 #> Vig18  1.05375670 -6.10652671 -0.82400057 -0.09187650  0.69699406 -1.40561403 #> Vig19 -1.17999551 -2.76944741  1.15010211 -1.20380960  0.24458605 -0.33721468 #> Vig20 -1.13094344 -2.51297661  1.29598913 -1.95585394 -1.40074692 -1.72114107 #> Vig21  1.45168737 -3.78272355 -0.65105851  1.25919966 -0.05981051 -0.72402871 #> Vig22  3.21701452 -4.81619496  1.41010615 -0.35000653  1.17661661 -2.28860783 #> Vig23 -1.90947818 -2.65470446 -0.37492036 -0.29023475 -2.52320183 -0.30582156 #> Vig24  1.28030055 -0.07325206  1.09767261  0.03358915 -1.70200452  0.14763356 #> Vig25 -2.52427515  0.39525228  0.57686195 -1.08051656 -0.36361029  0.71910092 #> Vig26 -0.75644140 -4.01534680  1.22994589  1.73545488 -1.08699849  0.77562836 #> Vig27  1.70410788 -0.05110208  1.16705289  1.26292192 -0.14261284 -0.59887368 #> Vig28 -0.21966527 -1.09228344  1.82206389 -0.11802565 -0.81543990 -1.93059542 #> Vig29 -1.80466347 -1.03162891  2.07763585 -0.30734296  1.41805841 -1.44704073 #> Vig30  0.69482871 -0.79526772  0.91429649 -0.73744265  0.63946822 -0.00832335 #> Vig31  0.28195945 -6.36122988  0.56220908  0.58385324  0.78660638 -2.00252223 #> Vig32 -0.93086395 -2.42914291  0.98211553 -0.10126105  0.17805143  0.96874494 #> Vig33 -0.37248494 -3.62456011  0.65785222  0.40916552 -0.56166707  0.26276509 #> Vig34 -0.30753874 -6.81517053 -1.18709724 -0.09927797 -1.72030191 -1.27847587 #> Vig35 -2.43398848  0.60635980 -1.25686251  0.32353264 -0.15047601  1.41621901 #> Vig36  1.46467362 -4.46678967  2.53264029 -1.12870891 -0.20734613 -1.62905258 #>              .PC7        .PC8        .PC9       .PC10 #> Vig11  1.52777096 -1.51131063  0.74038292  0.01516207 #> Vig12 -0.12498898 -1.68443455  0.56254200 -0.48023226 #> Vig13 -0.02183661  1.28402899 -0.53105701  0.39991004 #> Vig14 -1.09481998 -1.78278611  0.72962139  0.74706789 #> Vig15  2.52704695 -0.81028103  1.56008567  1.21557644 #> Vig16  2.00582704  0.54789136 -0.95219207  0.20802815 #> Vig17  1.66238380  0.50856597 -0.03069758  1.13355924 #> Vig18 -0.36586879 -1.80176553  1.02610432 -1.85184381 #> Vig19 -0.31767420 -0.73445721 -0.22502040 -0.21155048 #> Vig20  2.10001332 -0.18007731 -0.76794917  0.02148115 #> Vig21  2.14159315 -2.00469523 -1.51150345  0.26520736 #> Vig22  0.35367486 -0.92968102  1.07611369 -2.00758176 #> Vig23  1.66242946  0.01520255  1.36135538  0.81743107 #> Vig24  1.11196915  0.56990781  0.16502708  1.12759456 #> Vig25  0.79085512  1.63079533  0.33625704  1.32880574 #> Vig26 -0.80559424  0.35422467 -0.02250144 -3.08140603 #> Vig27  1.93681287 -1.54261398  1.95076197  1.56666492 #> Vig28  0.70739380 -0.95388559  1.45470073  0.38913439 #> Vig29  0.12506807  0.88350450  0.31998914  0.27068806 #> Vig30  0.42978594 -0.75662056  0.38966104  0.22344619 #> Vig31  0.72805753  0.71855592  0.24921606  0.42971234 #> Vig32 -0.35527173 -1.01854014 -0.55387443  1.04468276 #> Vig33  0.02694817 -1.19006766  0.27706970 -2.34531402 #> Vig34  0.53566592  1.62395351  0.75212462 -0.61787774 #> Vig35  0.65649555 -1.25456935 -0.63035895 -0.19707490 #> Vig36  2.06423654 -1.37240744  1.98663932 -0.75062139  # Predict with OADP predict(pca, new_data = new_lobsters, project_method = \"OADP\") #>              .PC1        .PC2        .PC3       .PC4        .PC5       .PC6 #> Vig11  0.89730930 -1.46636303  1.14351172  2.4359043  1.01915444 -3.1448299 #> Vig12 -0.07420107 -1.63420957  1.71061677 -0.7861686 -0.38700249  0.6028120 #> Vig13  0.62705559  0.44619604  1.25001301 -0.8350496 -1.61118140  1.8592399 #> Vig14 -2.08080051 -2.93066453  2.96913603 -2.3086783 -0.39806609 -0.1421679 #> Vig15  2.41022742 -1.06868561  0.03406264 -0.6314546  0.79751036 -0.8256000 #> Vig16 -1.72395889  0.17340689 -0.49408163  0.1405351  0.64206631  1.4230896 #> Vig17 -0.95308173 -3.57268268 -1.47493051  3.0038994 -3.01982148 -2.0276899 #> Vig18  1.11663168 -6.75697692 -0.98416390 -0.1140875  0.87244710 -1.7646337 #> Vig19 -1.24474568 -3.03780815  1.34981119 -1.4616112  0.29903569 -0.4133387 #> Vig20 -1.18708181 -2.73309619  1.49915896 -2.3335754 -1.68188082 -2.0713907 #> Vig21  1.53291181 -4.15843943 -0.76801709  1.5393596 -0.07365531 -0.8940289 #> Vig22  3.33481205 -5.12508629  1.56964673 -0.3984072  1.34543129 -2.6213354 #> Vig23 -2.01596603 -2.91707173 -0.44175403 -0.3542353 -3.10193978 -0.3769667 #> Vig24  1.37208979 -0.08264588  1.35614475  0.0434720 -2.22400661  0.1935946 #> Vig25 -2.64033034  0.42714612  0.65939444 -1.2701136 -0.42985734  0.8518972 #> Vig26 -0.79477312 -4.37544584  1.42836887  2.0811726 -1.31214200  0.9385453 #> Vig27  1.77091305 -0.05460700  1.30822356  1.4497249 -0.16450152 -0.6920186 #> Vig28 -0.23248841 -1.20534202  2.16272138 -0.1453498 -1.01184624 -2.4022659 #> Vig29 -1.91695225 -1.14571184  2.49432338 -0.3838393  1.78543395 -1.8273672 #> Vig30  0.73195749 -0.87012898  1.06793256 -0.8899979  0.77693514 -0.0101375 #> Vig31  0.29032128 -6.68971489  0.61286540  0.6477985  0.87589060 -2.2327502 #> Vig32 -0.97131000 -2.61395894  1.11403133 -0.1179058  0.20842652  1.1362299 #> Vig33 -0.39104264 -3.94297198  0.76113873  0.4882581 -0.67448688  0.3162787 #> Vig34 -0.32650580 -7.56719576 -1.42692375 -0.1242634 -2.17127575 -1.6185803 #> Vig35 -2.58340808  0.67242234 -1.50457785  0.4025691 -0.18872917  1.7814357 #> Vig36  1.53813454 -4.86368857  2.93793415 -1.3518221 -0.24996330 -1.9686106 #>              .PC7       .PC8        .PC9       .PC10 #> Vig11  1.95234868 -1.9642099  0.98197318  0.02028417 #> Vig12 -0.15165556 -2.0700794  0.70196060 -0.60314481 #> Vig13 -0.02962272  1.7797042 -0.75539295  0.57518975 #> Vig14 -1.29022953 -2.1237486  0.88040369  0.90637989 #> Vig15  3.25554347 -1.0622741  2.08867165  1.64207875 #> Vig16  2.57978692  0.7168963 -1.27191013  0.28033492 #> Vig17  2.17912415  0.6794603 -0.04196384  1.56483356 #> Vig18 -0.46409685 -2.3233174  1.34945373 -2.45593814 #> Vig19 -0.39289152 -0.9213192 -0.28709492 -0.27186024 #> Vig20  2.54807945 -0.2213368 -0.95857439  0.02698959 #> Vig21  2.66956533 -2.5366278 -1.94721012  0.34427612 #> Vig22  0.40746993 -1.0810077  1.26508571 -2.37112079 #> Vig23  2.06837911  0.0191963  1.74966644  1.05853075 #> Vig24  1.47636775  0.7717487  0.22884625  1.57960635 #> Vig25  0.94380702  1.9688776  0.41161891  1.63618425 #> Vig26 -0.98311420  0.4381242 -0.02828174 -3.89951777 #> Vig27  2.25202988 -1.8113689  2.31756977  1.87049387 #> Vig28  0.88885861 -1.2172637  1.89109084  0.50987644 #> Vig29  0.15960429  1.1463640  0.42355155  0.36135013 #> Vig30  0.52799439 -0.9422649  0.49323663  0.28480387 #> Vig31  0.81550363  0.8107047  0.28360218  0.49078167 #> Vig32 -0.41956110 -1.2159306 -0.66979029  1.27023446 #> Vig33  0.03270156 -1.4628520  0.34585806 -2.94677444 #> Vig34  0.68551631  2.1140967  0.99945645 -0.82828812 #> Vig35  0.83430956 -1.6204983 -0.83024434 -0.26173005 #> Vig36  2.51565901 -1.6950287  2.49319130 -0.94843772  # Predict with least squares predict(pca,   new_data = new_lobsters,   project_method = \"least_squares\", lsq_pcs = c(1, 2) ) #>             .PC1        .PC2 #> Vig11  0.8449532 -1.32057095 #> Vig12 -0.1088606 -1.79996190 #> Vig13  0.5823879  0.39219100 #> Vig14 -1.9960214 -2.72731004 #> Vig15  2.2651257 -0.95914412 #> Vig16 -1.6199754  0.15563731 #> Vig17 -1.0314321 -3.23991878 #> Vig18  1.0537567 -6.10652671 #> Vig19 -1.1799955 -2.76944741 #> Vig20 -1.1309434 -2.51297661 #> Vig21  1.4516874 -3.78272355 #> Vig22  3.2170145 -4.81619496 #> Vig23 -1.9094782 -2.65470446 #> Vig24  1.2803005 -0.07325206 #> Vig25 -2.5242751  0.39525228 #> Vig26 -0.7564414 -4.01534680 #> Vig27  1.7041079 -0.05110208 #> Vig28 -0.2233053 -1.09747960 #> Vig29 -1.8046635 -1.03162891 #> Vig30  0.6934134 -0.79727293 #> Vig31  0.2819594 -6.36122988 #> Vig32 -0.9308639 -2.42914291 #> Vig33 -0.3724849 -3.62456011 #> Vig34 -0.2919582 -6.89773149 #> Vig35 -2.4364457  0.61938077 #> Vig36  1.4646736 -4.46678967  # Return a tibble predict(pca, new_data = new_lobsters, as_matrix = FALSE) #> # A tibble: 26 × 11 #>    id      .PC1   .PC2    .PC3    .PC4   .PC5   .PC6    .PC7   .PC8   .PC9 #>    <chr>  <dbl>  <dbl>   <dbl>   <dbl>  <dbl>  <dbl>   <dbl>  <dbl>  <dbl> #>  1 Vig11  0.845 -1.32   0.952   1.95    0.809 -2.49   1.53   -1.51   0.740 #>  2 Vig12 -0.746 -1.19   1.34   -0.726  -0.481  0.306 -0.180  -1.88   0.511 #>  3 Vig13  0.582  0.392  0.996  -0.633  -1.21   1.39  -0.0218  1.28  -0.531 #>  4 Vig14 -2.00  -2.73   2.62   -1.99   -0.341 -0.121 -1.09   -1.78   0.730 #>  5 Vig15  2.27  -0.959  0.0282 -0.501   0.628 -0.648  2.53   -0.810  1.56  #>  6 Vig16 -1.62   0.156 -0.409   0.112   0.506  1.12   2.01    0.548 -0.952 #>  7 Vig17 -1.11  -3.27  -1.24    2.28   -2.37  -1.54   1.67    0.428 -0.176 #>  8 Vig18  1.05  -6.11  -0.824  -0.0919  0.697 -1.41  -0.366  -1.80   1.03  #>  9 Vig19 -1.18  -2.77   1.15   -1.20    0.245 -0.337 -0.318  -0.734 -0.225 #> 10 Vig20 -1.13  -2.51   1.30   -1.96   -1.40  -1.72   2.10   -0.180 -0.768 #> # ℹ 16 more rows #> # ℹ 1 more variable: .PC10 <dbl>  # Adjust block.size predict(pca, new_data = new_lobsters, block_size = 10) #>             .PC1        .PC2        .PC3        .PC4        .PC5        .PC6 #> Vig11  0.8449532 -1.32057095  0.95199040  1.94839846  0.80850195 -2.48726987 #> Vig12 -0.7461382 -1.18627774  1.34460570 -0.72604859 -0.48069122  0.30572175 #> Vig13  0.5823879  0.39219100  0.99630978 -0.63288948 -1.20847141  1.38919001 #> Vig14 -1.9960214 -2.72731004  2.62251475 -1.98680500 -0.34075528 -0.12146277 #> Vig15  2.2651257 -0.95914412  0.02818837 -0.50138973  0.62787179 -0.64795356 #> Vig16 -1.6199754  0.15563731 -0.40919334  0.11173586  0.50622350  1.11854701 #> Vig17 -1.1110388 -3.27020882 -1.23906625  2.28063954 -2.37335730 -1.54383228 #> Vig18  1.0537567 -6.10652671 -0.82400057 -0.09187650  0.69699406 -1.40561403 #> Vig19 -1.1799955 -2.76944741  1.15010211 -1.20380960  0.24458605 -0.33721468 #> Vig20 -1.1309434 -2.51297661  1.29598913 -1.95585394 -1.40074692 -1.72114107 #> Vig21  1.4516874 -3.78272355 -0.65105851  1.25919966 -0.05981051 -0.72402871 #> Vig22  3.2170145 -4.81619496  1.41010615 -0.35000653  1.17661661 -2.28860783 #> Vig23 -1.9094782 -2.65470446 -0.37492036 -0.29023475 -2.52320183 -0.30582156 #> Vig24  1.2803005 -0.07325206  1.09767261  0.03358915 -1.70200452  0.14763356 #> Vig25 -2.5242751  0.39525228  0.57686195 -1.08051656 -0.36361029  0.71910092 #> Vig26 -0.7564414 -4.01534680  1.22994589  1.73545488 -1.08699849  0.77562836 #> Vig27  1.7041079 -0.05110208  1.16705289  1.26292192 -0.14261284 -0.59887368 #> Vig28 -0.1765855 -1.03078650  1.97855185 -0.22492693 -0.96831542 -2.02312805 #> Vig29 -1.8046635 -1.03162891  2.07763585 -0.30734296  1.41805841 -1.44704073 #> Vig30  0.7479859 -0.71995438  1.08461798 -0.80963486  0.63013991 -0.05207368 #> Vig31  0.2819594 -6.36122988  0.56220908  0.58385324  0.78660638 -2.00252223 #> Vig32 -0.9308639 -2.42914291  0.98211553 -0.10126105  0.17805143  0.96874494 #> Vig33 -0.3724849 -3.62456011  0.65785222  0.40916552 -0.56166707  0.26276509 #> Vig34 -0.3262743 -6.71589081 -1.14051137 -0.12775555 -1.68695822 -1.41827318 #> Vig35 -2.4527241  0.70563952 -1.21027664  0.29505506 -0.11713232  1.27642171 #> Vig36  1.4646736 -4.46678967  2.53264029 -1.12870891 -0.20734613 -1.62905258 #>              .PC7        .PC8        .PC9       .PC10 #> Vig11  1.52777096 -1.51131063  0.74038292  0.01516207 #> Vig12 -0.17965094 -1.88387628  0.51083352 -0.33320105 #> Vig13 -0.02183661  1.28402899 -0.53105701  0.39991004 #> Vig14 -1.09481998 -1.78278611  0.72962139  0.74706789 #> Vig15  2.52704695 -0.81028103  1.56008567  1.21557644 #> Vig16  2.00582704  0.54789136 -0.95219207  0.20802815 #> Vig17  1.67054359  0.42798506 -0.17562231  1.20681868 #> Vig18 -0.36586879 -1.80176553  1.02610432 -1.85184381 #> Vig19 -0.31767420 -0.73445721 -0.22502040 -0.21155048 #> Vig20  2.10001332 -0.18007731 -0.76794917  0.02148115 #> Vig21  2.14159315 -2.00469523 -1.51150345  0.26520736 #> Vig22  0.35367486 -0.92968102  1.07611369 -2.00758176 #> Vig23  1.66242946  0.01520255  1.36135538  0.81743107 #> Vig24  1.11196915  0.56990781  0.16502708  1.12759456 #> Vig25  0.79085512  1.63079533  0.33625704  1.32880574 #> Vig26 -0.80559424  0.35422467 -0.02250144 -3.08140603 #> Vig27  1.93681287 -1.54261398  1.95076197  1.56666492 #> Vig28  0.56401377 -0.97511516  1.32664358  0.44977954 #> Vig29  0.12506807  0.88350450  0.31998914  0.27068806 #> Vig30  0.41996665 -0.90250715  0.30991115  0.25806489 #> Vig31  0.72805753  0.71855592  0.24921606  0.42971234 #> Vig32 -0.35527173 -1.01854014 -0.55387443  1.04468276 #> Vig33  0.02694817 -1.19006766  0.27706970 -2.34531402 #> Vig34  0.51631535  1.67658793  0.68897116 -0.66022471 #> Vig35  0.63714498 -1.20193493 -0.69351240 -0.23942188 #> Vig36  2.06423654 -1.37240744  1.98663932 -0.75062139"},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/q_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a standard matrix to a q_matrix object — q_matrix","title":"Convert a standard matrix to a q_matrix object — q_matrix","text":"Takes single Q matrix exists either matrix data frame returns q_matrix object.","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/q_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a standard matrix to a q_matrix object — q_matrix","text":"","code":"q_matrix(x)"},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/q_matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a standard matrix to a q_matrix object — q_matrix","text":"x matrix data frame","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/q_matrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert a standard matrix to a q_matrix object — q_matrix","text":"q_matrix object","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/q_matrix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert a standard matrix to a q_matrix object — q_matrix","text":"","code":"# Read in a single .Q file q_mat <- read.table(system.file(\"extdata\", \"anolis\", \"anolis_ld_run1.3.Q\",   package = \"tidypopgen\" )) class(q_mat) #> [1] \"data.frame\"  # Convert to a Q matrix object q_mat <- q_matrix(q_mat) class(q_mat) #> [1] \"q_matrix\" \"matrix\"   \"array\""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/qc_report_indiv.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a Quality Control report for individuals — qc_report_indiv","title":"Create a Quality Control report for individuals — qc_report_indiv","text":"Return QC information assess loci (Observed heterozygosity missingness).","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/qc_report_indiv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Quality Control report for individuals — qc_report_indiv","text":"","code":"qc_report_indiv(.x, ...)  # S3 method for class 'tbl_df' qc_report_indiv(.x, kings_threshold = NULL, ...)  # S3 method for class 'grouped_df' qc_report_indiv(.x, kings_threshold = NULL, ...)"},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/qc_report_indiv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Quality Control report for individuals — qc_report_indiv","text":".x either gen_tibble object grouped gen_tibble (obtained using dplyr::group_by()) ... arguments pass kings_threshold optional numeric giving KING kinship coefficient, one : \"first\": removing first degree relatives, equivalent kinship coefficient 0.177 \"second\": removing second degree relatives, equivalent kinship coefficient 0.088 ","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/qc_report_indiv.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a Quality Control report for individuals — qc_report_indiv","text":"kings_threshold provided, tibble 2 elements: het_obs missingness. kings_threshold provided, tibble 4 elements: het_obs, missingness, id to_keep.","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/qc_report_indiv.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a Quality Control report for individuals — qc_report_indiv","text":"Providing parameter kings_threshold return two additional columns, 'id' containing ID individuals, 'to_keep' logical vector describing whether individual removed retain largest possible set individuals relationships threshold. calculated pairwise KING relationship matrix also returned attribute 'to_keep'. kings_threshold parameter can either numeric KING kinship coefficient string either \"first\" \"second\", remove first degree second degree relationships dataset. second option similar using  –unrelated –degree 1 –unrelated –degree 2 KING.","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/qc_report_indiv.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a Quality Control report for individuals — qc_report_indiv","text":"","code":"# Create a gen_tibble of lobster genotypes bed_file <-   system.file(\"extdata\", \"lobster\", \"lobster.bed\", package = \"tidypopgen\") example_gt <- gen_tibble(bed_file,   backingfile = tempfile(\"lobsters\"),   quiet = TRUE )  # Get QC report for individuals example_gt %>% qc_report_indiv() #> # A tibble: 176 × 2 #>    het_obs missingness #>      <dbl>       <dbl> #>  1  0.0769      0.506  #>  2  0.429       0.0253 #>  3  0           0.494  #>  4  0.0930      0.456  #>  5  0.0222      0.430  #>  6  0.0833      0.544  #>  7  0.0476      0.468  #>  8  0.329       0.114  #>  9  0.217       0.127  #> 10  0.0857      0.557  #> # ℹ 166 more rows  # Get QC report with kinship filtering example_gt %>% qc_report_indiv(kings_threshold = \"first\") #> # A tibble: 176 × 4 #>    het_obs missingness to_keep id    #>      <dbl>       <dbl> <lgl>   <chr> #>  1  0.0769      0.506  FALSE   Ale04 #>  2  0.429       0.0253 FALSE   Ale05 #>  3  0           0.494  FALSE   Ale06 #>  4  0.0930      0.456  FALSE   Ale08 #>  5  0.0222      0.430  FALSE   Ale13 #>  6  0.0833      0.544  FALSE   Ale15 #>  7  0.0476      0.468  FALSE   Ale16 #>  8  0.329       0.114  FALSE   Ale17 #>  9  0.217       0.127  FALSE   Ale18 #> 10  0.0857      0.557  FALSE   Ale19 #> # ℹ 166 more rows"},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/qc_report_loci.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a Quality Control report for loci — qc_report_loci","title":"Create a Quality Control report for loci — qc_report_loci","text":"Return QC information assess loci (MAF, missingness HWE test).","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/qc_report_loci.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Quality Control report for loci — qc_report_loci","text":"","code":"qc_report_loci(.x, ...)  # S3 method for class 'tbl_df' qc_report_loci(.x, ...)  # S3 method for class 'grouped_df' qc_report_loci(.x, ...)"},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/qc_report_loci.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Quality Control report for loci — qc_report_loci","text":".x gen_tibble object. ... currently unused HWE test.","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/qc_report_loci.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a Quality Control report for loci — qc_report_loci","text":"tibble 3 elements: maf, missingness hwe_p","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/qc_report_loci.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a Quality Control report for loci — qc_report_loci","text":"","code":"# Create a gen_tibble of lobster genotypes bed_file <-   system.file(\"extdata\", \"lobster\", \"lobster.bed\", package = \"tidypopgen\") example_gt <- gen_tibble(bed_file,   backingfile = tempfile(\"lobsters\"),   quiet = TRUE )  # Get a QC report for the loci example_gt %>% qc_report_loci() #> This gen_tibble is not grouped. For Hardy-Weinberg equilibrium, `qc_report_loci()` will assume individuals are part of the same population and HWE test p-values will be calculated across all individuals. If you wish to calculate HWE p-values within populations or groups, please use`group_by()` before calling `qc_report_loci()`. #> # A tibble: 79 × 4 #>    snp_id    maf missingness       hwe_p #>    <chr>   <dbl>       <dbl>       <dbl> #>  1 rs3441  0.328      0.0227 0.440       #>  2 rs4173  0.424      0.0341 0.584       #>  3 rs6157  0.278      0.0284 0.00293     #>  4 rs7502  0.423      0.0455 0.479       #>  5 rs7892  0.101      0.0170 0.305       #>  6 rs9441  0.307      0.0739 0.784       #>  7 rs11071 0.123      0.0284 0.00299     #>  8 rs11183 0.458      0.0568 0.102       #>  9 rs11291 0.244      0.0455 0.000000944 #> 10 rs12971 0.312      0.0625 0.0242      #> # ℹ 69 more rows  # Group by population to calculate HWE within populations example_gt <- example_gt %>% group_by(population) example_gt %>% qc_report_loci() #> # A tibble: 79 × 4 #>    snp_id    maf missingness  hwe_p #>    <chr>   <dbl>       <dbl>  <dbl> #>  1 rs3441  0.328      0.0227 0.850  #>  2 rs4173  0.424      0.0341 0.546  #>  3 rs6157  0.278      0.0284 0.0834 #>  4 rs7502  0.423      0.0455 1.17   #>  5 rs7892  0.101      0.0170 0.298  #>  6 rs9441  0.307      0.0739 1.83   #>  7 rs11071 0.123      0.0284 0.0143 #>  8 rs11183 0.458      0.0568 1.15   #>  9 rs11291 0.244      0.0455 0.391  #> 10 rs12971 0.312      0.0625 0.112  #> # ℹ 69 more rows"},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/rbind.gen_tbl.html","id":null,"dir":"Reference","previous_headings":"","what":"Combine two gen_tibbles — rbind.gen_tbl","title":"Combine two gen_tibbles — rbind.gen_tbl","text":"function combined two gen_tibbles. defaults, subsets loci swaps ref alt alleles make two datasets compatible (behaviour can switched as_is). first object used \"reference\" , SNPs dataset flipped /alleles swapped needed. SNPs different alleles two datasets (.e. triallelic) also dropped. also options (default) attempt strand flipping match alleles (often needed human datasets different SNP chips), remove ambiguous alleles (C/G /T) correct strand can guessed.","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/rbind.gen_tbl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Combine two gen_tibbles — rbind.gen_tbl","text":"","code":"# S3 method for class 'gen_tbl' rbind(   ...,   as_is = FALSE,   flip_strand = FALSE,   use_position = FALSE,   quiet = FALSE,   backingfile = NULL )"},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/rbind.gen_tbl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Combine two gen_tibbles — rbind.gen_tbl","text":"... two gen_tibble objects. Note function can take objects, rbind done sequentially large sets objects. as_is boolean determining whether loci left merging. FALSE (defaults), rbind attempt subset swap alleles needed. flip_strand boolean whether strand flipping checked match two datasets. set TRUE, ambiguous SNPs (.e. /T C/G) also removed. defaults FALSE use_position boolean whether combination chromosome position used matching SNPs. default, rbind uses locus name, set FALSE. using 'use_position=TRUE', make sure chromosomes coded way gen_tibbles (mix e.g. 'chr1', '1' 'chromosome1' can reasons unexpectedly large number variants dropped merging). quiet boolean whether omit reporting screen backingfile path prefix files used store merged data (.RDS store bigSNP object .bk file backing file FBM)","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/rbind.gen_tbl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Combine two gen_tibbles — rbind.gen_tbl","text":"gen_tibble merged data.","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/rbind.gen_tbl.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Combine two gen_tibbles — rbind.gen_tbl","text":"rbind differs merging data plink, swaps order allele1 allele2 according minor allele frequency merging datasets. rbind flips /swaps alleles according reference dataset, according allele frequency.","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/rbind.gen_tbl.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Combine two gen_tibbles — rbind.gen_tbl","text":"","code":"example_gt <- load_example_gt(\"gen_tbl\")  # Create a second gen_tibble to merge test_indiv_meta <- data.frame(   id = c(\"x\", \"y\", \"z\"),   population = c(\"pop1\", \"pop1\", \"pop2\") ) test_genotypes <- rbind(   c(1, 1, 0, 1, 1, 0),   c(2, 1, 0, 0, 0, 0),   c(2, 2, 0, 0, 1, 1) ) test_loci <- data.frame(   name = paste0(\"rs\", 1:6),   chromosome = paste0(\"chr\", c(1, 1, 1, 1, 2, 2)),   position = as.integer(c(3, 5, 65, 343, 23, 456)),   genetic_dist = as.double(rep(0, 6)),   allele_ref = c(\"A\", \"T\", \"C\", \"G\", \"C\", \"T\"),   allele_alt = c(\"T\", \"C\", NA, \"C\", \"G\", \"A\") )  test_gt <- gen_tibble(   x = test_genotypes,   loci = test_loci,   indiv_meta = test_indiv_meta,   valid_alleles = c(\"A\", \"T\", \"C\", \"G\"),   quiet = TRUE )  # Merge the datasets using rbind merged_gt <- rbind(ref = example_gt, target = test_gt, flip_strand = TRUE) #> harmonising loci between two datasets #> flip_strand =  TRUE  ; remove_ambiguous =  TRUE  #> ----------------------------- #> dataset: reference  #> number of SNPs: 6 reduced to 2  #> ( 4 are ambiguous, of which 4  were removed) #> ----------------------------- #> dataset: target  #> number of SNPs: 6 reduced to 2  #> ( 0 were flipped to match the reference set) #> ( 4 are ambiguous, of which 4 were removed) #>  #> gen_tibble saved to /tmp/RtmpblzTyA/gt_merged_23976f05350a.gt #> using FBM RDS: /tmp/RtmpblzTyA/gt_merged_23976f05350a.rds #> with FBM backing file: /tmp/RtmpblzTyA/gt_merged_23976f05350a.bk #> make sure that you do NOT delete those files! #> to reload the gen_tibble in another session, use: #> gt_load('/tmp/RtmpblzTyA/gt_merged_23976f05350a.gt')  merged_gt #> # A gen_tibble: 2 loci #> # A tibble:     10 × 3 #>    id    population  genotypes #>    <chr> <chr>      <vctr_SNP> #>  1 a     pop1        [1,0,...] #>  2 b     pop1        [1,0,...] #>  3 c     pop2        [.,0,...] #>  4 d     pop2        [0,0,...] #>  5 e     pop1        [2,0,...] #>  6 f     pop3        [0,0,...] #>  7 g     pop3        [1,1,...] #>  8 x     pop1        [1,0,...] #>  9 y     pop1        [1,0,...] #> 10 z     pop2        [2,0,...]"},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/rbind_dry_run.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a report of what would happen to each SNP in a merge — rbind_dry_run","title":"Generate a report of what would happen to each SNP in a merge — rbind_dry_run","text":"function provides overview fate SNP two gen_tibble objects case merge. SNPs found objects kept. One object used reference, SNPs dataset flipped /alleles swapped needed. SNPs different alleles two datasets also dropped.","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/rbind_dry_run.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a report of what would happen to each SNP in a merge — rbind_dry_run","text":"","code":"rbind_dry_run(   ref,   target,   use_position = FALSE,   flip_strand = FALSE,   quiet = FALSE )"},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/rbind_dry_run.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a report of what would happen to each SNP in a merge — rbind_dry_run","text":"ref either gen_tibble object, path PLINK bim file; alleles objects used template flip ones target /swap order necessary. target either gen_tibble object, path PLINK bim file use_position boolean whether combination chromosome position used matching SNPs. default, rbind uses locus name, set FALSE. using 'use_position=TRUE', make sure chromosomes coded way gen_tibbles (mix e.g. 'chr1', '1' 'chromosome1' can reasons unexpectedly large number variants dropped merging). flip_strand boolean whether strand flipping checked match two datasets. Ambiguous SNPs (.e. /T C/G) also removed.  defaults FALSE quiet boolean whether omit reporting screen","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/rbind_dry_run.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate a report of what would happen to each SNP in a merge — rbind_dry_run","text":"list two data.frames, named target ref. data.frame nrow() equal number loci respective dataset, column id locus name, boolean columns to_keep (valid loci kept merge), alleles_mismatched (loci found datasets mismatched alleles, leading loci dropped), to_flip (loci need flipped align two datasets, found target data.frame) to_swap (loci order alleles needs swapped align two datasets, target data.frame)","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/rbind_dry_run.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate a report of what would happen to each SNP in a merge — rbind_dry_run","text":"","code":"example_gt <- load_example_gt(\"gen_tbl\")  # Create a second gen_tibble to merge test_indiv_meta <- data.frame(   id = c(\"x\", \"y\", \"z\"),   population = c(\"pop1\", \"pop1\", \"pop2\") ) test_genotypes <- rbind(   c(1, 1, 2, 1, 1),   c(2, 1, 2, 0, 0),   c(2, 2, 2, 0, 1) ) test_loci <- data.frame(   name = paste0(\"rs\", 1:5),   chromosome = paste0(\"chr\", c(1, 1, 1, 1, 2)),   position = as.integer(c(3, 5, 65, 343, 23)),   genetic_dist = as.double(rep(0, 5)),   allele_ref = c(\"A\", \"T\", \"C\", \"G\", \"C\"),   allele_alt = c(\"T\", \"C\", NA, \"C\", \"G\") )  test_gt <- gen_tibble(   x = test_genotypes,   loci = test_loci,   indiv_meta = test_indiv_meta,   valid_alleles = c(\"A\", \"T\", \"C\", \"G\"),   quiet = TRUE )  # Create an rbind report using rbind_dry_run rbind_dry_run(example_gt, test_gt, flip_strand = TRUE) #> harmonising loci between two datasets #> flip_strand =  TRUE  ; remove_ambiguous =  TRUE  #> ----------------------------- #> dataset: reference  #> number of SNPs: 6 reduced to 2  #> ( 4 are ambiguous, of which 4  were removed) #> ----------------------------- #> dataset: target  #> number of SNPs: 5 reduced to 2  #> ( 0 were flipped to match the reference set) #> ( 3 are ambiguous, of which 3 were removed) #> $target #>   id new_id name to_flip to_swap missing_allele ambiguous #> 1  1     NA  rs1   FALSE   FALSE             NA      TRUE #> 2  2      1  rs2   FALSE   FALSE             NA     FALSE #> 3  3      2  rs3   FALSE   FALSE             NA     FALSE #> 4  4     NA  rs4   FALSE   FALSE             NA      TRUE #> 5  5     NA  rs5   FALSE   FALSE             NA      TRUE #>  #> $ref #>   id new_id name missing_allele ambiguous #> 1  1     NA  rs1             NA      TRUE #> 2  2      1  rs2             NA     FALSE #> 3  3      2  rs3             NA     FALSE #> 4  4     NA  rs4             NA      TRUE #> 5  5     NA  rs5             NA      TRUE #> 6  6     NA  rs6             NA      TRUE #>  #> attr(,\"class\") #> [1] \"rbind_report\" \"list\"         #> attr(,\"flip_strand\") #> [1] TRUE #> attr(,\"remove_ambiguous\") #> [1] TRUE"},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/read_q_files.html","id":null,"dir":"Reference","previous_headings":"","what":"Read and structure .Q files or existing matrices as q_matrix or gt_admix objects. — read_q_files","title":"Read and structure .Q files or existing matrices as q_matrix or gt_admix objects. — read_q_files","text":"function reads .Q matrix files generated external clustering algorithms (ADMIXTURE) transforms gt_admix objects.","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/read_q_files.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read and structure .Q files or existing matrices as q_matrix or gt_admix objects. — read_q_files","text":"","code":"read_q_files(x)"},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/read_q_files.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read and structure .Q files or existing matrices as q_matrix or gt_admix objects. — read_q_files","text":"x can : path directory containing .Q files","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/read_q_files.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read and structure .Q files or existing matrices as q_matrix or gt_admix objects. — read_q_files","text":"gt_admix object containing list Q matrices list indices Q matrix separated K","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/read_q_files.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read and structure .Q files or existing matrices as q_matrix or gt_admix objects. — read_q_files","text":"","code":"q_files_path <- system.file(\"extdata\", \"anolis\", package = \"tidypopgen\")  admix_obj <- read_q_files(q_files_path) summary(admix_obj) #> Admixture results for multiple runs:      #> k 3 4 #> n 1 1 #> with slots: #> $Q for Q matrices"},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/reexports.html","id":null,"dir":"Reference","previous_headings":"","what":"Objects exported from other packages — reexports","title":"Objects exported from other packages — reexports","text":"objects imported packages. Follow links see documentation. generics augment, tidy ggplot2 autoplot","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/scale_fill_distruct.html","id":null,"dir":"Reference","previous_headings":"","what":"Scale constructor using the distruct colours — scale_fill_distruct","title":"Scale constructor using the distruct colours — scale_fill_distruct","text":"wrapper around ggplot2::scale_fill_manual(), using distruct colours distruct_colours.","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/scale_fill_distruct.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Scale constructor using the distruct colours — scale_fill_distruct","text":"","code":"scale_fill_distruct(guide = \"none\", ...)"},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/scale_fill_distruct.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Scale constructor using the distruct colours — scale_fill_distruct","text":"guide guide function passed ggplot2::scale_fill_manual(). Defaults \"none\", set \"legend\" legend required. ... parameters passed ggplot2::scale_fill_manual()","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/scale_fill_distruct.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Scale constructor using the distruct colours — scale_fill_distruct","text":"scale constructor used ggplot","code":""},{"path":[]},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/scale_fill_distruct.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Scale constructor using the distruct colours — scale_fill_distruct","text":"","code":"library(ggplot2) # Create a gen_tibble of lobster genotypes bed_file <-   system.file(\"extdata\", \"lobster\", \"lobster.bed\", package = \"tidypopgen\") lobsters <- gen_tibble(bed_file,   backingfile = tempfile(\"lobsters\"),   quiet = TRUE )  # Remove monomorphic loci and impute lobsters <- lobsters %>% select_loci_if(loci_maf(genotypes) > 0) lobsters <- gt_impute_simple(lobsters, method = \"mode\")  # Create PCA object pca <- gt_pca_partialSVD(lobsters)  # Colour by population autoplot(pca, type = \"scores\") +   aes(colour = lobsters$population) + scale_fill_distruct()"},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/select_loci.html","id":null,"dir":"Reference","previous_headings":"","what":"The select verb for loci — select_loci","title":"The select verb for loci — select_loci","text":"equivalent dplyr::select() works genotype column gen_tibble, using mini-grammar available tidyselect. select-like evaluation access names loci (.e. can select based names, summary statistics loci; look select_loci_if() feature.","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/select_loci.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The select verb for loci — select_loci","text":"","code":"select_loci(.data, .sel_arg)"},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/select_loci.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The select verb for loci — select_loci","text":".data gen_tibble .sel_arg one unquoted expression, using mini-grammar dplyr::select() select loci. Variable names can used positions data frame, expressions like x:y can used select range variables.","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/select_loci.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"The select verb for loci — select_loci","text":"gen_tibble subset loci.","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/select_loci.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"The select verb for loci — select_loci","text":"Note select_loci verb modify backing FBM files, rather subsets list loci used stored gen_tibble.","code":""},{"path":[]},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/select_loci.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"The select verb for loci — select_loci","text":"","code":"example_gt <- load_example_gt(\"gen_tbl\")  # Select loci by name example_gt_subset <- example_gt %>%   select_loci(all_of(c(\"rs1\", \"rs2\", \"rs3\"))) show_loci(example_gt_subset) #> # A tibble: 3 × 7 #>   big_index name  chromosome position genetic_dist allele_ref allele_alt #>       <int> <chr> <fct>         <int>        <dbl> <chr>      <chr>      #> 1         1 rs1   chr1              3            0 A          T          #> 2         2 rs2   chr1              5            0 T          C          #> 3         3 rs3   chr1             65            0 C          NA          # Select loci by index example_gt_subset <- example_gt %>% select_loci(all_of(c(4, 2, 1))) show_loci(example_gt_subset) #> # A tibble: 3 × 7 #>   big_index name  chromosome position genetic_dist allele_ref allele_alt #>       <int> <chr> <fct>         <int>        <dbl> <chr>      <chr>      #> 1         4 rs4   chr1            343            0 G          C          #> 2         2 rs2   chr1              5            0 T          C          #> 3         1 rs1   chr1              3            0 A          T"},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/select_loci_if.html","id":null,"dir":"Reference","previous_headings":"","what":"The select_if verb for loci — select_loci_if","title":"The select_if verb for loci — select_loci_if","text":"equivalent dplyr::select_if() works genotype column gen_tibble. function access genotypes (thus can work summary statistics select), names loci (look select_loci() feature.","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/select_loci_if.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The select_if verb for loci — select_loci_if","text":"","code":"select_loci_if(.data, .sel_logical)"},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/select_loci_if.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The select_if verb for loci — select_loci_if","text":".data gen_tibble .sel_logical logical vector length equal number loci, expression tidy evaluate vector. loci .sel_logical TRUE selected; NA treated FALSE.","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/select_loci_if.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"The select_if verb for loci — select_loci_if","text":"subset list loci gen_tibble","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/select_loci_if.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"The select_if verb for loci — select_loci_if","text":"Note select_loci_if verb modify backing FBM files, rather subsets list loci used stored gen_tibble.","code":""},{"path":[]},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/select_loci_if.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"The select_if verb for loci — select_loci_if","text":"","code":"example_gt <- load_example_gt(\"gen_tbl\")  # Select loci by chromosome example_gt_subset <- example_gt %>%   select_loci_if(loci_chromosomes(genotypes) == \"chr2\") show_loci(example_gt_subset) #> # A tibble: 2 × 7 #>   big_index name  chromosome position genetic_dist allele_ref allele_alt #>       <int> <chr> <fct>         <int>        <dbl> <chr>      <chr>      #> 1         5 rs5   chr2             23            0 C          G          #> 2         6 rs6   chr2            456            0 T          A           # Select loci by a summary statistic example_gt_subset <- example_gt %>%   select_loci_if(loci_maf(genotypes) > 0.2) show_loci(example_gt_subset) #> # A tibble: 5 × 7 #>   big_index name  chromosome position genetic_dist allele_ref allele_alt #>       <int> <chr> <fct>         <int>        <dbl> <chr>      <chr>      #> 1         1 rs1   chr1              3            0 A          T          #> 2         2 rs2   chr1              5            0 T          C          #> 3         4 rs4   chr1            343            0 G          C          #> 4         5 rs5   chr2             23            0 C          G          #> 5         6 rs6   chr2            456            0 T          A"},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/show_genotypes.html","id":null,"dir":"Reference","previous_headings":"","what":"Show the genotypes of a gen_tibble — show_genotypes","title":"Show the genotypes of a gen_tibble — show_genotypes","text":"Extract genotypes (matrix)  gen_tibble.","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/show_genotypes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Show the genotypes of a gen_tibble — show_genotypes","text":"","code":"show_genotypes(.x, indiv_indices = NULL, loci_indices = NULL, ...)  # S3 method for class 'tbl_df' show_genotypes(.x, indiv_indices = NULL, loci_indices = NULL, ...)  # S3 method for class 'vctrs_bigSNP' show_genotypes(.x, indiv_indices = NULL, loci_indices = NULL, ...)"},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/show_genotypes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Show the genotypes of a gen_tibble — show_genotypes","text":".x vector class vctrs_bigSNP (usually genotype column gen_tibble object), gen_tibble. indiv_indices indices individuals loci_indices indices loci ... currently unused.","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/show_genotypes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Show the genotypes of a gen_tibble — show_genotypes","text":"matrix counts alternative alleles (see show_loci()) extract information alleles loci gen_tibble.","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/show_genotypes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Show the genotypes of a gen_tibble — show_genotypes","text":"","code":"example_gt <- load_example_gt(\"gen_tbl\")  example_gt %>% show_genotypes() #>      [,1] [,2] [,3] [,4] [,5] [,6] #> [1,]    1    1    0    1    1    0 #> [2,]    2    1    0   NA    0    0 #> [3,]    2   NA    0    0    1    1 #> [4,]    1    0    0    1    0    0 #> [5,]    1    2    0    1    2    1 #> [6,]    0    0    0    0   NA    1 #> [7,]    0    1    1    0    1   NA"},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/show_loci.html","id":null,"dir":"Reference","previous_headings":"","what":"Show the loci information of a gen_tibble — show_loci","title":"Show the loci information of a gen_tibble — show_loci","text":"Extract set information loci  gen_tibble.","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/show_loci.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Show the loci information of a gen_tibble — show_loci","text":"","code":"show_loci(.x, ...)  # S3 method for class 'tbl_df' show_loci(.x, ...)  # S3 method for class 'vctrs_bigSNP' show_loci(.x, ...)  show_loci(.x) <- value  # S3 method for class 'tbl_df' show_loci(.x) <- value  # S3 method for class 'vctrs_bigSNP' show_loci(.x) <- value"},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/show_loci.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Show the loci information of a gen_tibble — show_loci","text":".x vector class vctrs_bigSNP (usually genotype column gen_tibble object), gen_tibble. ... currently unused. value data.frame tibble loci information replace current one.","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/show_loci.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Show the loci information of a gen_tibble — show_loci","text":"tibble::tibble information (see gen_tibble details compulsory columns always present)","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/show_loci.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Show the loci information of a gen_tibble — show_loci","text":"","code":"example_gt <- load_example_gt(\"gen_tbl\")  example_gt %>% show_loci() #> # A tibble: 6 × 7 #>   big_index name  chromosome position genetic_dist allele_ref allele_alt #>       <int> <chr> <fct>         <int>        <dbl> <chr>      <chr>      #> 1         1 rs1   chr1              3            0 A          T          #> 2         2 rs2   chr1              5            0 T          C          #> 3         3 rs3   chr1             65            0 C          NA         #> 4         4 rs4   chr1            343            0 G          C          #> 5         5 rs5   chr2             23            0 C          G          #> 6         6 rs6   chr2            456            0 T          A"},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/show_ploidy.html","id":null,"dir":"Reference","previous_headings":"","what":"Show the ploidy information of a gen_tibble — show_ploidy","title":"Show the ploidy information of a gen_tibble — show_ploidy","text":"Extract ploidy information  gen_tibble. NOTE function return ploidy level individual (obtained indiv_ploidy); instead, returns integer either ploidy level individuals (e.g. 2 indicates individuals diploid), 0 indicate mixed ploidy. special case -2 used indicate presence pseudo-haploids (.e. individuals ploidy 2 information one allele; dosages 0 2 individuals).","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/show_ploidy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Show the ploidy information of a gen_tibble — show_ploidy","text":"","code":"show_ploidy(.x, ...)  # S3 method for class 'tbl_df' show_ploidy(.x, ...)  # S3 method for class 'vctrs_bigSNP' show_ploidy(.x, ...)"},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/show_ploidy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Show the ploidy information of a gen_tibble — show_ploidy","text":".x vector class vctrs_bigSNP (usually genotype column gen_tibble object), gen_tibble. ... currently unused.","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/show_ploidy.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Show the ploidy information of a gen_tibble — show_ploidy","text":"ploidy (0 indicates mixed ploidy)","code":""},{"path":[]},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/show_ploidy.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Show the ploidy information of a gen_tibble — show_ploidy","text":"","code":"example_gt <- load_example_gt(\"gen_tbl\")  example_gt %>% show_ploidy() #> [1] 2"},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/snp_allele_sharing.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the Pairwise Allele Sharing Matrix for a bigSNP object — snp_allele_sharing","title":"Compute the Pairwise Allele Sharing Matrix for a bigSNP object — snp_allele_sharing","text":"function computes Allele Sharing matrix. Estimates Allele Sharing (matching hierfstat)) pairs individuals (locus, gives 1 two individuals homozygous allele, 0 homozygous different allele, 1/2 least one individual heterozygous. Matching average 0, 1/2 1s)","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/snp_allele_sharing.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the Pairwise Allele Sharing Matrix for a bigSNP object — snp_allele_sharing","text":"","code":"snp_allele_sharing(   X,   ind.row = bigstatsr::rows_along(X),   ind.col = bigstatsr::cols_along(X),   block.size = bigstatsr::block_size(nrow(X)) )"},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/snp_allele_sharing.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the Pairwise Allele Sharing Matrix for a bigSNP object — snp_allele_sharing","text":"X bigstatsr::FBM.code256 matrix (found genotypes slot bigsnpr::bigSNP object). ind.row optional vector row indices used. specified, rows used. use negative indices. ind.col optional vector column indices used. specified, columns used. use negative indices. block.size maximum number columns read . Note , optimise speed matrix operations, store memory 3 times columns.","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/snp_allele_sharing.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the Pairwise Allele Sharing Matrix for a bigSNP object — snp_allele_sharing","text":"matrix allele sharing pairs individuals","code":""},{"path":[]},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/snp_allele_sharing.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute the Pairwise Allele Sharing Matrix for a bigSNP object — snp_allele_sharing","text":"","code":"example_gt <- load_example_gt(\"gen_tbl\")  X <- attr(example_gt$genotypes, \"fbm\") snp_allele_sharing(X) #>           [,1]  [,2]  [,3]      [,4]      [,5]  [,6]  [,7] #> [1,] 0.6666667 0.700 0.600 0.6666667 0.5833333 0.600 0.500 #> [2,] 0.7000000 0.900 0.750 0.8000000 0.5000000 0.500 0.375 #> [3,] 0.6000000 0.750 0.800 0.6000000 0.6000000 0.625 0.500 #> [4,] 0.6666667 0.800 0.600 0.8333333 0.4166667 0.700 0.500 #> [5,] 0.5833333 0.500 0.600 0.4166667 0.7500000 0.500 0.500 #> [6,] 0.6000000 0.500 0.625 0.7000000 0.5000000 0.900 0.750 #> [7,] 0.5000000 0.375 0.500 0.5000000 0.5000000 0.750 0.700  # Compute for individuals 1 to 5 snp_allele_sharing(X, ind.row = 1:5, ind.col = 1:5) #>       [,1]      [,2]      [,3]  [,4]  [,5] #> [1,] 0.600 0.6250000 0.6250000 0.600 0.600 #> [2,] 0.625 0.8750000 0.8333333 0.750 0.500 #> [3,] 0.625 0.8333333 0.8750000 0.625 0.625 #> [4,] 0.600 0.7500000 0.6250000 0.800 0.400 #> [5,] 0.600 0.5000000 0.6250000 0.400 0.800  # Adjust block size snp_allele_sharing(X, block.size = 2) #>           [,1]  [,2]  [,3]      [,4]      [,5]  [,6]  [,7] #> [1,] 0.6666667 0.700 0.600 0.6666667 0.5833333 0.600 0.500 #> [2,] 0.7000000 0.900 0.750 0.8000000 0.5000000 0.500 0.375 #> [3,] 0.6000000 0.750 0.800 0.6000000 0.6000000 0.625 0.500 #> [4,] 0.6666667 0.800 0.600 0.8333333 0.4166667 0.700 0.500 #> [5,] 0.5833333 0.500 0.600 0.4166667 0.7500000 0.500 0.500 #> [6,] 0.6000000 0.500 0.625 0.7000000 0.5000000 0.900 0.750 #> [7,] 0.5000000 0.375 0.500 0.5000000 0.5000000 0.750 0.700"},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/snp_ibs.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the Identity by State Matrix for a bigSNP object — snp_ibs","title":"Compute the Identity by State Matrix for a bigSNP object — snp_ibs","text":"function computes IBS matrix.","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/snp_ibs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the Identity by State Matrix for a bigSNP object — snp_ibs","text":"","code":"snp_ibs(   X,   ind.row = bigstatsr::rows_along(X),   ind.col = bigstatsr::cols_along(X),   type = c(\"proportion\", \"adjusted_counts\", \"raw_counts\"),   block.size = bigstatsr::block_size(nrow(X)) )"},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/snp_ibs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the Identity by State Matrix for a bigSNP object — snp_ibs","text":"X bigstatsr::FBM.code256 matrix (found genotypes slot bigsnpr::bigSNP object). ind.row optional vector row indices used. specified, rows used. use negative indices. ind.col optional vector column indices used. specified, columns used. use negative indices. type one \"proportion\" (equivalent \"ibs\" PLINK), \"adjusted_counts\" (\"distance\" PLINK), \"raw_counts\" (counts identical alleles non-missing alleles, two quantities computed) block.size maximum number columns read . Note , optimise speed matrix operations, store memory 3 times columns.","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/snp_ibs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the Identity by State Matrix for a bigSNP object — snp_ibs","text":".counts = TRUE function returns list two bigstatsr::FBM matrices, one counts IBS alleles (.e. 2*n loci), one valid alleles (.e. 2 * n_loci - 2 * missing_loci). .counts = FALSE returns single matrix IBS proportions.","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/snp_ibs.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute the Identity by State Matrix for a bigSNP object — snp_ibs","text":"Note monomorphic sites currently counted. filter beforehand? plink ?","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/snp_ibs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute the Identity by State Matrix for a bigSNP object — snp_ibs","text":"","code":"example_gt <- load_example_gt(\"gen_tbl\")  X <- attr(example_gt$genotypes, \"fbm\") snp_ibs(X) #>           [,1] [,2]  [,3]      [,4]      [,5] [,6]  [,7] #> [1,] 1.0000000 0.80 0.700 0.8333333 0.7500000 0.60 0.700 #> [2,] 0.8000000 1.00 0.750 0.8000000 0.5000000 0.50 0.500 #> [3,] 0.7000000 0.75 1.000 0.6000000 0.7000000 0.75 0.625 #> [4,] 0.8333333 0.80 0.600 1.0000000 0.5833333 0.70 0.500 #> [5,] 0.7500000 0.50 0.700 0.5833333 1.0000000 0.60 0.500 #> [6,] 0.6000000 0.50 0.750 0.7000000 0.6000000 1.00 0.750 #> [7,] 0.7000000 0.50 0.625 0.5000000 0.5000000 0.75 1.000  # Compute for individuals 1 to 5 snp_ibs(X, ind.row = 1:5, ind.col = 1:5) #>      [,1]      [,2]      [,3]  [,4]  [,5] #> [1,] 1.00 0.7500000 0.7500000 0.800 0.800 #> [2,] 0.75 1.0000000 0.8333333 0.750 0.500 #> [3,] 0.75 0.8333333 1.0000000 0.625 0.625 #> [4,] 0.80 0.7500000 0.6250000 1.000 0.600 #> [5,] 0.80 0.5000000 0.6250000 0.600 1.000  # Adjust block.size snp_ibs(X, block.size = 2) #>           [,1] [,2]  [,3]      [,4]      [,5] [,6]  [,7] #> [1,] 1.0000000 0.80 0.700 0.8333333 0.7500000 0.60 0.700 #> [2,] 0.8000000 1.00 0.750 0.8000000 0.5000000 0.50 0.500 #> [3,] 0.7000000 0.75 1.000 0.6000000 0.7000000 0.75 0.625 #> [4,] 0.8333333 0.80 0.600 1.0000000 0.5833333 0.70 0.500 #> [5,] 0.7500000 0.50 0.700 0.5833333 1.0000000 0.60 0.500 #> [6,] 0.6000000 0.50 0.750 0.7000000 0.6000000 1.00 0.750 #> [7,] 0.7000000 0.50 0.625 0.5000000 0.5000000 0.75 1.000  # Change type snp_ibs(X, type = \"proportion\") #>           [,1] [,2]  [,3]      [,4]      [,5] [,6]  [,7] #> [1,] 1.0000000 0.80 0.700 0.8333333 0.7500000 0.60 0.700 #> [2,] 0.8000000 1.00 0.750 0.8000000 0.5000000 0.50 0.500 #> [3,] 0.7000000 0.75 1.000 0.6000000 0.7000000 0.75 0.625 #> [4,] 0.8333333 0.80 0.600 1.0000000 0.5833333 0.70 0.500 #> [5,] 0.7500000 0.50 0.700 0.5833333 1.0000000 0.60 0.500 #> [6,] 0.6000000 0.50 0.750 0.7000000 0.6000000 1.00 0.750 #> [7,] 0.7000000 0.50 0.625 0.5000000 0.5000000 0.75 1.000 snp_ibs(X, type = \"adjusted_counts\") #>      [,1] [,2] [,3] [,4] [,5] [,6] [,7] #> [1,]  6.0  4.8 4.20  5.0  4.5  3.6 4.20 #> [2,]  4.8  6.0 4.50  4.8  3.0  3.0 3.00 #> [3,]  4.2  4.5 6.00  3.6  4.2  4.5 3.75 #> [4,]  5.0  4.8 3.60  6.0  3.5  4.2 3.00 #> [5,]  4.5  3.0 4.20  3.5  6.0  3.6 3.00 #> [6,]  3.6  3.0 4.50  4.2  3.6  6.0 4.50 #> [7,]  4.2  3.0 3.75  3.0  3.0  4.5 6.00 snp_ibs(X, type = \"raw_counts\") #> $ibs #> A Filebacked Big Matrix of type 'double' with 7 rows and 7 columns. #>  #> $valid_n #> A Filebacked Big Matrix of type 'double' with 7 rows and 7 columns. #>"},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/snp_king.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the KING-robust Matrix for a bigSNP object — snp_king","title":"Compute the KING-robust Matrix for a bigSNP object — snp_king","text":"function computes KING-robust estimator kinship, reimplementing KING algorithm Manichaikul et al. (2010).","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/snp_king.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the KING-robust Matrix for a bigSNP object — snp_king","text":"","code":"snp_king(   X,   ind.row = bigstatsr::rows_along(X),   ind.col = bigstatsr::cols_along(X),   block.size = bigstatsr::block_size(nrow(X)) * 4 )"},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/snp_king.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the KING-robust Matrix for a bigSNP object — snp_king","text":"X bigstatsr::FBM.code256 matrix (found genotypes slot bigsnpr::bigSNP object). ind.row optional vector row indices used. specified, rows used. use negative indices. ind.col optional vector column indices used. specified, columns used. use negative indices. block.size maximum number columns read .","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/snp_king.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the KING-robust Matrix for a bigSNP object — snp_king","text":"square symmetrical matrix relationship coefficients individuals","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/snp_king.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Compute the KING-robust Matrix for a bigSNP object — snp_king","text":"Manichaikul, . et al. (2010) Robust relationship inference genome-wide association studies. Bioinformatics, 26(22), 2867–2873. https://doi.org/10.1093/bioinformatics/btq559.","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/snp_king.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute the KING-robust Matrix for a bigSNP object — snp_king","text":"","code":"example_gt <- load_example_gt(\"gen_tbl\")  X <- attr(example_gt$genotypes, \"fbm\") snp_king(X) #>        [,1]  [,2]   [,3]   [,4]   [,5]  [,6]   [,7] #> [1,]  0.500  0.00  0.125  0.250  0.250 -0.50  0.250 #> [2,]  0.000  0.50    NaN  0.000 -1.250 -1.00 -1.000 #> [3,]  0.125   NaN  0.500  0.000  0.125 -0.50 -0.750 #> [4,]  0.250  0.00  0.000  0.500 -0.625 -0.25 -0.125 #> [5,]  0.250 -1.25  0.125 -0.625  0.500 -1.00 -0.125 #> [6,] -0.500 -1.00 -0.500 -0.250 -1.000  0.50    NaN #> [7,]  0.250 -1.00 -0.750 -0.125 -0.125   NaN  0.500  # Compute for individuals 1 to 5 snp_king(X, ind.row = 1:5, ind.col = 1:5) #>      [,1] [,2]  [,3]  [,4]  [,5] #> [1,] 0.50  0.0  0.00  0.25  0.25 #> [2,] 0.00  0.5   NaN  0.00 -1.00 #> [3,] 0.00  NaN  0.50 -0.25 -0.25 #> [4,] 0.25  0.0 -0.25  0.50 -0.50 #> [5,] 0.25 -1.0 -0.25 -0.50  0.50  # Adjust block size snp_king(X, block.size = 2) #>        [,1]  [,2]   [,3]   [,4]   [,5]  [,6]   [,7] #> [1,]  0.500  0.00  0.125  0.250  0.250 -0.50  0.250 #> [2,]  0.000  0.50    NaN  0.000 -1.250 -1.00 -1.000 #> [3,]  0.125   NaN  0.500  0.000  0.125 -0.50 -0.750 #> [4,]  0.250  0.00  0.000  0.500 -0.625 -0.25 -0.125 #> [5,]  0.250 -1.25  0.125 -0.625  0.500 -1.00 -0.125 #> [6,] -0.500 -1.00 -0.500 -0.250 -1.000  0.50    NaN #> [7,]  0.250 -1.00 -0.750 -0.125 -0.125   NaN  0.500"},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/summary.gt_admix.html","id":null,"dir":"Reference","previous_headings":"","what":"Summary method for gt_admix objects — summary.gt_admix","title":"Summary method for gt_admix objects — summary.gt_admix","text":"Summary method gt_admix objects","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/summary.gt_admix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summary method for gt_admix objects — summary.gt_admix","text":"","code":"# S3 method for class 'gt_admix' summary(object, ...)"},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/summary.gt_admix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summary method for gt_admix objects — summary.gt_admix","text":"object gt_admix object ... unused (necessary compatibility generic function)","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/summary.gt_admix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summary method for gt_admix objects — summary.gt_admix","text":"summary gt_admix object","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/summary.gt_admix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summary method for gt_admix objects — summary.gt_admix","text":"","code":"# run the example only if we have the package installed if (requireNamespace(\"LEA\", quietly = TRUE)) {   example_gt <- load_example_gt(\"gen_tbl\")    # Create a gt_admix object   admix_obj <- example_gt %>% gt_snmf(k = 1:3, project = \"force\")    # Print a summary   summary(admix_obj) } #> Admixture results for multiple runs:        #> k 1 2 3 #> n 1 1 1 #> with slots: #> $Q for Q matrices #> $P for  matrices #> $log for logs from the algorithm"},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/summary_rbind_dry_run.html","id":null,"dir":"Reference","previous_headings":"","what":"Print a summary of a merge report — summary.rbind_report","title":"Print a summary of a merge report — summary.rbind_report","text":"function creates summary merge report generated rbind_dry_run()","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/summary_rbind_dry_run.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print a summary of a merge report — summary.rbind_report","text":"","code":"# S3 method for class 'rbind_report' summary(object, ..., ref_label = \"reference\", target_label = \"target\")"},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/summary_rbind_dry_run.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print a summary of a merge report — summary.rbind_report","text":"object list generated rbind_dry_run() ... unused (necessary compatibility generic function) ref_label label reference dataset (defaults \"reference\") target_label label target dataset (defaults \"target\")","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/summary_rbind_dry_run.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print a summary of a merge report — summary.rbind_report","text":"NULL (prints summary console)","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/summary_rbind_dry_run.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print a summary of a merge report — summary.rbind_report","text":"","code":"example_gt <- load_example_gt(\"gen_tbl\")  # Create a second gen_tibble to merge test_indiv_meta <- data.frame(   id = c(\"x\", \"y\", \"z\"),   population = c(\"pop1\", \"pop1\", \"pop2\") ) test_genotypes <- rbind(   c(1, 1, 0, 1, 1, 0),   c(2, 1, 0, 0, 0, 0),   c(2, 2, 0, 0, 1, 1) ) test_loci <- data.frame(   name = paste0(\"rs\", 1:6),   chromosome = paste0(\"chr\", c(1, 1, 1, 1, 2, 2)),   position = as.integer(c(3, 5, 65, 343, 23, 456)),   genetic_dist = as.double(rep(0, 6)),   allele_ref = c(\"A\", \"T\", \"C\", \"G\", \"C\", \"T\"),   allele_alt = c(\"T\", \"C\", NA, \"C\", \"G\", \"A\") )  test_gt <- gen_tibble(   x = test_genotypes,   loci = test_loci,   indiv_meta = test_indiv_meta,   valid_alleles = c(\"A\", \"T\", \"C\", \"G\"),   quiet = TRUE )  # Merge the datasets using rbind report <- rbind_dry_run(   ref = example_gt, target = test_gt,   flip_strand = TRUE, quiet = TRUE )  # Get the summary summary(report) #> harmonising loci between two datasets #> flip_strand =  TRUE  ; remove_ambiguous =  TRUE  #> ----------------------------- #> dataset: reference  #> number of SNPs: 6 reduced to 2  #> ( 4 are ambiguous, of which 4  were removed) #> ----------------------------- #> dataset: target  #> number of SNPs: 6 reduced to 2  #> ( 0 were flipped to match the reference set) #> ( 4 are ambiguous, of which 4 were removed)"},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/theme_distruct.html","id":null,"dir":"Reference","previous_headings":"","what":"A theme to match the output of distruct — theme_distruct","title":"A theme to match the output of distruct — theme_distruct","text":"theme remove plot decorations, matching look plots created distruct.","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/theme_distruct.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A theme to match the output of distruct — theme_distruct","text":"","code":"theme_distruct()"},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/theme_distruct.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A theme to match the output of distruct — theme_distruct","text":"ggplot2::theme","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/theme_distruct.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A theme to match the output of distruct — theme_distruct","text":"","code":"# Read example gt_admix object admix_obj <-   readRDS(system.file(\"extdata\", \"anolis\", \"anole_adm_k3.rds\",     package = \"tidypopgen\"   ))  # Basic barplot with disstruct theme autoplot(admix_obj, k = 3, run = 1, type = \"barplot\") +   theme_distruct()"},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/tidy.gt_dapc.html","id":null,"dir":"Reference","previous_headings":"","what":"Tidy a gt_dapc object — tidy.gt_dapc","title":"Tidy a gt_dapc object — tidy.gt_dapc","text":"summarizes information components gt_dapc tidypopgen package. parameter matrix determines element returned.","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/tidy.gt_dapc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tidy a gt_dapc object — tidy.gt_dapc","text":"","code":"# S3 method for class 'gt_dapc' tidy(x, matrix = \"eigenvalues\", ...)"},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/tidy.gt_dapc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tidy a gt_dapc object — tidy.gt_dapc","text":"x gt_dapc object (returned gt_dapc()). matrix Character specifying component DAPC tidied. \"samples\", \"scores\", \"x\": returns information map original space least discriminant axes. \"v\", \"rotation\", \"loadings\" \"variables\": returns information map discriminant axes space back original space (.e. genotype frequencies). Note different loadings linking PCA scores (available element $loadings dapc object). \"d\", \"eigenvalues\" \"lds\": returns information eigenvalues. ... used. Needed match generic signature .","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/tidy.gt_dapc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Tidy a gt_dapc object — tidy.gt_dapc","text":"tibble::tibble columns depending component DAPC tidied. \"scores\" row tidied output corresponds original data PCA space. columns : row ID original observation (.e. rowname original data). LD Integer indicating principal component. value score observation particular principal component. , location observation PCA space. matrix  \"loadings\", row tidied output corresponds information principle components original space. columns : row variable labels (colnames) data set PCA performed. LD integer vector indicating principal component. value value eigenvector (axis score) indicated principal component. \"eigenvalues\", columns : LD integer vector indicating discriminant axis. std.dev Standard deviation (.e. sqrt(eig/(n-1))) explained DA (compatibility prcomp. cumulative Cumulative variation explained principal components component (note phrased percentage total variance, since many methods estimate truncated SVD.","code":""},{"path":[]},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/tidy.gt_dapc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Tidy a gt_dapc object — tidy.gt_dapc","text":"","code":"#' # Create a gen_tibble of lobster genotypes bed_file <-   system.file(\"extdata\", \"lobster\", \"lobster.bed\", package = \"tidypopgen\") lobsters <- gen_tibble(bed_file,   backingfile = tempfile(\"lobsters\"),   quiet = TRUE )  # Remove monomorphic loci and impute lobsters <- lobsters %>% select_loci_if(loci_maf(genotypes) > 0) lobsters <- gt_impute_simple(lobsters, method = \"mode\")  # Create PCA and run DAPC pca <- gt_pca_partialSVD(lobsters) populations <- as.factor(lobsters$population) dapc_res <- gt_dapc(pca, n_pca = 6, n_da = 2, pop = populations)  # Tidy scores tidy(dapc_res, matrix = \"scores\") #> # A tibble: 352 × 3 #>    row      LD  value #>    <chr> <dbl>  <dbl> #>  1 Ale04     1  3.87  #>  2 Ale04     2  0.132 #>  3 Ale05     1  3.96  #>  4 Ale05     2 -0.402 #>  5 Ale06     1  3.25  #>  6 Ale06     2 -0.801 #>  7 Ale08     1  3.06  #>  8 Ale08     2  0.398 #>  9 Ale13     1  1.60  #> 10 Ale13     2  1.05  #> # ℹ 342 more rows  # Tidy eigenvalues tidy(dapc_res, matrix = \"eigenvalues\") #> # A tibble: 4 × 3 #>      LD eigenvalue cumulative #>   <int>      <dbl>      <dbl> #> 1     1    225.          225. #> 2     2     33.4         259. #> 3     3      2.29        261. #> 4     4      0.283       261.  # Tidy loadings tidy(dapc_res, matrix = \"loadings\") #> # A tibble: 158 × 3 #>    column LD       value #>    <chr>  <chr>    <dbl> #>  1 rs3441 LD1   -0.00389 #>  2 rs3441 LD2   -0.00831 #>  3 rs4173 LD1   -0.0157  #>  4 rs4173 LD2    0.0121  #>  5 rs6157 LD1    0.0122  #>  6 rs6157 LD2   -0.162   #>  7 rs7502 LD1    0.163   #>  8 rs7502 LD2    0.0172  #>  9 rs7892 LD1    0.0880  #> 10 rs7892 LD2    0.0206  #> # ℹ 148 more rows"},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/tidy.q_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Tidy a Q matrix — tidy.q_matrix","title":"Tidy a Q matrix — tidy.q_matrix","text":"Takes q_matrix object, matrix, returns tidied tibble.","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/tidy.q_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tidy a Q matrix — tidy.q_matrix","text":"","code":"# S3 method for class 'q_matrix' tidy(x, data, ...)"},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/tidy.q_matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tidy a Q matrix — tidy.q_matrix","text":"x Q matrix object (returned q_matrix). data associated tibble (e.g. gen_tibble), individuals order data used generate Q matrix ... currently used","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/tidy.q_matrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Tidy a Q matrix — tidy.q_matrix","text":"tidied tibble containing columns: row ID original observation (.e. rowname original data). Q Integer indicating Q component. value proportion particular Q value.","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/tidy.q_matrix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Tidy a Q matrix — tidy.q_matrix","text":"","code":"# run the example only if we have the package installed if (requireNamespace(\"LEA\", quietly = TRUE)) {   example_gt <- load_example_gt(\"gen_tbl\")    # Create a gt_admix object   admix_obj <- example_gt %>% gt_snmf(k = 1:3, project = \"force\")    # Extract a Q matrix   q_mat_k3 <- get_q_matrix(admix_obj, k = 3, run = 1)    tidy(q_mat_k3, data = example_gt) } #> # A tibble: 21 × 3 #>    id    q     percentage #>    <chr> <chr>      <dbl> #>  1 a     .Q1    1.000     #>  2 a     .Q2    0.0001000 #>  3 a     .Q3    0.0001000 #>  4 b     .Q1    1.000     #>  5 b     .Q2    0.0001000 #>  6 b     .Q3    0.0001000 #>  7 c     .Q1    0.0001000 #>  8 c     .Q2    1.000     #>  9 c     .Q3    0.0001000 #> 10 d     .Q1    1.000     #> # ℹ 11 more rows"},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/tidy_gt_pca.html","id":null,"dir":"Reference","previous_headings":"","what":"Tidy a gt_pca object — tidy.gt_pca","title":"Tidy a gt_pca object — tidy.gt_pca","text":"summarizes information components gt_pca tidypopgen package. parameter matrix determines element returned. Column names tidied output match returned broom::tidy.prcomp, tidier standard PCA objects returned stats::prcomp.","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/tidy_gt_pca.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tidy a gt_pca object — tidy.gt_pca","text":"","code":"# S3 method for class 'gt_pca' tidy(x, matrix = \"eigenvalues\", ...)"},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/tidy_gt_pca.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tidy a gt_pca object — tidy.gt_pca","text":"x gt_pca object returned one gt_pca_* functions. matrix Character specifying component PCA tidied. \"samples\", \"scores\", \"x\": returns information map original space principle components space (equivalent product u d). \"v\", \"rotation\", \"loadings\" \"variables\": returns information map principle components space back original space. \"d\", \"eigenvalues\" \"pcs\": returns information eigenvalues. ... used. Needed match generic signature .","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/tidy_gt_pca.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Tidy a gt_pca object — tidy.gt_pca","text":"tibble::tibble columns depending component PCA tidied. \"scores\" row tidied output corresponds original data PCA space. columns : row ID original observation (.e. rowname original data). PC Integer indicating principal component. value score observation particular principal component. , location observation PCA space. matrix  \"loadings\", row tidied output corresponds information principle components original space. columns : row variable labels (colnames) data set PCA performed. PC integer vector indicating principal component. value value eigenvector (axis score) indicated principal component. \"eigenvalues\", columns : PC integer vector indicating principal component. std.dev Standard deviation (.e. sqrt(eig/(n-1))) explained PC (compatibility prcomp. cumulative Cumulative variation explained principal components component (note phrased percentage total variance, since many methods estimate truncated SVD.","code":""},{"path":[]},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/tidy_gt_pca.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Tidy a gt_pca object — tidy.gt_pca","text":"","code":"# Create a gen_tibble of lobster genotypes bed_file <-   system.file(\"extdata\", \"lobster\", \"lobster.bed\", package = \"tidypopgen\") lobsters <- gen_tibble(bed_file,   backingfile = tempfile(\"lobsters\"),   quiet = TRUE )  # Remove monomorphic loci and impute lobsters <- lobsters %>% select_loci_if(loci_maf(genotypes) > 0) lobsters <- gt_impute_simple(lobsters, method = \"mode\")  # Create PCA object pca <- gt_pca_partialSVD(lobsters)  # Tidy the PCA object tidy(pca) #> # A tibble: 10 × 4 #>       PC std.dev percent cumulative #>    <int>   <dbl>   <dbl>      <dbl> #>  1     1    2.75    8.91       8.91 #>  2     2    2.32    6.37      15.3  #>  3     3    1.70    3.40      18.7  #>  4     4    1.56    2.89      21.6  #>  5     5    1.52    2.74      24.3  #>  6     6    1.52    2.73      27.0  #>  7     7    1.48    2.59      29.6  #>  8     8    1.46    2.52      32.1  #>  9     9    1.40    2.31      34.5  #> 10    10    1.38    2.25      36.7   # Tidy the PCA object for eigenvalues tidy(pca, matrix = \"eigenvalues\") #> # A tibble: 10 × 4 #>       PC std.dev percent cumulative #>    <int>   <dbl>   <dbl>      <dbl> #>  1     1    2.75    8.91       8.91 #>  2     2    2.32    6.37      15.3  #>  3     3    1.70    3.40      18.7  #>  4     4    1.56    2.89      21.6  #>  5     5    1.52    2.74      24.3  #>  6     6    1.52    2.73      27.0  #>  7     7    1.48    2.59      29.6  #>  8     8    1.46    2.52      32.1  #>  9     9    1.40    2.31      34.5  #> 10    10    1.38    2.25      36.7   # Tidy the PCA object for loadings tidy(pca, matrix = \"loadings\") #> # A tibble: 790 × 3 #>    column    PC    value #>    <chr>  <int>    <dbl> #>  1 rs3441     1  0.0464  #>  2 rs3441     2 -0.00611 #>  3 rs3441     3 -0.0927  #>  4 rs3441     4  0.131   #>  5 rs3441     5  0.188   #>  6 rs3441     6  0.0378  #>  7 rs3441     7  0.136   #>  8 rs3441     8  0.0756  #>  9 rs3441     9 -0.107   #> 10 rs3441    10 -0.0705  #> # ℹ 780 more rows  # Tidy the PCA object for scores tidy(pca, matrix = \"scores\") #> # A tibble: 1,760 × 3 #>    row      PC  value #>    <chr> <int>  <dbl> #>  1 Ale04     1  3.43  #>  2 Ale04     2 -2.93  #>  3 Ale04     3  1.96  #>  4 Ale04     4  0.103 #>  5 Ale04     5 -1.83  #>  6 Ale04     6  1.01  #>  7 Ale04     7 -1.25  #>  8 Ale04     8  0.212 #>  9 Ale04     9  0.199 #> 10 Ale04    10  1.17  #> # ℹ 1,750 more rows"},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/tidypopgen-package.html","id":null,"dir":"Reference","previous_headings":"","what":"tidypopgen: Tidy Population Genetics — tidypopgen-package","title":"tidypopgen: Tidy Population Genetics — tidypopgen-package","text":"provide tidy grammar population genetics, facilitating manipulation analysis data biallelic single nucleotide polymorphisms (SNPs). 'tidypopgen' scales large genetic datasets storing genotypes disk, performing operations chunks, without ever loading data memory. full functionalities package described Carter et al. (2025) doi:10.1101/2025.06.06.658325 .","code":""},{"path":[]},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/tidypopgen-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"tidypopgen: Tidy Population Genetics — tidypopgen-package","text":"Maintainer: Andrea Manica am315@cam.ac.uk (ORCID) [copyright holder] Authors: Evie Carter Eirlys Tysall contributors: Chang Christopher (Author Hardy-Weinberg Equilibrium algorithm PLINK 1.90, used loci_hwe()) [contributor] Shaun Purcell (Author Hardy-Weinberg Equilibrium algorithm PLINK 1.90, used loci_hwe()) [contributor] Bengtsson Henrik (Author countLines R.utils, modified .vcf count_vcf_variants()) [contributor]","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/windows_indiv_roh.html","id":null,"dir":"Reference","previous_headings":"","what":"Detect runs of homozygosity using a sliding-window approach — windows_indiv_roh","title":"Detect runs of homozygosity using a sliding-window approach — windows_indiv_roh","text":"function uses sliding-window approach look runs homozygosity (heterozygosity) diploid genome. based package detectRUNS, implements approach equivalent one PLINK.","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/windows_indiv_roh.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Detect runs of homozygosity using a sliding-window approach — windows_indiv_roh","text":"","code":"windows_indiv_roh(   .x,   window_size = 15,   threshold = 0.05,   min_snp = 3,   heterozygosity = FALSE,   max_opp_window = 1,   max_miss_window = 1,   max_gap = 10^6,   min_length_bps = 1000,   min_density = 1/1000,   max_opp_run = NULL,   max_miss_run = NULL )  gt_roh_window(   .x,   window_size = 15,   threshold = 0.05,   min_snp = 3,   heterozygosity = FALSE,   max_opp_window = 1,   max_miss_window = 1,   max_gap = 10^6,   min_length_bps = 1000,   min_density = 1/1000,   max_opp_run = NULL,   max_miss_run = NULL )"},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/windows_indiv_roh.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Detect runs of homozygosity using a sliding-window approach — windows_indiv_roh","text":".x gen_tibble window_size size sliding window (number SNP loci) (default = 15) threshold threshold overlapping windows state (homozygous/heterozygous) call SNP RUN (default = 0.05) min_snp minimum n. SNP RUN (default = 3) heterozygosity look runs heterozygosity (instead homozygosity? (default = FALSE) max_opp_window max n. SNPs opposite type (e.g. heterozygous snps runs homozygosity) sliding window (default = 1) max_miss_window max. n. missing SNP sliding window (default = 1) max_gap max distance consecutive SNP still considered potential run (default = 10^6 bps) min_length_bps minimum length run bps (defaults 1000 bps = 1 kbps) min_density minimum n. SNP per kbps (defaults 0.1 = 1 SNP every 10 kbps) max_opp_run max n. opposite genotype SNPs run (optional) max_miss_run max n. missing SNPs run (optional)","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/windows_indiv_roh.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Detect runs of homozygosity using a sliding-window approach — windows_indiv_roh","text":"dataframe RUNs Homozygosity Heterozygosity analysed dataset. returned dataframe contains following seven columns: \"group\", \"id\", \"chrom\", \"nSNP\", \"\", \"\", \"lengthBps\" (group: population, breed, case/control etc.; id: individual identifier; chrom: chromosome run located; nSNP: number SNPs run; : starting position run, bps; : end position run, bps; lengthBps: size run)","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/windows_indiv_roh.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Detect runs of homozygosity using a sliding-window approach — windows_indiv_roh","text":"function returns data frame runs detected dataset. data frame , turn, input functions detectRUNS package create plots produce statistics results (see plots statistics functions manual, /refer detectRUNS vignette). gen_tibble grouped, grouping variable used fill 'group' column. Otherwise, 'group' column filled values 'id' column. Note behaviour different windowed operations tidypopgen, return list grouped gen_tibbles; different behaviour designed maintain compatibility detectRUNS. old name function, gt_roh_window, still available, soft deprecated removed future versions tidypopgen.","code":""},{"path":[]},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/windows_indiv_roh.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Detect runs of homozygosity using a sliding-window approach — windows_indiv_roh","text":"","code":"sheep_ped <- system.file(\"extdata\", \"Kijas2016_Sheep_subset.ped\",   package = \"detectRUNS\" ) sheep_gt <- tidypopgen::gen_tibble(sheep_ped,   backingfile = tempfile(),   quiet = TRUE ) sheep_gt <- sheep_gt %>% group_by(population) sheep_roh <- windows_indiv_roh(sheep_gt) #> N. of RUNS for individual H114 is: 27 #> N. of RUNS for individual H115 is: 29 #> N. of RUNS for individual H116 is: 28 #> N. of RUNS for individual H26 is: 25 #> N. of RUNS for individual H32 is: 21 #> N. of RUNS for individual H38 is: 16 #> N. of RUNS for individual H44 is: 14 #> N. of RUNS for individual H56 is: 14 #> N. of RUNS for individual H50 is: 29 #> N. of RUNS for individual H27 is: 18 #> N. of RUNS for individual H33 is: 21 #> N. of RUNS for individual H39 is: 17 #> N. of RUNS for individual H45 is: 18 #> N. of RUNS for individual H51 is: 29 #> N. of RUNS for individual H57 is: 20 #> N. of RUNS for individual H28 is: 13 #> N. of RUNS for individual H34 is: 18 #> N. of RUNS for individual H40 is: 28 #> N. of RUNS for individual H46 is: 29 #> N. of RUNS for individual H52 is: 20 #> N. of RUNS for individual H58 is: 13 #> N. of RUNS for individual H29 is: 17 #> N. of RUNS for individual H35 is: 27 #> N. of RUNS for individual H41 is: 19 #> N. of RUNS for individual H47 is: 22 #> N. of RUNS for individual H53 is: 25 #> N. of RUNS for individual H59 is: 28 #> N. of RUNS for individual H30 is: 19 #> N. of RUNS for individual H42 is: 20 #> N. of RUNS for individual H48 is: 32 #> N. of RUNS for individual H54 is: 20 #> N. of RUNS for individual H60 is: 17 #> N. of RUNS for individual H31 is: 15 #> N. of RUNS for individual H37 is: 17 #> N. of RUNS for individual H43 is: 14 #> N. of RUNS for individual H49 is: 19 #> N. of RUNS for individual H55 is: 33 #> N. of RUNS for individual H1 is: 21 #> N. of RUNS for individual H9 is: 13 #> N. of RUNS for individual H17 is: 29 #> N. of RUNS for individual H2 is: 19 #> N. of RUNS for individual H10 is: 20 #> N. of RUNS for individual H19 is: 22 #> N. of RUNS for individual H3 is: 25 #> N. of RUNS for individual H11 is: 21 #> N. of RUNS for individual H20 is: 36 #> N. of RUNS for individual H4 is: 20 #> N. of RUNS for individual H12 is: 17 #> N. of RUNS for individual H21 is: 25 #> N. of RUNS for individual H13 is: 22 #> N. of RUNS for individual H22 is: 30 #> N. of RUNS for individual H6 is: 17 #> N. of RUNS for individual H14 is: 20 #> N. of RUNS for individual H7 is: 31 #> N. of RUNS for individual H15 is: 15 #> N. of RUNS for individual H24 is: 22 #> N. of RUNS for individual H8 is: 23 #> N. of RUNS for individual H16 is: 35 #> N. of RUNS for individual H25 is: 22 #> N. of RUNS for individual H64 is: 30 #> N. of RUNS for individual H62 is: 20 #> N. of RUNS for individual H63 is: 11 #> N. of RUNS for individual H118 is: 30 #> N. of RUNS for individual H119 is: 27 #> N. of RUNS for individual H120 is: 28 #> N. of RUNS for individual H121 is: 31 #> N. of RUNS for individual H122 is: 31 #> N. of RUNS for individual H123 is: 22 #> N. of RUNS for individual H124 is: 31 #> N. of RUNS for individual H125 is: 22 #> N. of RUNS for individual H126 is: 26 #> N. of RUNS for individual H127 is: 28 #> N. of RUNS for individual H128 is: 33 #> N. of RUNS for individual H129 is: 19 #> N. of RUNS for individual H130 is: 30 #> N. of RUNS for individual H131 is: 33 #> N. of RUNS for individual H132 is: 30 #> N. of RUNS for individual H133 is: 33 #> N. of RUNS for individual H134 is: 27 #> N. of RUNS for individual H135 is: 27 #> N. of RUNS for individual H136 is: 17 #> N. of RUNS for individual H137 is: 33 #> N. of RUNS for individual H138 is: 23 #> N. of RUNS for individual H139 is: 32 #> N. of RUNS for individual H140 is: 27 #> N. of RUNS for individual H141 is: 28 #> N. of RUNS for individual H142 is: 27 #> N. of RUNS for individual H143 is: 24 #> N. of RUNS for individual H144 is: 26 #> N. of RUNS for individual H145 is: 32 #> N. of RUNS for individual H146 is: 23 #> N. of RUNS for individual H147 is: 23 #> N. of RUNS for individual H148 is: 25 #> N. of RUNS for individual H149 is: 26 #> N. of RUNS for individual H150 is: 31 #> N. of RUNS for individual H151 is: 36 #> N. of RUNS for individual H152 is: 26 #> N. of RUNS for individual H153 is: 27 #> N. of RUNS for individual H154 is: 31 #> N. of RUNS for individual H155 is: 32 detectRUNS::plot_Runs(runs = sheep_roh)"},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/windows_nwise_pop_pbs.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the Population Branch Statistics over a sliding window — windows_nwise_pop_pbs","title":"Compute the Population Branch Statistics over a sliding window — windows_nwise_pop_pbs","text":"function computes population branch statistics (PBS) sliding window combination populations locus. PBS measure genetic differentiation one focal population two reference populations, used identify outlier loci may selection.","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/windows_nwise_pop_pbs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the Population Branch Statistics over a sliding window — windows_nwise_pop_pbs","text":"","code":"windows_nwise_pop_pbs(   .x,   type = c(\"matrix\", \"tidy\"),   fst_method = c(\"Hudson\", \"Nei87\", \"WC84\"),   return_fst = FALSE,   window_size,   step_size,   size_unit = c(\"snp\", \"bp\"),   min_loci = 1,   complete = FALSE )"},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/windows_nwise_pop_pbs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the Population Branch Statistics over a sliding window — windows_nwise_pop_pbs","text":".x grouped gen_tibble object type type object return. One \"matrix\" \"tidy\". Default \"matrix\". \"matrix\" returns dataframe row window, followed columns pbs values population comparison. \"tidy\" returns tidy tibble data 'long' format, row one window one population comparison. fst_method method use calculating Fst, one 'Hudson', 'Nei87', 'WC84'. See pairwise_pop_fst() details. return_fst logical value indicating whether return Fst values window_size size window use estimates. step_size step size use windows. size_unit Either \"snp\" \"bp\". \"snp\", window size step size number SNPs. \"bp\", window size step size base pairs. min_loci minimum number loci required calculate window statistic. number loci window less , window statistic NA. complete function evaluated complete windows ? FALSE, default, partial computations allowed end chromosome.","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/windows_nwise_pop_pbs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the Population Branch Statistics over a sliding window — windows_nwise_pop_pbs","text":"either data frame following columns: chromosome: chromosome window start: starting locus window end: ending locus window pbs_a.b.c: PBS value population given b & c (multiple columns covering 3 way combinations populations grouped gen_tibble object) fst_a.b: Fst value population b, return_fst TRUE tidy tibble following columns: chromosome: chromosome window start: starting locus window end: ending locus window stat_name: name populations used pbs calculation (e.g. \"pbs_pop1.pop2.pop3\"). return_fst TRUE, stat_name also include \"fst\" calculations column (e.g. \"fst_pop1.pop2\"). value: pbs value populations","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/windows_nwise_pop_pbs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute the Population Branch Statistics over a sliding window — windows_nwise_pop_pbs","text":"","code":"example_gt <- load_example_gt(\"grouped_gen_tbl\")  # Calculate nwise pbs across a window of 3 SNPs, with a step size of 2 SNPs example_gt %>%   windows_nwise_pop_pbs(     window_size = 3, step_size = 2,     size_unit = \"snp\", min_loci = 2   ) #> # A tibble: 3 × 9 #>   chromosome start   end pbs_pop1.pop2.pop3 pbs_pop2.pop1.pop3 #>   <chr>      <dbl> <dbl>              <dbl>              <dbl> #> 1 chr1           1     3             0.0930             0.231  #> 2 chr1           3     5             0.0486            -0.203  #> 3 chr2           1     3            -0.0630            -0.0854 #> # ℹ 4 more variables: pbs_pop3.pop1.pop2 <dbl>, pbsn1_pop1.pop2.pop3 <dbl>, #> #   pbsn1_pop2.pop1.pop3 <dbl>, pbsn1_pop3.pop1.pop2 <dbl>"},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/windows_pairwise_pop_fst.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute pairwise Fst for a sliding window — windows_pairwise_pop_fst","title":"Compute pairwise Fst for a sliding window — windows_pairwise_pop_fst","text":"function computes pairwise Fst sliding window across chromosome.","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/windows_pairwise_pop_fst.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute pairwise Fst for a sliding window — windows_pairwise_pop_fst","text":"","code":"windows_pairwise_pop_fst(   .x,   type = c(\"matrix\", \"tidy\"),   method = c(\"Hudson\", \"Nei87\", \"WC84\"),   window_size,   step_size,   size_unit = c(\"snp\", \"bp\"),   min_loci = 1,   complete = FALSE )"},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/windows_pairwise_pop_fst.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute pairwise Fst for a sliding window — windows_pairwise_pop_fst","text":".x grouped gen_tibble object type type object return. One \"matrix\" \"tidy\". Default \"matrix\". \"matrix\" returns dataframe row window, followed columns Fst values pairwise population b comparison. \"tidy\" returns tidy tibble data 'long' format, row one window one pairwise population b comparison. method method use calculating Fst, one 'Hudson', 'Nei87', 'WC84'. See pairwise_pop_fst() details. window_size size window use estimates. step_size step size use windows. size_unit Either \"snp\" \"bp\". \"snp\", window size step size number SNPs. \"bp\", window size step size base pairs. min_loci minimum number loci required calculate window statistic. number loci window less , window statistic NA. complete function evaluated complete windows ? FALSE, default, partial computations allowed end chromosome.","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/windows_pairwise_pop_fst.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute pairwise Fst for a sliding window — windows_pairwise_pop_fst","text":"either data frame following columns: chromosome: chromosome window start: starting locus window end: ending locus window fst_a.b: pairwise Fst value population b (multiple columns two populations) tidy tibble following columns: chromosome: chromosome window start: starting locus window end: ending locus window stat_name: name population b used pairwise Fst calculation (e.g. \"fst_pop1.pop2\") value: pairwise Fst value population b","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/windows_pairwise_pop_fst.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute pairwise Fst for a sliding window — windows_pairwise_pop_fst","text":"","code":"example_gt <- load_example_gt(\"gen_tbl\")  example_gt %>%   group_by(population) %>%   windows_pairwise_pop_fst(     window_size = 3, step_size = 2,     size_unit = \"snp\", min_loci = 2   ) #> # A tibble: 3 × 6 #>   chromosome start   end fst_pop1.pop2 fst_pop1.pop3 fst_pop2.pop3 #>   <chr>      <dbl> <dbl>         <dbl>         <dbl>         <dbl> #> 1 chr1           1     3         0.277         0.311           0.4 #> 2 chr1           3     5        -0.167         0.222           0   #> 3 chr2           1     3        -0.16         -0.467          -0.5"},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/windows_pop_tajimas_d.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute Tajima's D for a sliding window — windows_pop_tajimas_d","title":"Compute Tajima's D for a sliding window — windows_pop_tajimas_d","text":"function computes Tajima's D sliding window across chromosome.","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/windows_pop_tajimas_d.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute Tajima's D for a sliding window — windows_pop_tajimas_d","text":"","code":"windows_pop_tajimas_d(   .x,   type = c(\"matrix\", \"tidy\", \"list\"),   window_size,   step_size,   size_unit = c(\"snp\", \"bp\"),   min_loci = 1,   complete = FALSE )"},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/windows_pop_tajimas_d.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute Tajima's D for a sliding window — windows_pop_tajimas_d","text":".x (potentially grouped) gen_tibble object type type object return, using grouped method. One \"matrix\", \"tidy\", \"list\". Default \"matrix\". window_size size window use estimates. step_size step size use windows. size_unit Either \"snp\" \"bp\". \"snp\", window size step size number SNPs. \"bp\", window size step size base pairs. min_loci minimum number loci required calculate window statistic. number loci window less , window statistic NA. complete function evaluated complete windows ? FALSE, default, partial computations allowed end chromosome.","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/windows_pop_tajimas_d.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute Tajima's D for a sliding window — windows_pop_tajimas_d","text":"data grouped, data frame following columns: chromosome: chromosome window start: starting locus window end: ending locus window tajimas_d: Tajima's D population data grouped, either: data frame following columns: chromosome: chromosome window start: starting locus window end: ending locus window n_loci: number loci window group: Tajima's D group given window  (many columns groups gen_tibble, named grouping levels) tidy tibble following columns: chromosome: chromosome window start: starting locus window end: ending locus window n_loci: number loci window group: name group stat: Tajima's D given group given window list data frames, one per group, following columns: chromosome: chromosome window start: starting locus window end: ending locus window stat: Tajima's D given window n_loci: number loci window","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/windows_pop_tajimas_d.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute Tajima's D for a sliding window — windows_pop_tajimas_d","text":"","code":"example_gt <- load_example_gt(\"grouped_gen_tbl\")  # Calculate Tajima's D across a window of 3 SNPs, with a step size of 2 SNPs example_gt %>%   windows_pop_tajimas_d(     window_size = 3, step_size = 2,     size_unit = \"snp\", min_loci = 2   ) #> # A tibble: 3 × 7 #>   chromosome start   end n_loci  pop1   pop2    pop3 #>   <chr>      <dbl> <dbl>  <dbl> <dbl>  <dbl>   <dbl> #> 1 chr1           1     3      3 1.03  -0.612  -0.710 #> 2 chr1           3     5      2 2.04  -0.612  -0.612 #> 3 chr2           1     3      2 0.311 -0.710 Inf"},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/windows_stats_generic.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate window statistics from per locus estimates — windows_stats_generic","title":"Estimate window statistics from per locus estimates — windows_stats_generic","text":"function mostly designed developers: general function estimate window statistics per locus estimates. function takes vector per locus estimates, aggregates sum mean per window. compute specific quantities directly gen_tibble, use appropriate window_* functions, e.g windows_pairwise_pop_fst() compute pairwise Fst.","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/windows_stats_generic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate window statistics from per locus estimates — windows_stats_generic","text":"","code":"windows_stats_generic(   .x,   loci_table,   operator = c(\"mean\", \"sum\", \"custom\"),   window_size,   step_size,   size_unit = c(\"snp\", \"bp\"),   min_loci = 1,   complete = FALSE,   f = NULL,   ... )"},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/windows_stats_generic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate window statistics from per locus estimates — windows_stats_generic","text":".x vector containing per locus estimates. loci_table dataframe including least column 'chromosome', additionally column 'position' size_unit \"bp\". operator operator use window statistics. Either \"mean\", \"sum\" \"custom\" use custom function .f. window_size size window use estimates. step_size step size use windows. size_unit Either \"snp\" \"bp\". \"snp\", window size step size number SNPs. \"bp\", window size step size base pairs. min_loci minimum number loci required calculate window statistic. number loci window less , window statistic NA. complete function evaluated complete windows ? FALSE, default, partial computations allowed end chromosome. f custom function use window statistics. function take vector locus estimates return single value. ... Additional arguments passed custom operator function.","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/windows_stats_generic.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate window statistics from per locus estimates — windows_stats_generic","text":"tibble columns: 'chromosome', 'start', 'end', 'stats', 'n_loci'. 'stats' column contains mean per locus estimates window, 'n_loci' contains number loci window.","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/reference/windows_stats_generic.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimate window statistics from per locus estimates — windows_stats_generic","text":"","code":"example_gt <- load_example_gt(\"gen_tbl\")  miss_by_locus <- loci_missingness(example_gt)  # Calculate mean missingness across windows windows_stats_generic(miss_by_locus,   loci_table = show_loci(example_gt),   operator = \"mean\", window_size = 1000,   step_size = 1000, size_unit = \"bp\",   min_loci = 1, complete = FALSE ) #> # A tibble: 2 × 5 #>   chromosome start   end   stat n_loci #>   <chr>      <dbl> <dbl>  <dbl>  <dbl> #> 1 chr1           1  1000 0.0714      4 #> 2 chr2           1  1000 0.143       2"},{"path":"https://evolecolgroup.github.io/tidypopgen/news/index.html","id":"tidypopgen-040","dir":"Changelog","previous_headings":"","what":"tidypopgen 0.4.0","title":"tidypopgen 0.4.0","text":"store chromosomes factors, remove redundant column storing chromosome integer","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/news/index.html","id":"tidypopgen-033","dir":"Changelog","previous_headings":"","what":"tidypopgen 0.3.3","title":"tidypopgen 0.3.3","text":"use FBM backend (rather complete bigsnpr object) fix minor bugs","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/news/index.html","id":"tidypopgen-032","dir":"Changelog","previous_headings":"","what":"tidypopgen 0.3.2","title":"tidypopgen 0.3.2","text":"CRAN release: 2025-08-27 tidy CRAN submission","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/news/index.html","id":"tidypopgen-030","dir":"Changelog","previous_headings":"","what":"tidypopgen 0.3.0","title":"tidypopgen 0.3.0","text":"add gt_pseudohaploid() adapt appropriate functions work pseudohaploids","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/news/index.html","id":"tidypopgen-020","dir":"Changelog","previous_headings":"","what":"tidypopgen 0.2.0","title":"tidypopgen 0.2.0","text":"Lots optimisations speed processing large datasets. Added sf backend tidypopgen spatial data. Windowed statistics.","code":""},{"path":"https://evolecolgroup.github.io/tidypopgen/news/index.html","id":"tidypopgen-010","dir":"Changelog","previous_headings":"","what":"tidypopgen 0.1.0","title":"tidypopgen 0.1.0","text":"Initial public version tidypopgen released r-universe.","code":""}]
