---
title: "Interpolating genetic data"
output: html_document
date: "2025-10-10"
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(
  collapse = TRUE,
  comment = "#>",
  fig.path = "./figure/interpolating/")
```

In this vignette, we will demonstrate how to interpolate measures of genetic diversity
across geographic space using the tidypopgen integration with the `sf` package.

To do so, we will use a dataset of *Anolis punctatus* lizards from South America,
introduced in the vignette 'Population genetic analysis with tidypopgen'. For a full analysis of this dataset using `tidypopgen`, and details on how to download the data, please refer to this previous vignette.

Let's begin by reading in the data and attaching the metadata:

```{r}
library(tidypopgen)
vcf_path <-
  system.file("/extdata/anolis/punctatus_t70_s10_n46_filtered.recode.vcf.gz",
    package = "tidypopgen"
  )
anole_gt <-
  gen_tibble(vcf_path, quiet = TRUE, backingfile = tempfile("anolis_"))

pops_path <- system.file("/extdata/anolis/punctatus_n46_meta.csv",
  package = "tidypopgen"
)
pops <- read.csv(pops_path)
anole_gt <- anole_gt %>% left_join(pops, by = "id")
```

Let us check that we have been successful:

```{r}
anole_gt %>% glimpse()
```

## Map

To begin, we can add `sf` geometry to our `gen_tibble` using `gt_add_sf()`.

```{r}
anole_gt <- gt_add_sf(anole_gt, c("longitude", "latitude"))
anole_gt
```

We can then begin by creating a map of South America using the
`rnaturalearth` package.

```{r anolis_map}
library(rnaturalearth)
library(ggplot2)

map <- ne_countries(
  continent = "South America",
  type = "map_units", scale = "medium"
)

ggplot() +
  geom_sf(data = map) +
  geom_sf(data = anole_gt$geometry, aes(colour = anole_gt$population)) +
  coord_sf(
    xlim = c(-85, -30),
    ylim = c(-30, 15)
  ) +
  theme_minimal() +
  guides(colour = guide_legend(title = "Population"))
```

# PCA

Our previous vignette used PCA, DAPC, and ADMIXTRUE to show that this sample of *Anolis punctatus* lizards contains three main genetic clusters across the range of the species. Suppose that, knowing this, we wanted to interpolate the first principal component across the range of the species to observe the change in genetic variation across space.

Let's run a PCA and augment the gen_tibble with the principal component scores.

```{r}
anole_gt <- gt_impute_simple(anole_gt, method = "mode")
anole_pca <- anole_gt %>% gt_pca_partialSVD(k = 30)
anole_gt <- augment(anole_pca, data = anole_gt)
```

# Interpolating

Now that we have a map and our genetic data with PCA scores, we can interpolate the scores of the first principal component across the landscape.

To begin with, we will need to load the `sf`, `terra`, and `tidyterra` packages.

```{r}
library(sf)
library(terra)
library(tidyterra)
```

We will first prepare the map by unifying all geometries into a single polygon and casting it to "POLYGON" type.

```{r}
map <- st_union(map) %>% st_sf()
map <- st_cast(map, "POLYGON")
```

The, we need to create a grid of points covering the area of the map.

```{r}
grid <- rast(map, nrows = 100, ncols = 100)
xy <- xyFromCell(grid, 1:ncell(grid))
```

By converting this grid to an `sf` object, we can then use `st_filter()` to keep only the points that fall within the landmass.

```{r}
coop <- st_as_sf(as.data.frame(xy), coords = c("x", "y"),
                 crs = st_crs(map))
coop <- st_filter(coop, map)
```

Now we can use the `gstat` package to perform spatial interpolation of heterozygosity.

`gstat` implements several methods for spatial interpolation, including inverse distance weighting (IDW) and kriging. Here, we will use IDW to interpolate heterozygosity across our grid of points.

We remove the genotypes from our `gen_tibble`, as `gstat` does not accept a `gen_tibble` object, and then run the interpolation:

```{r}
anole_sf_obj <- anole_gt %>% select(-"genotypes")

library(gstat)
res <- gstat(formula = .fittedPC1 ~ 1, locations = anole_sf_obj,
             nmax = nrow(anole_sf_obj),
             set = list(idp = 1))

resp <- predict(res, coop)
resp$x <- st_coordinates(resp)[,1]
resp$y <- st_coordinates(resp)[,2]
```

We can rasterize the interpolated values:

```{r}
pred <- rasterize(resp, grid, field = "var1.pred", fun = "mean")
```

And for a publication-ready figure, we can use `ggplot2` and the `tidyterra` package to plot:

```{r interpolated_anolis}
ggplot()  +
  geom_sf(data = map, fill = "grey95") +
  geom_sf(data = anole_gt$geometry, aes(colour = anole_gt$.fittedPC1)) +
  geom_spatraster(data = pred, aes(fill = mean)) +
  coord_sf(
    xlim = c(-85, -30),
    ylim = c(-30, 15)
  ) +
  scale_fill_viridis_c(name = "Interpolated PC1", alpha= 0.8, na.value = NA) +
  scale_color_viridis_c(name = "Observed", alpha= 0.8) +
  theme_minimal()

```

From our interpolated map, we can see the clear gradient in the first principal component scores across the range of *Anolis punctatus*, with the highest scores among Atlantic forest populations in the east, and the lowest scores clustered among Amazonian populations in the west.
